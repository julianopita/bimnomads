[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "viewer/abstractbufferset.js",
    "content": "import {FatLineRenderer} from './fatlinerenderer.js'\n\n/**\n * @ignore\n */\nexport class AbstractBufferSet {\n    \n    constructor(viewer) {\n    \tthis.viewer = viewer;\n        this.geometryIdToIndex = new Map();\n    }\n\n    joinConsecutiveRanges(ranges) {\n        while (true) {\n\t\t\tvar removed = false;\n\t\t\tfor (let i = 0; i < ranges.length - 1; ++i) {\n\t\t\t\tlet a = ranges[i];\n\t\t\t\tlet b = ranges[i+1];\n\t\t\t\tif (a[1] == b[0]) {\n\t\t\t\t\tranges.splice(i, 2, [a[0], b[1]]);\n\t\t\t\t\tremoved = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!removed) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n    }\n\n    complementRanges(ranges) {\n        // @todo: horribly inefficient, do not try this at home.\n        var complement =  [[0, this.nrIndices]];\n        ranges.forEach((range)=>{\n            let [a, b] = range;\n            const break_out_foreach = {};\n            try {\n                complement.forEach((originalRange, i)=>{\n                    let [o, p] = originalRange;\n                    if (a >= o && a <= p) {\n                        if (o == a) {\n                            complement[i][0] = b;\n                        } else {\n                            complement.splice(i, 1, [o, a], [b, p]);\n                        }\t\t\t\t\t\t\t\n                        throw break_out_foreach;\n                    }\n                });\n            } catch (e) {\n                if (e !== break_out_foreach) {\n                    throw e;\n                }\n            }\n        });\n\n        return complement;\n    }\n\n    createLineRenderer(gl, a, b) {\n        const lineRenderer = new FatLineRenderer(this.viewer, gl, {\n            quantize: this.positionBuffer.js_type !== Float32Array.name\n        });\n\n        const positions = new window[this.positionBuffer.js_type](this.positionBuffer.N);\n        const indices = new window[this.indexBuffer.js_type](b-a);\n        \n        // @todo: get only part of positions [min(indices), max(indices)]\n        var restoreArrayBinding = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n        gl.getBufferSubData(gl.ARRAY_BUFFER, 0, positions);\n        \n        var restoreElementBinding = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.getBufferSubData(gl.ELEMENT_ARRAY_BUFFER, a * 4, indices, 0, indices.length);\n        \n        const s = new Set();\n        \n        for (let i = 0; i < indices.length; i += 3) {\n            let abc = indices.subarray(i, i + 3);\n\n            for (let j = 0; j < 3; ++j) {\n                let ab = [abc[j], abc[(j+1)%3]];\n                ab.sort();\n                let abs = ab.join(\":\");\n\n                if (s.has(abs)) {\n                    s.delete(abs);\n                } else {\n                    s.add(abs);\n                }\n            }\n        }\n        \n        for (let e of s) {\n            let [a,b] = e.split(\":\");\n            let A = positions.subarray(a * 3).subarray(0,3);\n            let B = positions.subarray(b * 3).subarray(0,3);\n            lineRenderer.pushVertices(A, B);\n        }\t\t\t\n\n        lineRenderer.finalize();            \n\n        gl.bindBuffer(gl.ARRAY_BUFFER, restoreArrayBinding);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, restoreElementBinding);\n\n        return lineRenderer;\n    }\n\n    computeVisibleInstances(ids_with_or_without, gl) {\n        var ids = Object.values(ids_with_or_without)[0];\n        var exclude = \"without\" in ids_with_or_without;\n        \n\t\tvar ids_str = exclude + ':' +  ids.frozen;\n\n        {\n            var cache_lookup;\n            if ((cache_lookup = this.visibleRanges.get(ids_str))) {\n                return cache_lookup;\n            }\n        }\n\n        let ranges = {instanceIds: [], hidden: exclude, somethingVisible: null};\n        this.objects.forEach((ob, i) => {\n            if (ids !== null && ids.has(ob.id)) {\n                // @todo, for large lists of objects, this is not efficient\n                ranges.instanceIds.push(i);\n            }\n        });\n\n        if (ranges.instanceIds.length == this.objects.length) {\n            ranges.instanceIds = [];\n            ranges.hidden = !ranges.hidden;\n        }\n\n        ranges.somethingVisible = ranges.hidden\n            ? ranges.instanceIds.length < this.objects.length\n            : ranges.instanceIds.length > 0;\n\n        this.visibleRanges.set(ids_str, ranges);\n\n        if (!exclude && ranges.instanceIds.length && this.lineIndexBuffers.size === 0) {\n            let lineRenderer = this.createLineRenderer(gl, 0, this.indexBuffer.N);\n            // This will result in a different dequantization matrix later on, not sure why\n            lineRenderer.croid = this.croid;\n            this.objects.forEach((ob) => {\n                lineRenderer.matrixMap.set(ob.id, ob.matrix);\n                this.lineIndexBuffers.set(ob.id, lineRenderer);\n            });\n        }\n\n        return ranges;\n    }\n    \n    computeVisibleRanges(ids_with_or_without, gl) {\n\t\tvar ids = Object.values(ids_with_or_without)[0];\n\t\tvar exclude = \"without\" in ids_with_or_without;\n\n\t\tconst ids_str = exclude + ':' +  ids.frozen;\n\n        {\n            var cache_lookup;\n            if ((cache_lookup = this.visibleRanges.get(ids_str))) {\n                return cache_lookup;\n            }\n        }\n\n        if (ids === null || ids.size === 0) {\n            return [[0, this.nrIndices]];\n        }\n\n        // generator function that yields ranges in this buffer for the selected ids\n        function* _(geometryIdToIndex) {\n            var oids;\n            for (var i of ids) {\n                if ((oids = geometryIdToIndex.get(i))) {\n                    for (var j = 0; j < oids.length; ++j) {\n                        yield [i, [oids[j].start, oids[j].start + oids[j].length]];\n                    }\n                }\n            }\n        };\n\n        const id_ranges = this.geometryIdToIndex\n            ? Array.from(_(this.geometryIdToIndex)).sort((a, b) => (a[1][0] > b[1][0]) - (a[1][0] < b[1][0]))\n            // If we don't have this mapping, we're dealing with a dedicated\n            // non-instanced bufferset for one particular overriden object\n            : [[this.objectId & 0x8FFFFFFF, [0, this.nrIndices]]];\n\t\tconst ranges = id_ranges.map((arr) => {return arr[1];});\n\n\t\tthis.joinConsecutiveRanges(ranges);\n\n\t\tif (exclude) {\n            let complement = this.complementRanges(ranges);\n\t\t\t// store in cache\n\t\t\tthis.visibleRanges.set(ids_str, complement);\n\t\t\treturn complement;\n\t\t}\t\t\n\n        // store in cache\n        this.visibleRanges.set(ids_str, ranges);\n\n        // Create fat line renderings for these elements. This should (a) \n        // not in the draw loop (b) maybe in something like a web worker\n        id_ranges.forEach((range, i) => {\n            let [id, [a, b]] = range;\n            if (this.lineIndexBuffers.has(id)) {\n                return;\n            }\n\t\t\tlet lineRenderer = this.createLineRenderer(gl, a, b);\n            this.lineIndexBuffers.set(id, lineRenderer);\n        });\n       \n        return ranges;\n\t}\n\t\n\treset() {\n\t\tthis.positionsIndex = 0;\n\t\tthis.normalsIndex = 0;\n\t\tthis.pickColorsIndex = 0;\n\t\tthis.indicesIndex = 0;\n\t\tthis.nrIndices = 0;\n\t\tthis.bytes = 0;\n\t\tthis.visibleRanges = new Map();\n\t\tthis.geometryIdToIndex = new Map();\n\t\tthis.lineIndexBuffers = new Map();\n\t}\n\n\tcopy(gl, objectId) {\n        let returnDictionary = {};\n\n        if (this.objects) {\n            return this.copyEmpty();\n        } else {\n            let idx = this.geometryIdToIndex.get(objectId)[0];\n            let [offset, length] = [idx.start, idx.length];\n\n            const indices = new Uint32Array(length);\n\n            var restoreElementBinding = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n            gl.getBufferSubData(gl.ELEMENT_ARRAY_BUFFER, offset * 4, indices, 0, indices.length);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, restoreElementBinding);\n\n            let [minIndex, maxIndex] = [Math.min.apply(null, indices), Math.max.apply(null, indices)];\n            let numVertices = maxIndex - minIndex + 1;\n\n            let toCopy = [\"positionBuffer\", \"normalBuffer\", \"colorBuffer\", \"pickColorBuffer\"];\n            \n            toCopy.forEach((name) => {\n                let buffer = this[name];\n                let bytes_per_elem = window[buffer.js_type].BYTES_PER_ELEMENT;\n                let gpu_data = new window[buffer.js_type](numVertices * buffer.components);\n\n                var restoreArrayBinding = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n                gl.getBufferSubData(gl.ARRAY_BUFFER, minIndex * bytes_per_elem * buffer.components, gpu_data, 0, gpu_data.length);\n                gl.bindBuffer(gl.ARRAY_BUFFER, restoreArrayBinding);\n\n                let shortName = name.replace(\"Buffer\", \"\") + \"s\";\n                returnDictionary[shortName] = gpu_data;\n                returnDictionary[\"nr\" + shortName.substr(0,1).toUpperCase() + shortName.substr(1)] = gpu_data.length;\n            });\n\n            for (let i = 0; i < indices.length; ++i) {\n                indices[i] -= minIndex;\n            }\n\n            returnDictionary[\"indices\"] = indices;\n            returnDictionary[\"nrIndices\"] = indices.length;\n            \n        }\n\n\t\treturn returnDictionary;\n\t}\n\n\tsetColor(gl, objectId, clr) {\n        // Reusing buffer sets always results in a copy\n        if (this.objects) {\n            return false;\n        }\n\n        // Switching transparency states results in a copy\n\t\tif (clr.length == 4 && this.hasTransparency != (clr[3] < 1.)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar oldColors, newColors, clrArray;\n\n\t\tif (clr.length == 4) {\n\t\t\tlet factor = this.colorBuffer.js_type == Uint8Array.name ? 255. : 1.;\n\t\t\tclrArray = new window[this.colorBuffer.js_type](4);\n\t\t\tfor (let i = 0; i < 4; ++i) {\n\t\t\t\tclrArray[i] = clr[i] * factor;\n\t\t\t}\n\t\t} else {\n\t\t\tnewColors = clr;\n\t\t}\n\n\t\tthis.geometryIdToIndex.get(objectId).forEach((idx) => {\n\t\t\tlet [offet, length] = [idx.color, idx.colorLength];\n\t\t\tlet bytes_per_elem = window[this.colorBuffer.js_type].BYTES_PER_ELEMENT;\n\t\t\t\n\t\t\t// Assumes there is just one index pair, this is for now always the case.\n\t\t\toldColors = new window[this.colorBuffer.js_type](length);\n\n\t\t\tif (clr.length == 4) {\n\t\t\t\tnewColors = new window[this.colorBuffer.js_type](length);\n\t\t\t\tfor (let i = 0; i < length; i += 4) {\n\t\t\t\t\tnewColors.set(clrArray, i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar restoreArrayBinding = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n\t\t\tgl.getBufferSubData(gl.ARRAY_BUFFER, offet * bytes_per_elem, oldColors, 0, length);\n\t\t\tgl.bufferSubData(gl.ARRAY_BUFFER, offet * bytes_per_elem, newColors, 0, length);\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, restoreArrayBinding);\n\t\t});\n\n\t\treturn oldColors;\n\t}\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/abstractbufferset.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "AbstractBufferSet",
    "memberof": "viewer/abstractbufferset.js",
    "static": true,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/abstractbufferset.js",
    "importStyle": "{AbstractBufferSet}",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "geometryIdToIndex",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#geometryIdToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "joinConsecutiveRanges",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#joinConsecutiveRanges",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "ranges",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "complementRanges",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#complementRanges",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "ranges",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "createLineRenderer",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#createLineRenderer",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "computeVisibleInstances",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#computeVisibleInstances",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "ids_with_or_without",
        "types": [
          "*"
        ]
      },
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "computeVisibleRanges",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#computeVisibleRanges",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "ids_with_or_without",
        "types": [
          "*"
        ]
      },
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "reset",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#reset",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "positionsIndex",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#positionsIndex",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "normalsIndex",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#normalsIndex",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "pickColorsIndex",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#pickColorsIndex",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "indicesIndex",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#indicesIndex",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "nrIndices",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#nrIndices",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "bytes",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#bytes",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "visibleRanges",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#visibleRanges",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "lineIndexBuffers",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#lineIndexBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "copy",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#copy",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "setColor",
    "memberof": "viewer/abstractbufferset.js~AbstractBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/abstractbufferset.js~AbstractBufferSet#setColor",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "clr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "viewer/bimserverviewer.js",
    "content": "import {Viewer} from './viewer.js'\r\nimport {DefaultRenderLayer} from './defaultrenderlayer.js'\r\nimport {TilingRenderLayer} from './tilingrenderlayer.js'\r\nimport {VertexQuantization} from './vertexquantization.js'\r\nimport {Executor} from './executor.js'\r\nimport {GeometryLoader} from \"./geometryloader.js\"\r\nimport {Stats} from \"./stats.js\"\r\nimport {DefaultSettings} from \"./defaultsettings.js\"\r\nimport {Utils} from \"./utils.js\"\r\n\r\n/*\r\n * The main class you instantiate when creating a viewer that will be loading data} from a BIMserver.\r\n * This will eventually become a public API\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class BimServerViewer {\r\n\tconstructor(bimServerApi, settings, canvas, width, height, stats) {\r\n\t\tif (stats == null) {\r\n\t\t\tstats = new Stats(false);\r\n\t\t}\r\n\t\t\r\n\t\t// Necessary for settings\r\n\t\twindow.bimServerViewer = this;\r\n\r\n\t\tthis.canvas = canvas;\r\n\r\n\t\tthis.settings = settings;\r\n\t\tthis.bimServerApi = bimServerApi;\r\n\t\tthis.stats = stats;\r\n\t\tthis.width = width || canvas.offsetWidth;\r\n\t\tthis.height = height || canvas.offsetHeight;\r\n\t\tthis.layers = [];\r\n\t\t\r\n\t\tthis.settings = DefaultSettings.create(settings);\r\n\r\n\t\tthis.viewer = new Viewer(canvas, settings, stats, this.width, this.height);\r\n\t\t\r\n\t\tstats.setParameter(\"Renderer settings\", \"Object colors\", this.settings.useObjectColors);\r\n\t\tstats.setParameter(\"Renderer settings\", \"Small indices if possible\", this.settings.useSmallIndicesIfPossible);\r\n\t\tstats.setParameter(\"Renderer settings\", \"Quantize normals\", this.settings.quantizeNormals);\r\n\t\tstats.setParameter(\"Renderer settings\", \"Quantize vertices\", this.settings.quantizeVertices);\r\n\r\n\t\tstats.setParameter(\"Loader settings\", \"Object colors\", this.settings.loaderSettings.useObjectColors);\r\n\t\tstats.setParameter(\"Loader settings\", \"Quantize normals\", this.settings.loaderSettings.quantizeNormals);\r\n\t\tstats.setParameter(\"Loader settings\", \"Quantize vertices\", this.settings.loaderSettings.quantizeVertices);\r\n\r\n\t\t// Autoresize automatically resizes the viewer to the full width/height of the screen\r\n\t\tif (this.settings.autoResize) {\r\n\t\t\tthis.autoResizeCanvas();\r\n\t\t\tthis.resizeHandler = () => {\r\n\t\t\t\tthis.autoResizeCanvas();\r\n\t\t\t};\r\n\t\t\twindow.addEventListener(\"resize\", this.resizeHandler, false);\r\n\t\t} else {\r\n\t\t\tthis.viewer.setDimensions(width, height);\r\n\t\t}\r\n\t}\r\n\r\n\tautoResizeCanvas() {\r\n\t\tthis.canvas.width = window.innerWidth;\r\n\t\tthis.canvas.height = window.innerHeight;\r\n\t\tthis.viewer.setDimensions(this.canvas.width, this.canvas.height);\r\n\t}\r\n\r\n\tloadRevisionByRoid(roid) {\r\n\t\tvar promise = new Promise((resolve, reject) => {\r\n\t\t\tthis.loadingResolve = resolve;\r\n\t\t\tthis.totalStart = performance.now();\r\n\t\t\t\r\n\t\t\tthis.viewer.init().then(() => {\r\n\t\t\t\tthis.bimServerApi.call(\"ServiceInterface\", \"listBoundingBoxes\", {\r\n\t\t\t\t\troids: [roid]\r\n\t\t\t\t}, (bbs) => {\r\n\t\t\t\t\tif (bbs.length > 1) {\r\n\t\t\t\t\t\tthis.settings.regionSelector(bbs).then((bb) => {\r\n\t\t\t\t\t\t\tthis.genDensityThreshold(roid, bb);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.genDensityThreshold(roid, bbs[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn promise;\r\n\t}\r\n\t\r\n\tloadRevision(revision) {\r\n\t\tthis.loadRevisionByRoid(revision.oid);\r\n\t}\r\n\t\r\n\t/*\r\n\t * This will load a BIMserver project. The given argument must be a Project object that is returned by the BIMserver JavaScript API.\r\n\t * \r\n\t * In later stages much more control will be given to the user, for now the stategy is:\r\n\t * - If this project has no subprojects, we will simply load the latest revision of the project (if available)\r\n\t * - If this project has subprojects, all latest revisions of all subprojects _that have no subprojects_ will be loaded\r\n\t * \r\n\t * All objects will be loaded except IfcOpeningElement and IfcSpace (these exclusions for now are in the GeometryLoader)\r\n\t * \r\n\t */\r\n\tloadModel(project) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.totalStart = performance.now();\r\n\r\n\t\t\tthis.viewer.init().then(() => {\r\n\t\t\t\tthis.bimServerApi.call(\"ServiceInterface\", \"listBoundingBoxes\", {\r\n\t\t\t\t\troids: [project.lastRevisionId]\r\n\t\t\t\t}, (bbs) => {\r\n\t\t\t\t\tif (bbs.length > 1) {\r\n\t\t\t\t\t\tthis.settings.regionSelector(bbs).then((bb) => {\r\n\t\t\t\t\t\t\tthis.genDensityThreshold(project.lastRevisionId, bb).then(resolve);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.genDensityThreshold(project.lastRevisionId, bbs[0]).then(resolve);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgenDensityThreshold(roid, bb) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.bimServerApi.call(\"ServiceInterface\", \"getDensityThreshold\", {\r\n\t\t\t\troid: roid,\r\n\t\t\t\tnrTriangles: this.viewer.settings.triangleThresholdDefaultLayer,\r\n\t\t\t\texcludedTypes: [\"IfcSpace\", \"IfcOpeningElement\", \"IfcAnnotation\"]\r\n\t\t\t}, (densityAtThreshold) => {\r\n\t\t\t\tthis.densityAtThreshold = densityAtThreshold;\r\n\t\t\t\tthis.densityThreshold = densityAtThreshold.density;\r\n\t\t\t\tvar nrPrimitivesBelow = densityAtThreshold.trianglesBelow;\r\n\t\t\t\tvar nrPrimitivesAbove = densityAtThreshold.trianglesAbove;\r\n\t\t\t\t\r\n\t\t\t\tthis.bimServerApi.call(\"ServiceInterface\", \"getRevision\", {\r\n\t\t\t\t\troid: roid\r\n\t\t\t\t}, (revision) => {\r\n\t\t\t\t\tthis.internalLoadRevision(revision, nrPrimitivesBelow, nrPrimitivesAbove).then(resolve);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*\r\n\t * Private method\r\n\t */\r\n\tinternalLoadRevision(revision, nrPrimitivesBelow, nrPrimitivesAbove) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tthis.revisionId = revision.oid;\r\n\r\n\t\t\tthis.viewer.stats.setParameter(\"Models\", \"Models to load\", 1);\r\n\r\n\t//\t\tconsole.log(\"Total triangles\", nrPrimitivesBelow + nrPrimitivesAbove);\r\n\t\t\t\r\n\t\t\tvar requests = [\r\n\t\t\t\t[\"ServiceInterface\", \"getTotalBounds\", {\r\n\t\t\t\t\troids: [revision.oid]\r\n\t\t\t\t}],\r\n\t\t\t\t[\"ServiceInterface\", \"getTotalUntransformedBounds\", {\r\n\t\t\t\t\troids: [revision.oid]\r\n\t\t\t\t}]\r\n\t\t\t];\r\n\t\t\t\r\n\t\t\tif (this.settings.gpuReuse) {\r\n\t\t\t\trequests.push([\"ServiceInterface\", \"getGeometryDataToReuse\", {\r\n\t\t\t\t\troids: [revision.oid],\r\n\t\t\t\t\texcludedTypes: [\"IfcSpace\", \"IfcOpeningElement\", \"IfcAnnotation\"],\r\n\t\t\t\t\ttrianglesToSave: 0\r\n\t\t\t\t}]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (var croid of revision.concreteRevisions) {\r\n\t\t\t\trequests.push([\"ServiceInterface\", \"getModelBoundsUntransformedForConcreteRevision\", {\r\n\t\t\t\t\tcroid: croid\r\n\t\t\t\t}]);\r\n\t\t\t}\r\n\t\t\tfor (var croid of revision.concreteRevisions) {\r\n\t\t\t\trequests.push([\"ServiceInterface\", \"getModelBoundsForConcreteRevision\", {\r\n\t\t\t\t\tcroid: croid\r\n\t\t\t\t}]);\r\n\t\t\t}\r\n\r\n\t\t\tthis.bimServerApi.multiCall(requests, (responses) => {\r\n\t\t\t\tvar totalBounds = responses[0].result;\r\n\t\t\t\tvar totalBoundsUntransformed = responses[1].result;\r\n//\t\t\t\tconsole.log(totalBounds, totalBoundsUntransformed);\r\n\t\t\t\tif (this.settings.gpuReuse) {\r\n\t\t\t\t\tthis.geometryDataIdsToReuse = new Set(responses[2].result);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.geometryDataIdsToReuse = new Set(); // TODO later make this null, nicer\r\n\t\t\t\t}\r\n\t//\t\t\tconsole.log(\"Geometry Data IDs to reuse\", this.geometryDataIdsToReuse);\r\n\r\n\t\t\t\tvar add = this.settings.gpuReuse ? 3 : 2;\r\n\t\t\t\tvar modelBoundsUntransformed = new Map();\r\n\t\t\t\tfor (var i=0; i<(responses.length - add) / 2; i++) {\r\n\t\t\t\t\tmodelBoundsUntransformed.set(revision.concreteRevisions[i], responses[i + add].result);\r\n\t\t\t\t}\r\n\t\t\t\tvar modelBoundsTransformed = new Map();\r\n\t\t\t\tfor (var i=0; i<(responses.length - add) / 2; i++) {\r\n\t\t\t\t\tmodelBoundsTransformed.set(revision.concreteRevisions[i], responses[(responses.length - add) / 2 + i + add].result);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar bounds = [\r\n\t\t\t\t\ttotalBounds.min.x,\r\n\t\t\t\t\ttotalBounds.min.y,\r\n\t\t\t\t\ttotalBounds.min.z,\r\n\t\t\t\t\ttotalBounds.max.x,\r\n\t\t\t\t\ttotalBounds.max.y,\r\n\t\t\t\t\ttotalBounds.max.z,\r\n\t\t\t\t];\r\n\t\t\t\t\r\n\t\t\t\t// globalTransformation is a matrix that puts the complete model close to 0, 0, 0\r\n\t\t\t\tthis.viewer.globalTransformation = mat4.create();\r\n\t\t\t\tconst translation = vec3.fromValues(\r\n\t\t\t\t\t\t-(bounds[0] + (bounds[3] - bounds[0]) / 2), \r\n\t\t\t\t\t\t-(bounds[1] + (bounds[4] - bounds[1]) / 2), \r\n\t\t\t\t\t\t-(bounds[2] + (bounds[5] - bounds[2]) / 2));\r\n\t\t\t\tmat4.translate(this.viewer.globalTransformation, this.viewer.globalTransformation, translation);\r\n\r\n\t\t\t\tif (this.settings.quantizeVertices || this.settings.loaderSettings.quantizeVertices) {\r\n\t\t\t\t\tthis.viewer.vertexQuantization = new VertexQuantization(this.settings);\r\n\t\t\t\t\tfor (var croid of modelBoundsUntransformed.keys()) {\r\n\t\t\t\t\t\tthis.viewer.vertexQuantization.generateUntransformedMatrices(croid, modelBoundsUntransformed.get(croid));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.viewer.vertexQuantization.generateMatrices(totalBounds, totalBoundsUntransformed, this.viewer.globalTransformation);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthis.viewer.stats.inc(\"Primitives\", \"Primitives to load (L1)\", nrPrimitivesBelow);\r\n\t\t\t\tthis.viewer.stats.inc(\"Primitives\", \"Primitives to load (L2)\", nrPrimitivesAbove);\r\n\r\n\t\t\t\tvar min = vec3.fromValues(bounds[0], bounds[1], bounds[2]);\r\n\t\t\t\tvar max = vec3.fromValues(bounds[3], bounds[4], bounds[5]);\r\n\t\t\t\tvec3.transformMat4(min, min, this.viewer.globalTransformation);\r\n\t\t\t\tvec3.transformMat4(max, max, this.viewer.globalTransformation);\r\n\t\t\t\tthis.viewer.setModelBounds([min[0], min[1], min[2], max[0], max[1], max[2]]);\r\n\t\t\t\t\r\n\t\t\t\t// TODO This is very BIMserver specific, clutters the code, should move somewhere else (maybe GeometryLoader)\r\n\t\t\t\tvar fieldsToInclude = [\"indices\"];\r\n\t\t\t\tfieldsToInclude.push(\"colorPack\");\r\n\t\t\t\tif (this.settings.loaderSettings.quantizeNormals) {\r\n\t\t\t\t\tif (this.settings.loaderSettings.prepareBuffers) {\r\n\t\t\t\t\t\tfieldsToInclude.push(\"normals\");\r\n\t\t\t\t\t\tfieldsToInclude.push(\"normalsQuantized\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfieldsToInclude.push(\"normalsQuantized\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfieldsToInclude.push(\"normals\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this.settings.loaderSettings.quantizeVertices) {\r\n\t\t\t\t\tif (this.settings.loaderSettings.prepareBuffers) {\r\n\t\t\t\t\t\tfieldsToInclude.push(\"vertices\");\r\n\t\t\t\t\t\tfieldsToInclude.push(\"verticesQuantized\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfieldsToInclude.push(\"verticesQuantized\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfieldsToInclude.push(\"vertices\");\r\n\t\t\t\t}\r\n\t\t\t\tif (!this.settings.loaderSettings.useObjectColors) {\r\n\t\t\t\t\tfieldsToInclude.push(\"colorsQuantized\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar promise = Promise.resolve();\r\n\t\t\t\tif (this.viewer.settings.defaultLayerEnabled && nrPrimitivesBelow) {\r\n\t\t\t\t\tvar defaultRenderLayer = new DefaultRenderLayer(this.viewer, this.geometryDataIdsToReuse);\r\n\t\t\t\t\tthis.layers.push(defaultRenderLayer);\r\n\t\t\t\t\tthis.viewer.renderLayers.push(defaultRenderLayer);\r\n\r\n\t\t\t\t\tdefaultRenderLayer.setProgressListener((nrPrimitivesLoaded) => {\r\n\t\t\t\t\t\tvar percentage = 100 * nrPrimitivesLoaded / nrPrimitivesBelow;\r\n\t\t\t\t\t\tthis.updateProgress(percentage);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tpromise = this.loadDefaultLayer(defaultRenderLayer, revision, bounds, fieldsToInclude);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpromise.then(() => {\r\n\t\t\t\t\tthis.viewer.dirty = true;\r\n\t\t\t\t\tvar tilingPromise = Promise.resolve();\r\n\t\t\t\t\tif (this.viewer.settings.tilingLayerEnabled && nrPrimitivesAbove > 0) {\r\n\t\t\t\t\t\tvar tilingRenderLayer = new TilingRenderLayer(this.viewer, this.geometryDataIdsToReuse, bounds);\r\n\t\t\t\t\t\tthis.layers.push(tilingRenderLayer);\r\n\t\t\t\t\t\tthis.viewer.renderLayers.push(tilingRenderLayer);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttilingPromise = this.loadTilingLayer(tilingRenderLayer, revision, bounds, fieldsToInclude);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttilingPromise.then(() => {\r\n\t\t\t\t\t\tthis.viewer.stats.setParameter(\"Loading time\", \"Total\", performance.now() - this.totalStart);\r\n\t\t\t\t\t\tif (this.viewer.bufferSetPool != null) {\r\n\t\t\t\t\t\t\tthis.viewer.bufferSetPool.cleanup();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.loadingResolve != null) {\r\n\t\t\t\t\t\t\tthis.loadingResolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.viewer.dirty = true;\r\n\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tfindElement(globalId) {\r\n\t\tthis.bimServerApi.call(\"ServiceInterface\", \"getOidByGuid\", {\r\n\t\t\troid: this.revisionId,\r\n\t\t\tguid: globalId\r\n\t\t}, (oid) => {\r\n\t\t\t// @todo: This does not work, leaving this for Ruben\r\n\t\t\tvar buffer, desc;\r\n\t\t\tthis.layers.forEach((layer, index) => {\r\n\t\t\t\tif ((buffer = layer.geometryIdToBufferSet.get(oid))) {\r\n\t\t\t\t\tif ((desc = buffer.geometryIdToIndex.get(oid))) {\r\n\t\t\t\t\t\tconsole.log(buffer, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\tloadDefaultLayer(defaultRenderLayer, revision, totalBounds, fieldsToInclude) {\r\n//\t\tdocument.getElementById(\"progress\").style.display = \"block\";\r\n\r\n\t\tvar startLayer1 = performance.now();\r\n\r\n\t\tvar start = performance.now();\r\n\t\tvar executor = new Executor(4);\r\n\r\n\t\tconst loaderSettings = JSON.parse(JSON.stringify(this.settings.loaderSettings)); // copy\r\n\r\n\t\tloaderSettings.globalTransformation = Utils.toArray(this.viewer.globalTransformation);\r\n\t\t\r\n\t\tvar query = {\r\n\t\t\ttype: {\r\n\t\t\t\tname: \"IfcProduct\",\r\n\t\t\t\tincludeAllSubTypes: true,\r\n\t\t\t\texclude: [\"IfcSpace\", \"IfcOpeningElement\", \"IfcAnnotation\"]\r\n\t\t\t},\r\n\t\t\ttiles: {\r\n\t\t\t\tids: [0],\r\n\t\t\t\tdensityLowerThreshold: this.densityThreshold,\r\n\t\t\t\tdensityUpperThreshold: -1,\r\n\t\t\t\treuseLowerThreshold: -1,\r\n\t\t\t\tgeometryDataToReuse: Array.from(this.geometryDataIdsToReuse),\r\n\t\t\t\tmaxDepth: 0\r\n\t\t\t},\r\n\t\t\tinclude: {\r\n\t\t\t\ttype: \"IfcProduct\",\r\n\t\t\t\tfield: \"geometry\",\r\n\t\t\t\tinclude: {\r\n\t\t\t\t\ttype: \"GeometryInfo\",\r\n\t\t\t\t\tfield: \"data\",\r\n\t\t\t\t\tinclude: {\r\n\t\t\t\t\t\ttype: \"GeometryData\",\r\n\t\t\t\t\t\tfieldsDirect: fieldsToInclude\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tloaderSettings: loaderSettings\r\n\t\t};\r\n\t\t\r\n\t\tif (this.settings.loaderSettings.quantizeVertices) {\r\n\t\t\tquery.loaderSettings.vertexQuantizationMatrix = this.viewer.vertexQuantization.vertexQuantizationMatrixWithGlobalTransformation;\r\n\t\t}\r\n\t\t\r\n\t\tvar geometryLoader = new GeometryLoader(0, this.bimServerApi, defaultRenderLayer, [revision.oid], this.settings.loaderSettings, null, this.stats, this.settings, query, null, defaultRenderLayer.gpuBufferManager);\r\n\t\tif (this.settings.loaderSettings.quantizeVertices) {\r\n\t\t\tgeometryLoader.unquantizationMatrix = this.viewer.vertexQuantization.inverseVertexQuantizationMatrixWithGlobalTransformation;\r\n\t\t}\r\n\t\tdefaultRenderLayer.registerLoader(geometryLoader.loaderId);\r\n\t\texecutor.add(geometryLoader).then(() => {\r\n\t\t\tdefaultRenderLayer.done(geometryLoader.loaderId);\r\n\t\t\tthis.viewer.stats.inc(\"Models\", \"Models loaded\", 1);\r\n\t\t});\r\n\t\t\r\n\t\texecutor.awaitTermination().then(() => {\r\n\t\t\tthis.viewer.stats.setParameter(\"Loading time\", \"Layer 1\", performance.now() - start);\r\n\t\t\tdefaultRenderLayer.completelyDone();\r\n\t\t\tthis.viewer.stats.requestUpdate();\r\n\t\t\tthis.viewer.dirty = true;\r\n\t\t});\r\n\t\treturn executor.awaitTermination();\r\n\t}\r\n\r\n\tloadTilingLayer(tilingLayer, revision, totalBounds, fieldsToInclude) {\r\n\t\tvar startLayer2 = performance.now();\r\n\r\n\t\tvar layer2Start = performance.now();\r\n\t\t\r\n\t\tvar p = tilingLayer.load(this.bimServerApi, this.densityThreshold, [revision.oid], fieldsToInclude, (percentage) => {\r\n//\t\t\tdocument.getElementById(\"progress\").style.width = percentage + \"%\";\r\n\t\t});\r\n\t\tthis.viewer.dirty = true;\r\n\t\tp.then(() => {\r\n\t\t\tthis.viewer.stats.setParameter(\"Loading time\", \"Layer 2\", performance.now() - layer2Start);\r\n\t\t\tthis.viewer.stats.setParameter(\"Loading time\", \"Total\", performance.now() - this.totalStart);\r\n//\t\t\tdocument.getElementById(\"progress\").style.display = \"none\";\r\n\r\n\t\t\tif (this.viewer.bufferSetPool != null) {\r\n\t\t\t\tthis.viewer.bufferSetPool.cleanup();\r\n\t\t\t}\r\n\r\n//\t\t\ttilingLayer.octree.traverse((node) => {\r\n//\t\t\t\tif (node.liveBuffers.length > 0) {\r\n//\t\t\t\t\tconsole.log(node.getBounds(), node.liveBuffers.length);\r\n//\t\t\t\t}\r\n//\t\t\t}, true);\r\n\t\t});\r\n\t\treturn p;\r\n\t}\r\n\t\r\n\tcleanup() {\r\n\t\tconsole.log(\"resize handler\");\r\n\t\twindow.removeEventListener(\"resize\", this.resizeHandler, false);\r\n\t\tthis.viewer.cleanup();\r\n\t}\r\n\t\r\n\tupdateProgress(percentage) {\r\n\t\tif (this.progressListener) {\r\n\t\t\tthis.progressListener(percentage);\r\n\t\t}\r\n\t}\r\n\t\r\n\tsetProgressListener(progressListener) {\r\n\t\tthis.progressListener = progressListener;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/bimserverviewer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "BimServerViewer",
    "memberof": "viewer/bimserverviewer.js",
    "static": true,
    "longname": "viewer/bimserverviewer.js~BimServerViewer",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/bimserverviewer.js",
    "importStyle": "{BimServerViewer}",
    "description": "",
    "lineNumber": 19,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "canvas",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#settings",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "bimServerApi",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#bimServerApi",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "stats",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#stats",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "width",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#width",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "height",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#height",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "layers",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#layers",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "resizeHandler",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#resizeHandler",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "autoResizeCanvas",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#autoResizeCanvas",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "loadRevisionByRoid",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#loadRevisionByRoid",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "roid",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "loadingResolve",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#loadingResolve",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "totalStart",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#totalStart",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "loadRevision",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#loadRevision",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "revision",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "loadModel",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#loadModel",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "project",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "genDensityThreshold",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#genDensityThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "roid",
        "types": [
          "*"
        ]
      },
      {
        "name": "bb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "densityAtThreshold",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#densityAtThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "densityThreshold",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#densityThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "internalLoadRevision",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#internalLoadRevision",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "revision",
        "types": [
          "*"
        ]
      },
      {
        "name": "nrPrimitivesBelow",
        "types": [
          "*"
        ]
      },
      {
        "name": "nrPrimitivesAbove",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "revisionId",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#revisionId",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "geometryDataIdsToReuse",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#geometryDataIdsToReuse",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "findElement",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#findElement",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "params": [
      {
        "name": "globalId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "loadDefaultLayer",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#loadDefaultLayer",
    "access": "public",
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "params": [
      {
        "name": "defaultRenderLayer",
        "types": [
          "*"
        ]
      },
      {
        "name": "revision",
        "types": [
          "*"
        ]
      },
      {
        "name": "totalBounds",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldsToInclude",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "loadTilingLayer",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#loadTilingLayer",
    "access": "public",
    "description": null,
    "lineNumber": 389,
    "undocument": true,
    "params": [
      {
        "name": "tilingLayer",
        "types": [
          "*"
        ]
      },
      {
        "name": "revision",
        "types": [
          "*"
        ]
      },
      {
        "name": "totalBounds",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldsToInclude",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "cleanup",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#cleanup",
    "access": "public",
    "description": null,
    "lineNumber": 416,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "updateProgress",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#updateProgress",
    "access": "public",
    "description": null,
    "lineNumber": 422,
    "undocument": true,
    "params": [
      {
        "name": "percentage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "setProgressListener",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#setProgressListener",
    "access": "public",
    "description": null,
    "lineNumber": 428,
    "undocument": true,
    "params": [
      {
        "name": "progressListener",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "progressListener",
    "memberof": "viewer/bimserverviewer.js~BimServerViewer",
    "static": false,
    "longname": "viewer/bimserverviewer.js~BimServerViewer#progressListener",
    "access": "public",
    "description": null,
    "lineNumber": 429,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "viewer/bimsurfer.js",
    "content": "import {BimServerViewer} from \"./bimserverviewer.js\"\nimport {EventHandler} from \"./eventhandler.js\";\n// @todo why?\nimport {BimServerClient} from \"http://localhost:8080/apps/bimserverjavascriptapi/bimserverclient.js\"\nimport {Stats} from \"./stats.js\"\n\n/**\n * Entry point for the public BimSurfer API.\n *\n * @export\n * @class BimSurfer\n * @extends {EventHandler}\n */\nexport class BimSurfer extends EventHandler {\n    constructor() {\n        super();\n\n        this._api = null;\n    }\n\n    /**\n\t * Loads project meta-data} from a BIMserver and searches for the\n\t * specified revision id.\n\t * \n\t * @private\n\t * @param {Number} roid Revision id to load\n\t * @return\n\t * @memberof BimSurfer\n\t */\n\tloadProjects(roid) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._api.call(\"ServiceInterface\", \"getAllProjects\", {\n\t\t\t\tonlyTopLevel: false,\n\t\t\t\tonlyActive: true\n\t\t\t}, (projects) => {\n\t\t\t\tlet found = false;\n\t\t\t\tfor (var p of projects) {\n\t\t\t\t\tif (p.revisions.indexOf(roid) !== -1) {\n\t\t\t\t\t\tresolve(p);\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!found) {\n\t\t\t\t\treject(\"Revision id not found\");\n\t\t\t\t}\t\t\n\t\t\t});\n\t\t});\n    }\n    \n    /**\n\t * @private\n\t * @param {Object} project Project meta-data object\n\t * @param {HTMLElement} domNode The parent HTMLElement in which to create a CANVAS for WebGL rendering\n\t * @return\n\t * @memberof BimSurfer\n\t */\n\tloadModel(project, domNode) {\n\t\tvar stats = new Stats();\t\t\n\t\tstats.setParameter(\"Models\", \"Name\", project.name);\n\t\t\n\t\tthis._bimServerViewer = new BimServerViewer(this._api, {viewerBasePath:\"../\"}, domNode, null, null, stats);\n\t\t\n\t\tthis._bimServerViewer.setProgressListener((percentage) => {\n\t\t\tconsole.log(percentage + \"% loaded\")\n\t\t});\n\n\t\treturn this._bimServerViewer.loadModel(project);\n\t}\n\n    /**\n\t * Loads a BIMserver project into the specified domNode for rendering.\n\t * \n\t * @param {{username: String, password: String, roid: Number, domNode: HTMLElement}} params Function arguments\n\t * @return {Promise}\n\t * @memberof BimSurfer\n\t */\n\tload(params) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._api = new BimServerClient(params.bimserver);\n\t\t\tthis._api.init(() => {\n\t\t\t\tthis._api.login(params.username, params.password, () => {\n\t\t\t\t\tthis.loadProjects(params.roid).then((project)=>{                \n\t\t\t\t\t\tthis.loadModel(project, params.domNode).then(resolve).catch(reject);\n\t\t\t\t\t}).catch(reject);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\t\n\t/**\n\t * Sets the visibility for the specified elements\n\t *\n\t * @param {{ids: Number[], visible: Boolean}} params Function arguments\n\t * @memberof BimSurfer\n\t */\n\tsetVisibility(params) {\n\t\tlet v = this._bimServerViewer.viewer;\n\t\tif (params.ids) {\n\t\t\tv.setVisibility(params.ids, params.visible);\n\t\t} else if (params.types) {\n\t\t\tv.callByType(v.setVisibility, params.types, params.visible);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the selection state for the specified elements\n\t *\n\t * @param {{ids: Number[], selected: Boolean, clear: ?Boolean}} params Function arguments\n\t * @memberof BimSurfer\n\t */\n\tsetSelectionState(params) {\n\t\tlet v = this._bimServerViewer.viewer;\n\t\tv.setSelectionState(params.ids, params.selected, params.clear);\n\t}\n\n\t/**\n\t * Gets the currently selected elements\n\t *\n\t * @return {Number[]} Identifiers of selected elements\n\t * @memberof BimSurfer\n\t */\n\tgetSelected() {\n\t\tlet v = this._bimServerViewer.viewer;\n\t\treturn v.getSelected();\n\t}\n\n\t/**\n\t * Sets the color for the specified elements\n\t *\n\t * @param {{ids: Number[], color:{r:Number, g:Number, b:Number, a:Number}}} params\n\t * @memberof BimSurfer\n\t */\n\tsetColor(params) {\n\t\tlet v = this._bimServerViewer.viewer;\n\t\tlet clr = Array.from(\"rgba\").map((x) => {\n\t\t\tlet v = params.color[x];\n\t\t\treturn typeof(v) === \"undefined\" ? 1. : v;\n\t\t});\n\t\tv.setColor(params.ids, clr);\n\t}\n\n\t/**\n\t * Zooms the current camera in or out the fit the specified elements in the viewport\n\t *\n\t * @param {{ids: Number[]}} params\n\t * @memberof BimSurfer\n\t */\n\tviewFit(params) {\n\t\tlet v = this._bimServerViewer.viewer;\n\t\tv.viewFit(params.ids);\n\t}\n\n\t/**\n\t * Gets a javascript representation of the current camera orientation\n\t *\n\t * @return {{type: String, eye: Float32Array, target: Float32Array, up: Float32Array, fovy: ?Number}} Camera parameters\n\t * @memberof BimSurfer\n\t */\n\tgetCamera() {\n\t\tlet v = this._bimServerViewer.viewer;\n\t\tlet projectionType = v.camera.projectionType;\n\t\tlet json = {\n\t\t\ttype: projectionType,\n\t\t\teye: v.camera._eye.slice(0),\n\t\t\ttarget: v.camera._target.slice(0),\n\t\t\tup: v.camera._up.slice(0)\n\t\t}\n\t\tif (projectionType === \"persp\") {\n\t\t\tjson.fovy = v.camera.projection.fov;\n\t\t}\n\t\treturn json;\n\t}\n\n\t/**\n\t * Sets the current camera orientation based on specified parameters\n\t *\n\t * @param {{type: String, eye: Float32Array, target: Float32Array, up: Float32Array, fovy: ?Number}} params Camera parameters\n\t * @memberof BimSurfer\n\t */\n\tsetCamera(params) {\n\t\tlet v = this._bimServerViewer.viewer;\n\t\tv.camera.restore(params);\n\t}\n\n\t/**\n\t * Resets part of the viewer to its default state.\n\t *\n\t * @param {{cameraPosition: ?Boolean, colors: ?Boolean, visibility: ?Boolean}} params Parts of the viewer state to reset\n\t * @memberof BimSurfer\n\t */\n\treset(params) {\n\t\tlet v = this._bimServerViewer.viewer;\n\t\tif (params.cameraPosition) {\n\t\t\tv.resetCamera();\n\t\t}\n\t\tif (params.colors) {\n\t\t\tv.resetColors();\n\t\t}\n\t\tif (params.visibility) {\n\t\t\tv.resetVisibility();\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/bimsurfer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "class",
    "name": "BimSurfer",
    "memberof": "viewer/bimsurfer.js",
    "static": true,
    "longname": "viewer/bimsurfer.js~BimSurfer",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/bimsurfer.js",
    "importStyle": "{BimSurfer}",
    "description": "Entry point for the public BimSurfer API.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BimSurfer"
      }
    ],
    "interface": false,
    "extends": [
      "EventHandler"
    ]
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "_api",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#_api",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "loadProjects",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#loadProjects",
    "access": "private",
    "description": "Loads project meta-data} from a BIMserver and searches for the\nspecified revision id.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "roid",
        "description": "Revision id to load"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "loadModel",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#loadModel",
    "access": "private",
    "description": "",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "project",
        "description": "Project meta-data object"
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "domNode",
        "description": "The parent HTMLElement in which to create a CANVAS for WebGL rendering"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "_bimServerViewer",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#_bimServerViewer",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#load",
    "access": "public",
    "description": "Loads a BIMserver project into the specified domNode for rendering.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "{username: String, password: String, roid: Number, domNode: HTMLElement}"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Function arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "setVisibility",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#setVisibility",
    "access": "public",
    "description": "Sets the visibility for the specified elements",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "{ids: Number[], visible: Boolean}"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Function arguments"
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "setSelectionState",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#setSelectionState",
    "access": "public",
    "description": "Sets the selection state for the specified elements",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "{ids: Number[], selected: Boolean, clear: ?Boolean}"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Function arguments"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "getSelected",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#getSelected",
    "access": "public",
    "description": "Gets the currently selected elements",
    "lineNumber": 123,
    "return": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": "Identifiers of selected elements"
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "setColor",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#setColor",
    "access": "public",
    "description": "Sets the color for the specified elements",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "{ids: Number[], color:{r:Number, g:Number, b:Number, a:Number}}"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "viewFit",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#viewFit",
    "access": "public",
    "description": "Zooms the current camera in or out the fit the specified elements in the viewport",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "{ids: Number[]}"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "getCamera",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#getCamera",
    "access": "public",
    "description": "Gets a javascript representation of the current camera orientation",
    "lineNumber": 160,
    "return": {
      "nullable": null,
      "types": [
        "{type: String, eye: Float32Array, target: Float32Array, up: Float32Array, fovy: ?Number}"
      ],
      "spread": false,
      "description": "Camera parameters"
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "setCamera",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#setCamera",
    "access": "public",
    "description": "Sets the current camera orientation based on specified parameters",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "{type: String, eye: Float32Array, target: Float32Array, up: Float32Array, fovy: ?Number}"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Camera parameters"
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "reset",
    "memberof": "viewer/bimsurfer.js~BimSurfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bimsurfer.js~BimSurfer#reset",
    "access": "public",
    "description": "Resets part of the viewer to its default state.",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "{cameraPosition: ?Boolean, colors: ?Boolean, visibility: ?Boolean}"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Parts of the viewer state to reset"
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "viewer/bufferhelper.js",
    "content": "/*\r\n * This is a utility class, it contains a few methods that convert bytes to triangles and the other way around, these are estimations because the amount of reuse is not known\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class BufferHelper {\r\n\tstatic trianglesToBytes(settings, nrPrimitives) {\r\n\t\tvar reusedVerticesFactor = 0.5;\r\n\t\tvar estimatedNonReusedByteSize = 0;\r\n\t\tif (!settings.useObjectColors) {\r\n\t\t\testimatedNonReusedByteSize += nrPrimitives * 3 * 4;\r\n\t\t}\r\n\t\testimatedNonReusedByteSize += nrPrimitives * 3 * (settings.useSmallIndicesIfPossible ? 2 : 4); // indices\r\n\t\testimatedNonReusedByteSize += reusedVerticesFactor * nrPrimitives * 3 * 4 * (settings.quantizeVertices ? 2 : 4); // vertices\r\n\t\testimatedNonReusedByteSize += reusedVerticesFactor * nrPrimitives * 3 * 4 * (settings.quantizeNormals ? 1 : 4); // normals\r\n\t\t\r\n\t\treturn estimatedNonReusedByteSize;\r\n\t}\r\n\t\r\n\tstatic bytesToTriangles(settings, bytes) {\r\n\t\tvar reusedVerticesFactor = 0.8;\r\n\t\tvar triangles = 0;\r\n\t\tif (!settings.useObjectColors) {\r\n\t\t\ttriangles += bytes / 12;\r\n\t\t}\r\n\t\ttriangles += bytes / (3 * (settings.useSmallIndicesIfPossible ? 2 : 4)); // indices\r\n\t\ttriangles += bytes / (reusedVerticesFactor * 3 * 4 * (settings.quantizeVertices ? 2 : 4)); // vertices\r\n\t\ttriangles += bytes / (reusedVerticesFactor * 3 * 4 * (settings.quantizeNormals ? 1 : 4)); // normals\r\n\t\t\r\n\t\treturn triangles;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/bufferhelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "class",
    "name": "BufferHelper",
    "memberof": "viewer/bufferhelper.js",
    "static": true,
    "longname": "viewer/bufferhelper.js~BufferHelper",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/bufferhelper.js",
    "importStyle": "{BufferHelper}",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "trianglesToBytes",
    "memberof": "viewer/bufferhelper.js~BufferHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/bufferhelper.js~BufferHelper.trianglesToBytes",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "settings",
        "types": [
          "*"
        ]
      },
      {
        "name": "nrPrimitives",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "bytesToTriangles",
    "memberof": "viewer/bufferhelper.js~BufferHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/bufferhelper.js~BufferHelper.bytesToTriangles",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "settings",
        "types": [
          "*"
        ]
      },
      {
        "name": "bytes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "viewer/buffermanager.js",
    "content": "import {BufferSet} from './bufferset.js';\r\n\r\n/**\r\n * BufferManager keeps track of (CPU side) buffers, these buffers are eventually flushed to the GPU.\r\n * \r\n * This class should be considered abstract. It contains all code that is shared by the implementations:\r\n * \t- BufferManagerPerColor (keeps a buffer alive per unique color)\r\n *  - BufferManagerTransparencyOnly (keeps two buffers alive, one for opaque objects and one for transparent)\r\n *  \r\n *  Because of allocation costs, buffers are reused. Flushed buffers will reset their indices (resetBuffer), subsequently overwriting old data.\r\n */\r\nexport class BufferManager {\r\n\tconstructor(viewer, settings, renderer, bufferSetPool) {\r\n\t\tthis.viewer = viewer;\r\n\t\tthis.settings = settings;\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.bufferSetPool = bufferSetPool;\r\n\t\t\r\n\t\t/*\r\n\t\t * Speed/size tradeoff. Allocating huge buffers here means less calls to the GPU to flush, but especially when using the BufferManagerPerColor, \r\n\t\t * models with a lot of unique colors could potentially create a lot of buffers, each of MAX_BUFFER_SIZE. Smaller buffers also results in more updates \r\n\t\t * to the screen (good for progress indication)\r\n\t\t */\r\n\t\tthis.MAX_BUFFER_SIZE = 900000; // In number of vertex numbers, must be a multiple of 9\r\n\r\n\t\t// An average factor, amount of index numbers per vertex number\r\n\t\tthis.indicesVerticesFactor = 0.5;\r\n\t\t\r\n\t\t// An average factor, amount of color numbers per vertex number\r\n\t\tthis.colorBufferFactor = 1.33;\r\n\t\t\r\n\t\t// Map of buffers\r\n\t\tthis.bufferSets = new Map();\r\n\t\t\r\n\t\tthis.defaultSizes = {\r\n\t\t\tvertices: this.MAX_BUFFER_SIZE,\r\n\t\t\tnormals: this.MAX_BUFFER_SIZE,\r\n\t\t\tindices: this.MAX_BUFFER_SIZE * this.indicesVerticesFactor,\r\n\t\t\tcolors: this.MAX_BUFFER_SIZE * this.colorBufferFactor,\r\n\t\t\tpickColors: this.MAX_BUFFER_SIZE * this.colorBufferFactor\r\n\t\t};\r\n\t}\r\n\r\n\t/*\r\n\t * Determines whether flushing is necessary, there are two reasons for flushing:\r\n\t * - The given sizes are not going to fit in the buffer\r\n\t * - The given sizes do not fit in a default buffer, in this case an exclusive buffer is given\r\n\t */\r\n\tshouldFlush(sizes, buffer) {\r\n\t\tvar result = \r\n\t\t\t(sizes.vertices + (buffer != null ? buffer.positionsIndex : 0) > this.MAX_BUFFER_SIZE) || \r\n\t\t\t(sizes.indices + (buffer != null ? buffer.indicesIndex : 0) > this.MAX_BUFFER_SIZE * this.indicesVerticesFactor) ||\r\n\t\t\t(sizes.pickColors + (buffer != null ? buffer.pickColorsIndex : 0) > this.MAX_BUFFER_SIZE * this.colorBufferFactor);\r\n\t\t\r\n\t\t// Not storing the results in a variable resulted in this always returning something that evaluates to false...\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\tgetDefaultByteSize() {\r\n\t\tvar result = \r\n\t\t\tthis.defaultSizes.vertices * (this.settings.quantizeVertices ? 2 : 4) +\r\n\t\t\tthis.defaultSizes.normals * (this.settings.quantizeNormals ? 1 : 4) +\r\n\t\t\tthis.defaultSizes.indices * 4;\r\n\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t/*\r\n\t * Get a buffer based on the given arguments, different implementations might not use all arguments\r\n\t */\r\n\tgetBufferSet(transparency, color, sizes) {\r\n\t\tif (this.shouldFlush(sizes, null)) {\r\n\t\t\t// The amount of geometry is more than the default buffer size, so this geometry gets its own buffer which also gets flushed right away\r\n\t\t\tvar bufferSet = this.createBufferSet(transparency, color, sizes);\r\n\t\t\t// The renderer is responsable for flushing this buffer after it's populated, this flag tells it to do so\r\n\t\t\tbufferSet.needsToFlush = true;\r\n\t\t\t// We return immediately, and do _not_ store this buffer in the map, no need to\r\n\t\t\treturn bufferSet;\r\n\t\t}\r\n\t\tvar key = this.getKey(transparency, color, sizes);\r\n\r\n\t\tvar bufferSet = this.bufferSets.get(key);\r\n\t\tif (bufferSet == null) {\r\n\t\t\t// Create a new buffer according to the defaults and store it in the buffers Map\r\n\t\t\tbufferSet = this.createBufferSetPooled(transparency, color, this.defaultSizes);\r\n\t\t\tthis.bufferSets.set(key, bufferSet);\r\n\t\t} else {\r\n\t\t\tif (this.shouldFlush(sizes, bufferSet)) {\r\n\t\t\t\t// In this case we flush the buffer right away (it's already populated with data). We then reset it and return immediately after this.\r\n\t\t\t\tthis.renderer.flushBuffer(bufferSet);\r\n\t\t\t\tthis.resetBuffer(bufferSet);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bufferSet;\r\n\t}\r\n\t\r\n\t/*\r\n\t * Default implementation to create a buffer, subclasses can add other buffers\r\n\t */\r\n\tcreateBufferSet(hasTransparency, color, sizes) {\r\n\t\treturn new BufferSet(this.viewer, this.settings, hasTransparency, color, sizes)\r\n\t}\r\n\t\r\n\tcreateBufferSetPooled(hasTransparency, color, sizes) {\r\n\t\tvar bufferSet = this.bufferSetPool.lease(this, hasTransparency, color, sizes);\r\n\t\tbufferSet.hasTransparency = hasTransparency;\r\n\t\tbufferSet.color = color;\r\n\t\treturn bufferSet;\r\n\t}\r\n\t\r\n\tclear() {\r\n\t\tfor (var bufferSet of this.bufferSets.values()) {\r\n\t\t\tthis.bufferSetPool.release(bufferSet);\r\n\t\t}\r\n\t\tthis.bufferSets = null;\r\n\t}\r\n\t\r\n\tresetBuffer(bufferSet) {\r\n\t\tif (bufferSet.reset) {\r\n\t\t\tbufferSet.reset();\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetAllBuffers() {\r\n\t\treturn this.bufferSets.values();\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/buffermanager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "BufferManager",
    "memberof": "viewer/buffermanager.js",
    "static": true,
    "longname": "viewer/buffermanager.js~BufferManager",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/buffermanager.js",
    "importStyle": "{BufferManager}",
    "description": "BufferManager keeps track of (CPU side) buffers, these buffers are eventually flushed to the GPU.\n\nThis class should be considered abstract. It contains all code that is shared by the implementations:\n\t- BufferManagerPerColor (keeps a buffer alive per unique color)\n - BufferManagerTransparencyOnly (keeps two buffers alive, one for opaque objects and one for transparent)\n \n Because of allocation costs, buffers are reused. Flushed buffers will reset their indices (resetBuffer), subsequently overwriting old data.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#settings",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "renderer",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#renderer",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "bufferSetPool",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#bufferSetPool",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "MAX_BUFFER_SIZE",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#MAX_BUFFER_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "indicesVerticesFactor",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#indicesVerticesFactor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "colorBufferFactor",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#colorBufferFactor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "bufferSets",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#bufferSets",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "defaultSizes",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#defaultSizes",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "{\"vertices\": *, \"normals\": *, \"indices\": *, \"colors\": *, \"pickColors\": *}"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "shouldFlush",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#shouldFlush",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      },
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "getDefaultByteSize",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#getDefaultByteSize",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "getBufferSet",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#getBufferSet",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "transparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "createBufferSet",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#createBufferSet",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "createBufferSetPooled",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#createBufferSetPooled",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "clear",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#clear",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "resetBuffer",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#resetBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "bufferSet",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "getAllBuffers",
    "memberof": "viewer/buffermanager.js~BufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanager.js~BufferManager#getAllBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "viewer/buffermanagerpercolor.js",
    "content": "import {BufferManager} from './buffermanager.js'\r\n\r\n/**\r\n * Buffer manager that keeps track of one buffer per color. This buffer is used when useObjectColor is on.\r\n */\r\nexport class BufferManagerPerColor extends BufferManager {\r\n\tconstructor(viewer, settings, renderer, bufferSetPool) {\r\n\t\tsuper(viewer, settings, renderer, bufferSetPool);\r\n\t}\r\n\r\n\t/*\r\n\t * The key here is a hash of the color\r\n\t * TODO: JSON.stringify is a bit slow for this, need to look for a consistent hashing algo for 4 floats... \r\n\t */\r\n\tgetKey(transparency, color, sizes) {\r\n//\t\treturn color.r + color.g + color.b + color.a;\r\n\t\treturn JSON.stringify(color);\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/buffermanagerpercolor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "class",
    "name": "BufferManagerPerColor",
    "memberof": "viewer/buffermanagerpercolor.js",
    "static": true,
    "longname": "viewer/buffermanagerpercolor.js~BufferManagerPerColor",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/buffermanagerpercolor.js",
    "importStyle": "{BufferManagerPerColor}",
    "description": "Buffer manager that keeps track of one buffer per color. This buffer is used when useObjectColor is on.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "viewer/buffermanager.js~BufferManager"
    ]
  },
  {
    "__docId__": 148,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/buffermanagerpercolor.js~BufferManagerPerColor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanagerpercolor.js~BufferManagerPerColor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "getKey",
    "memberof": "viewer/buffermanagerpercolor.js~BufferManagerPerColor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanagerpercolor.js~BufferManagerPerColor#getKey",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "transparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "viewer/buffermanagertransparencyonly.js",
    "content": "import {BufferManager} from './buffermanager.js'\r\n\r\n/**\r\n * A buffer manager that keeps track of only 2 buffers, one opaque and one with transparent data.\r\n * The buffers in this class use an additional buffer to store vertex-colors.\r\n */\r\nexport class BufferManagerTransparencyOnly extends BufferManager {\r\n\tconstructor(viewer, settings, renderer, bufferSetPool) {\r\n\t\tsuper(viewer, settings, renderer, bufferSetPool);\r\n\t}\r\n\r\n\t/*\r\n\t * This implementation uses only the transparency for the key, since transparency is a boolean, there are only two slots.\r\n\t */\r\n\tgetKey(transparency, color, sizes) {\r\n\t\treturn transparency;\r\n\t}\r\n\t\r\n\tshouldFlush(sizes, buffer) {\r\n\t\tif (super.shouldFlush(sizes, buffer)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn sizes.colors + (buffer != null ? buffer.colorsIndex : 0) > this.MAX_BUFFER_SIZE * this.colorBufferFactor;\r\n\t}\r\n\t\r\n\tgetDefaultByteSize() {\r\n\t\treturn super.getDefaultByteSize() + this.defaultSizes.colors * (this.settings.quantizeColors ? 1 : 4);\r\n\t}\r\n\t\r\n\t/* \r\n\t * In addition to a default buffer, also add a color buffer\r\n\t */\r\n\tcreateBufferSet(transparency, color, sizes) {\r\n\t\tvar buffer = super.createBufferSet(transparency, color, sizes);\r\n\t\tbuffer.colors = this.settings.quantizeColors ? new Uint8Array(sizes.colors) : new Float32Array(sizes.colors);\r\n\t\tbuffer.colorsIndex = 0;\r\n\t\treturn buffer;\r\n\t}\r\n\t\r\n\t/*\r\n\t * Additionally reset the color buffer\r\n\t */\r\n\tresetBuffer(buffer) {\r\n\t\tsuper.resetBuffer(buffer);\r\n\t\tbuffer.colorsIndex = 0;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/buffermanagertransparencyonly.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "BufferManagerTransparencyOnly",
    "memberof": "viewer/buffermanagertransparencyonly.js",
    "static": true,
    "longname": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/buffermanagertransparencyonly.js",
    "importStyle": "{BufferManagerTransparencyOnly}",
    "description": "A buffer manager that keeps track of only 2 buffers, one opaque and one with transparent data.\nThe buffers in this class use an additional buffer to store vertex-colors.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "viewer/buffermanager.js~BufferManager"
    ]
  },
  {
    "__docId__": 152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "getKey",
    "memberof": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly#getKey",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "transparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "shouldFlush",
    "memberof": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly#shouldFlush",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      },
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "getDefaultByteSize",
    "memberof": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly#getDefaultByteSize",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "createBufferSet",
    "memberof": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly#createBufferSet",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "transparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "resetBuffer",
    "memberof": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffermanagertransparencyonly.js~BufferManagerTransparencyOnly#resetBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "viewer/bufferset.js",
    "content": "import {AbstractBufferSet} from \"./abstractbufferset.js\";\n\n/**\n * @ignore\n */\nexport class BufferSet extends AbstractBufferSet {\n    \n    constructor(viewer, settings, hasTransparency, color, sizes) {\n\t\tsuper(viewer);\n\n        this.settings = settings;\n        this.positions = settings.quantizeVertices ? new Int16Array(sizes.vertices) : new Float32Array(sizes.vertices);\n        this.positionsIndex = 0;\n        this.normals = settings.quantizeNormals ? new Int8Array(sizes.normals) : new Float32Array(sizes.normals);\n        this.normalsIndex = 0;\n        this.pickColors = new Uint8Array(sizes.pickColors * 4);\n        this.pickColorsIndex = 0;\n        this.indices = new Uint32Array(sizes.indices), // The optimal buffer size is most definitely above the Uint16 threshold, so always use Uint32Array\n        this.indicesIndex = 0;\n        this.nrIndices = 0;\n        this.hasTransparency = hasTransparency;\n        this.color = color;\n        this.bytes = 0;\n    };\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/bufferset.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "class",
    "name": "BufferSet",
    "memberof": "viewer/bufferset.js",
    "static": true,
    "longname": "viewer/bufferset.js~BufferSet",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/bufferset.js",
    "importStyle": "{BufferSet}",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "interface": false,
    "extends": [
      "viewer/abstractbufferset.js~AbstractBufferSet"
    ]
  },
  {
    "__docId__": 160,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/bufferset.js~BufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#settings",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "positions",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#positions",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "positionsIndex",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#positionsIndex",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "normals",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#normals",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "normalsIndex",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#normalsIndex",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "pickColors",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#pickColors",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "pickColorsIndex",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#pickColorsIndex",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "nrIndices",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#nrIndices",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "hasTransparency",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#hasTransparency",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "color",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#color",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "bytes",
    "memberof": "viewer/bufferset.js~BufferSet",
    "static": false,
    "longname": "viewer/bufferset.js~BufferSet#bytes",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "viewer/buffersetpool.js",
    "content": "/**\r\n * Keeps track of a collections of buffersets that can be reused. The main reason is that we don't have to allocate new memory for each new bufferset\r\n */\r\nexport class BufferSetPool {\r\n\tconstructor(maxPoolSize, stats) {\r\n\t\tthis.maxPoolSize = maxPoolSize;\r\n\t\tthis.stats = stats;\r\n\t\t\r\n\t\tthis.currentPoolSize = 0;\r\n\t\t\r\n\t\tthis.available = new Set();\r\n\t\tthis.used = new Set();\r\n\t\t\r\n\t\twindow.buffersetpool = this;\r\n\t}\r\n\t\r\n\tlease(bufferManager, hasTransparency, color, sizes) {\r\n\t\tif (this.currentPoolSize >= this.maxPoolSize) {\r\n\t\t\tthrow \"Maximum pool size exceeded\";\r\n\t\t}\r\n\t\t\r\n\t\tif (this.available.size > 0) {\r\n\t\t\tvar bufferSet = this.available.keys().next().value;\r\n\t\t\tthis.used.add(bufferSet);\r\n\t\t\tthis.available.delete(bufferSet);\r\n\t\t\tthis.stats.setParameter(\"BufferSet pool\", \"Used\", this.used.size);\r\n\t\t\tthis.stats.setParameter(\"BufferSet pool\", \"Available\", this.available.size);\r\n\t\t\tthis.stats.setParameter(\"BufferSet pool\", \"Total memory\", this.currentPoolSize * bufferManager.getDefaultByteSize());\r\n\t\t\t\r\n\t\t\treturn bufferSet;\r\n\t\t}\r\n\t\tvar newBufferSet = bufferManager.createBufferSet(hasTransparency, color, sizes);\r\n\t\tthis.currentPoolSize++;\r\n\t\tthis.used.add(newBufferSet);\r\n\t\tthis.stats.setParameter(\"BufferSet pool\", \"Used\", this.used.size);\r\n\t\tthis.stats.setParameter(\"BufferSet pool\", \"Available\", this.available.size);\r\n\t\tthis.stats.setParameter(\"BufferSet pool\", \"Total memory\", this.currentPoolSize * bufferManager.getDefaultByteSize());\r\n\t\treturn newBufferSet;\r\n\t}\r\n\t\r\n\trelease(bufferSet) {\r\n\t\tthis.used.delete(bufferSet);\r\n\t\tthis.available.add(bufferSet);\r\n\t\t\r\n\t\tthis.stats.setParameter(\"BufferSet pool\", \"Used\", this.used.size);\r\n\t\tthis.stats.setParameter(\"BufferSet pool\", \"Available\", this.available.size);\r\n\t\t\r\n\t\tbufferSet.positionsIndex = 0;\r\n\t\tbufferSet.normalsIndex = 0;\r\n\t\tbufferSet.indicesIndex = 0;\r\n\t\tbufferSet.nrIndices = 0;\r\n\t\tbufferSet.colorsIndex = 0;\r\n\t}\r\n\t\r\n\tcleanup() {\r\n\t\tthis.available.clear();\r\n\t\tthis.used.clear();\r\n\t\tthis.currentPoolSize = 0;\r\n\t\tthis.stats.setParameter(\"BufferSet pool\", \"Used\", this.used.size);\r\n\t\tthis.stats.setParameter(\"BufferSet pool\", \"Available\", this.available.size);\r\n\t\tthis.stats.setParameter(\"BufferSet pool\", \"Total memory\", 0);\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/buffersetpool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "BufferSetPool",
    "memberof": "viewer/buffersetpool.js",
    "static": true,
    "longname": "viewer/buffersetpool.js~BufferSetPool",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/buffersetpool.js",
    "importStyle": "{BufferSetPool}",
    "description": "Keeps track of a collections of buffersets that can be reused. The main reason is that we don't have to allocate new memory for each new bufferset",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/buffersetpool.js~BufferSetPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffersetpool.js~BufferSetPool#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "maxPoolSize",
    "memberof": "viewer/buffersetpool.js~BufferSetPool",
    "static": false,
    "longname": "viewer/buffersetpool.js~BufferSetPool#maxPoolSize",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "stats",
    "memberof": "viewer/buffersetpool.js~BufferSetPool",
    "static": false,
    "longname": "viewer/buffersetpool.js~BufferSetPool#stats",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "currentPoolSize",
    "memberof": "viewer/buffersetpool.js~BufferSetPool",
    "static": false,
    "longname": "viewer/buffersetpool.js~BufferSetPool#currentPoolSize",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "available",
    "memberof": "viewer/buffersetpool.js~BufferSetPool",
    "static": false,
    "longname": "viewer/buffersetpool.js~BufferSetPool#available",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "used",
    "memberof": "viewer/buffersetpool.js~BufferSetPool",
    "static": false,
    "longname": "viewer/buffersetpool.js~BufferSetPool#used",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "lease",
    "memberof": "viewer/buffersetpool.js~BufferSetPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffersetpool.js~BufferSetPool#lease",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "bufferManager",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "release",
    "memberof": "viewer/buffersetpool.js~BufferSetPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffersetpool.js~BufferSetPool#release",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "bufferSet",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "cleanup",
    "memberof": "viewer/buffersetpool.js~BufferSetPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffersetpool.js~BufferSetPool#cleanup",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "viewer/buffertransformer.js",
    "content": "/**\r\n * This class transforms buffers. The main purpose is to fix discrepancies between the over-the-line format and the glsl format. In ideal situations no conversions are needed.\r\n * At the moment these methods are only used when data is reused. The idea is that all transformations will happen in this class, making for more readable renderers\r\n */\r\nexport class BufferTransformer {\r\n\tconstructor(settings, vertexQuantization) {\r\n\t\tthis.settings = settings;\r\n\t\tthis.vertexQuantization = vertexQuantization;\r\n\t}\r\n\r\n\tconvertVertices(croid, vertices) {\r\n\t\tif (this.settings.quantizeVertices == this.settings.loaderSettings.quantizeVertices) {\r\n\t\t\treturn vertices;\r\n\t\t}\r\n\r\n\t\tvar vertex = Array(3);\r\n\t\tvar newPositions;\r\n\t\tif (this.settings.quantizeVertices) {\r\n\t\t\tnewPositions = new Int16Array(vertices.length);\r\n\t\t} else {\r\n\t\t\tnewPositions = new Float32Array(vertices.length);\r\n\t\t}\r\n\t\tfor (var i=0; i<vertices.length; i+=3) {\r\n\t\t\t// When quantizeVertices is on and we use the buffers in a combined buffer (which is what this method, addGeometry does),\r\n\t\t\t// we need to un-quantize the vertices, transform them, then quantize them again (so the shaders can again unquantize them).\r\n\t\t\t// This because order does matter (object transformation sometimes even mirror stuff)\r\n\t\t\t// Obviously quantization slows down both CPU (only initially) and GPU (all the time)\r\n\t\t\tvertex[0] = vertices[i + 0];\r\n\t\t\tvertex[1] = vertices[i + 1];\r\n\t\t\tvertex[2] = vertices[i + 2];\r\n\t\t\t\r\n//\t\t\tif (this.settings.loaderSettings.quantizeVertices) {\r\n//\t\t\t\tvec3.transformMat4(vertex, vertex, this.vertexQuantization.getUntransformedInverseVertexQuantizationMatrixForCroid(croid));\r\n//\t\t\t}\r\n\t\t\t// TODO something is wrong here\r\n//\t\t\tif (this.settings.quantizeVertices) {\r\n//\t\t\t\tvec3.transformMat4(vertex, vertex, this.vertexQuantization.getUntransformedVertexQuantizationMatrix());\r\n//\t\t\t}\r\n\t\t\t\r\n\t\t\tnewPositions.set(vertex, i);\r\n\t\t}\r\n\t\treturn newPositions;\r\n\t}\r\n\t\r\n\tconvertNormals(normals) {\r\n\t\t// When the given normals variable is already in the right format according to the settings, just return that\r\n\t\tif ((this.settings.quantizeNormals && normals instanceof Int8Array) || (!this.settings.quantizeNormals && normals instanceof Float32Array)) {\r\n\t\t\treturn normals;\r\n\t\t}\r\n\t\tvar newNormals;\r\n\t\tif (this.settings.quantizeNormals) {\r\n\t\t\tnewNormals = new Int8Array(normals.length);\r\n\t\t} else {\r\n\t\t\tnewNormals = new Float32Array(normals.length);\r\n\t\t}\r\n\t\tvar normal = Array(3);\r\n\t\tfor (var i=0; i<normals.length; i+=3) {\r\n\t\t\tnormal[0] = normals[i + 0];\r\n\t\t\tnormal[1] = normals[i + 1];\r\n\t\t\tnormal[2] = normals[i + 2];\r\n\t\t\t\r\n\t\t\t// Because of the early return on the top of this method, only 2 out of 4 combinations are possible, allowing for this if/else\r\n\t\t\tif (this.settings.quantizeNormals) {\r\n\t\t\t\tnormal[0] = normal[0] * 127;\r\n\t\t\t\tnormal[1] = normal[1] * 127;\r\n\t\t\t\tnormal[2] = normal[2] * 127;\r\n\t\t\t} else {\r\n\t\t\t\tnormal[0] = normal[0] / 127;\r\n\t\t\t\tnormal[1] = normal[1] / 127;\r\n\t\t\t\tnormal[2] = normal[2] / 127;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnewNormals.set(normal, i);\r\n\t\t}\r\n\t\treturn newNormals;\r\n\t}\r\n\t\r\n\tconvertIndices(indices, nrOfVertices) {\r\n\t\tif (this.settings.useSmallIndicesIfPossible && nrOfVertices < 65536) {\r\n\t\t\t// TODO at the moment, indices are never sent in unsigned 16 format\r\n\t\t\tif (indices instanceof Uint16Array) {\r\n\t\t\t\treturn indices;\r\n\t\t\t}\r\n\t\t\treturn new Uint16Array(indices);\r\n\t\t} else {\r\n\t\t\tif (indices instanceof Uint32Array) {\r\n\t\t\t\treturn indices;\r\n\t\t\t}\r\n\t\t\treturn new Uint32Array(indices);\r\n\t\t}\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/buffertransformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "BufferTransformer",
    "memberof": "viewer/buffertransformer.js",
    "static": true,
    "longname": "viewer/buffertransformer.js~BufferTransformer",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/buffertransformer.js",
    "importStyle": "{BufferTransformer}",
    "description": "This class transforms buffers. The main purpose is to fix discrepancies between the over-the-line format and the glsl format. In ideal situations no conversions are needed.\nAt the moment these methods are only used when data is reused. The idea is that all transformations will happen in this class, making for more readable renderers",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 186,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/buffertransformer.js~BufferTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffertransformer.js~BufferTransformer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/buffertransformer.js~BufferTransformer",
    "static": false,
    "longname": "viewer/buffertransformer.js~BufferTransformer#settings",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "vertexQuantization",
    "memberof": "viewer/buffertransformer.js~BufferTransformer",
    "static": false,
    "longname": "viewer/buffertransformer.js~BufferTransformer#vertexQuantization",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "convertVertices",
    "memberof": "viewer/buffertransformer.js~BufferTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffertransformer.js~BufferTransformer#convertVertices",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "croid",
        "types": [
          "*"
        ]
      },
      {
        "name": "vertices",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "convertNormals",
    "memberof": "viewer/buffertransformer.js~BufferTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffertransformer.js~BufferTransformer#convertNormals",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "normals",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "convertIndices",
    "memberof": "viewer/buffertransformer.js~BufferTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/buffertransformer.js~BufferTransformer#convertIndices",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "indices",
        "types": [
          "*"
        ]
      },
      {
        "name": "nrOfVertices",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "file",
    "name": "viewer/camera.js",
    "content": "import {Perspective} from './perspective.js'\nimport {Orthographic} from './orthographic.js'\n\nvar tempMat4 = mat4.create();\nvar tempMat4b = mat4.create();\nvar tempVec3 = vec3.create();\nvar tempVec3b = vec3.create();\nvar tempVec3c = vec3.create();\nvar tempVec3d = vec3.create();\nvar tempVec3e = vec3.create();\n\nvar tmp_modelBounds = vec3.create();\n\n/**\n A **Camera** defines viewing and projection transforms for its Viewer.\n */\nexport class Camera {\n\n    constructor(viewer) {\n\n        this.viewer = viewer;\n\n        this.perspective = new Perspective(viewer);\n\n        this.orthographic = new Orthographic(viewer);\n\n        this._projection = this.perspective; // Currently active projection\n        this._viewMatrix = mat4.create();\n        this._viewProjMatrix = mat4.create();\n        this._viewMatrixInverted = mat4.create();\n        this._viewProjMatrixInverted = mat4.create();\n\n        this._viewNormalMatrix = mat3.create();\n\n        this._eye = vec3.fromValues(0.0, 0.0, -10.0); // World-space eye position\n        this._target = vec3.fromValues(0.0, 0.0, 0.0); // World-space point-of-interest\n        this._up = vec3.fromValues(0.0, 1.0, 0.0); // Camera's \"up\" vector, always orthogonal to eye->target\n        this._center = vec3.copy(vec3.create(), this._target);\n\n        this._worldAxis = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n        this._worldUp = vec3.fromValues(0.0, 1.0, 0.0); // Direction of \"up\" in World-space\n        this._worldRight = vec3.fromValues(1, 0, 0); // Direction of \"right\" in World-space\n        this._worldForward = vec3.fromValues(0, 0, -1); // Direction of \"forward\" in World-space\n\n        this._gimbalLock = true; // When true, orbiting world-space \"up\", else orbiting camera's local \"up\"\n        this._constrainPitch = true; // When true, will prevent camera} from being rotated upside-down\n\n        this._dirty = true; // Lazy-builds view matrix\n        this._locked = false;\n\n        this._modelBounds = null;\n\n        // Until there is a proper event handler mechanism, just do it manually.\n        this.listeners = [];\n    }\n\n    lock() {\n        this._locked = true;\n    }\n\n    unlock() {\n        this._locked = false;\n        this._build();\n    }\n\n    _setDirty() {\n        this._dirty = true;\n        this.viewer.dirty = true;\n    }\n\n    setModelBounds(bounds) {\n        this._modelBounds = [];\n\n        // Store aabb calculated} from points\n        let a = vec3.fromValues(+Infinity, +Infinity, +Infinity);\n        let b = vec3.fromValues(-Infinity, -Infinity, -Infinity);\n\n        let zero_one = [0,1];\n\n        for (let i of zero_one) {\n            for (let j of zero_one) {\n                for (let k of zero_one) {\n                    let v = vec3.fromValues(bounds[3*i+0], bounds[3*j+1], bounds[3*k+2]);\n                    this._modelBounds.push(v);\n\n                    for (let l = 0; l < 3; ++l) {\n                        if (v[l] < a[l]) {\n                            a[l] = v[l];\n                        }\n                        if (v[l] > b[l]) {\n                            b[l] = v[l];\n                        }\n                    }\n                }\n            }   \n        }\n\n        vec3.add(a, a, b);\n        vec3.scale(a, a, 0.5);\n\n        this._center.set(a);\n    }\n\n    _build() {\n        if (this._dirty && !this._locked && this._modelBounds) {\n            vec3.set(this._up, 0,0,1);\n            var d = vec3.subtract(vec3.create(), this._target, this._eye);\n            vec3.normalize(d, d);\n            vec3.cross(this._up, d, this._up);\n            vec3.cross(this._up, this._up, d);\n\n            mat4.lookAt(this._viewMatrix, this._eye, this._target, this._up);\n            mat4.identity(tempMat4);\n            mat4.multiply(this._viewMatrix, tempMat4, this._viewMatrix);\n            mat3.fromMat4(tempMat4b, this._viewMatrix);\n            mat3.invert(tempMat4b, tempMat4b);\n            mat3.transpose(this._viewNormalMatrix, tempMat4b);\n            \n            let [near, far] = [+Infinity, -Infinity];\n\n            this._modelBounds.forEach((v) => {\n                vec3.transformMat4(tmp_modelBounds, v, this._viewMatrix);\n                let z = -tmp_modelBounds[2];\n                if (z < near) {\n                    near = z;\n                }\n                if (z > far) {\n                    far = z;\n                }\n            });\n\n            if (near < 1.e-3) {\n                near = far / 1000.;\n            }\n\n            this.perspective.near = near;\n            this.perspective.far = far;\n\n            mat4.invert(this._viewMatrixInverted, this._viewMatrix);\n            mat4.multiply(this._viewProjMatrix, this.projMatrix, this._viewMatrix);\n            mat4.invert(this._viewProjMatrixInverted, this._viewProjMatrix);\n\n            this._dirty = false;\n\n            this.listeners.forEach((fn) => { fn(); });\n        }\n    }\n\n    /**\n     Gets the current viewing transform matrix.\n\n     @return {Float32Array} 4x4 column-order matrix as an array of 16 contiguous floats.\n     */\n    get viewMatrix() {\n        if (this._dirty) {\n            this._build();\n        }\n        return this._viewMatrix;\n    }\n\n    /**\n     Gets the current view projection matrix.\n\n     @return {Float32Array} 4x4 column-order matrix as an array of 16 contiguous floats.\n     */\n    get viewProjMatrix() {\n        if (this._dirty) {\n            this._build();\n        }\n        return this._viewProjMatrix;\n    }\n\n    /**\n     Gets the current inverted view projection matrix.\n\n     @return {Float32Array} 4x4 column-order matrix as an array of 16 contiguous floats.\n     */\n    get viewProjMatrixInverted() {\n        if (this._dirty) {\n            this._build();\n        }\n        return this._viewProjMatrixInverted;\n    }\n\n    get viewMatrixInverted() {\n        if (this._dirty) {\n            this._build();\n        }\n        return this._viewMatrixInverted;\n    }\n\n    /**\n     Gets the current viewing transform matrix for normals.\n\n     This is the transposed inverse of the view matrix.\n\n     @return {Float32Array} 4x4 column-order matrix as an array of 16 contiguous floats.\n     */\n    get viewNormalMatrix() {\n        if (this._dirty) {\n            this._build();\n        }\n        return this._viewNormalMatrix;\n    }\n\n    /**\n     Gets the current projection transform matrix.\n\n     @return {Float32Array} 4x4 column-order matrix as an array of 16 contiguous floats.\n     */\n    get projMatrix() {\n        return this._projection.projMatrix;\n    }\n\n    /**\n     Selects the current projection type.\n\n     @param {String} projectionType Accepted values are \"persp\" or \"ortho\".\n     */\n    set projectionType(projectionType) {\n        if (projectionType.toLowerCase().startsWith(\"persp\")) {\n            this._projection = this.perspective;\n        } else if (projectionType.toLowerCase().startsWith(\"ortho\")) {\n            this._projection = this.orthographic;\n        } else {\n            console.error(\"Unsupported projectionType: \" + projectionType);\n        }\n    }\n\n    /**\n     Gets the current projection type.\n\n     @return {String} projectionType \"persp\" or \"ortho\".\n     */\n    get projectionType() {\n        return this._projection.constructor.name.substr(0,5).toLowerCase();\n    }\n\n    /**\n     Gets the component that represents the current projection type.\n\n     @return {Perspective|Orthographic}\n     */\n    get projection() {\n        return this._projection;\n    }\n\n    /**\n     Sets the position of the camera.\n     @param {Float32Array} eye 3D position of the camera in World space.\n     */\n    set eye(eye) {\n        this._eye.set(eye || [0.0, 0.0, -10.0]);\n        this._setDirty();\n    }\n\n    /**\n     Gets the position of the camera.\n     @return {Float32Array} 3D position of the camera in World space.\n     */\n    get eye() {\n        return this._eye;\n    }\n\n    /**\n     Sets the point the camera is looking at.\n     @param {Float32Array} target 3D position of the point of interest in World space.\n     */\n    set target(target) {\n        this._target.set(target || [0.0, 0.0, 0.0]);\n        this._setDirty();\n    }\n\n    /**\n     Gets the point tha camera is looking at.\n     @return {Float32Array} 3D position of the point of interest in World space.\n     */\n    get target() {\n        return this._target;\n    }\n\n    set center(v) {\n        this._center.set(v);\n        this.listeners.forEach((fn) => { fn(); });\n    }\n\n    get center() {\n        return this._center;\n    }\n\n    /**\n     Sets the camera's \"up\" direction.\n     @param {Float32Array} up 3D vector indicating the camera's \"up\" direction in World-space.\n     */\n    set up(up) {\n        this._up.set(up || [0.0, 1.0, 0.0]);\n        this._setDirty();\n    }\n\n    /**\n     Gets the camera's \"up\" direction.\n     @return {Float32Array} 3D vector indicating the camera's \"up\" direction in World-space.\n     */\n    get up() {\n        return this._up;\n    }\n\n    /**\n     Sets whether camera rotation is gimbal locked.\n\n     When true, yaw rotation will always pivot about the World-space \"up\" axis.\n\n     @param {Boolean} gimbalLock Whether or not to enable gimbal locking.\n     */\n    set gimbalLock(gimbalLock) {\n        this._gimbalLock = gimbalLock;\n    }\n\n    /**\n     Sets whether camera rotation is gimbal locked.\n\n     When true, yaw rotation will always pivot about the World-space \"up\" axis.\n\n     @return {Boolean} True if gimbal locking is enabled.\n     */\n    get gimbalLock() {\n        return this._gimbalLock;\n    }\n\n    /**\n     Sets whether its currently possible to pitch the camera to look at the model upside-down.\n\n     When this is true, camera will ignore attempts to orbit (camera or model) about the horizontal axis\n     that would result in the model being viewed upside-down.\n\n     @param {Boolean} constrainPitch Whether or not to activate the constraint.\n     */\n    set constrainPitch(constrainPitch) {\n        this._constrainPitch = constrainPitch;\n    }\n\n    /**\n     Gets whether its currently possible to pitch the camera to look at the model upside-down.\n\n     @return {Boolean}\n     */\n    get constrainPitch() {\n        return this._constrainPitch;\n    }\n\n    /**\n     Indicates the up, right and forward axis of the World coordinate system.\n\n     This is used for deriving rotation axis for yaw orbiting, and for moving camera to axis-aligned positions.\n\n     Has format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````\n\n     @type {Float32Array}\n     */\n    set worldAxis(worldAxis) {\n        this._worldAxis.set(worldAxis || [1, 0, 0, 0, 1, 0, 0, 0, 1]);\n        this._worldRight[0] = this._worldAxis[0];\n        this._worldRight[1] = this._worldAxis[1];\n        this._worldRight[2] = this._worldAxis[2];\n        this._worldUp[0] = this._worldAxis[3];\n        this._worldUp[1] = this._worldAxis[4];\n        this._worldUp[2] = this._worldAxis[5];\n        this._worldForward[0] = this._worldAxis[6];\n        this._worldForward[1] = this._worldAxis[7];\n        this._worldForward[2] = this._worldAxis[8];\n        this._setDirty();\n    }\n\n    /**\n     Indicates the up, right and forward axis of the World coordinate system.\n\n     This is used for deriving rotation axis for yaw orbiting, and for moving camera to axis-aligned positions.\n\n     Has format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````\n\n     @type {Float32Array}\n     */\n    get worldAxis() {\n        return this._worldAxis;\n    }\n\n    /**\n     Direction of World-space \"up\".\n\n     @type Float32Array\n     */\n    get worldUp() {\n        return this._worldUp;\n    }\n\n    /**\n     Direction of World-space \"right\".\n\n     @type Float32Array\n     */\n    get worldRight() {\n        return this._worldRight;\n    }\n\n    /**\n     Direction of World-space \"forwards\".\n\n     @type Float32Array\n     */\n    get worldForward() {\n        return this._worldForward;\n    }\n\n    /**\n     Rotates the eye position about the target position, pivoting around the up vector.\n\n     @param {Number} degrees Angle of rotation in degrees\n     */\n    orbitYaw(degrees) {\n        \n        // @todo, these functions are not efficient nor numerically stable, but simple to understand.\n        \n        var T1 = mat4.fromTranslation(mat4.create(), this._center);\n        var R = mat4.fromRotation(mat4.create(), degrees * 0.0174532925 * 2, this._worldUp);\n        var T2 = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), this._center));\n\n        vec3.transformMat4(this._eye, this._eye, T2);\n        vec3.transformMat4(this._eye, this._eye, R);\n        vec3.transformMat4(this._eye, this._eye, T1);\n\n        vec3.transformMat4(this._target, this._target, T2);\n        vec3.transformMat4(this._target, this._target, R);\n        vec3.transformMat4(this._target, this._target, T1);\n\n        this._setDirty();\n        return;\n    }\n\n    /**\n     Rotates the eye position about the target position, pivoting around the right axis (orthogonal to up vector and eye->target vector).\n\n     @param {Number} degrees Angle of rotation in degrees\n     */\n    orbitPitch(degrees) { // Rotate (pitch) 'eye' and 'up' about 'target', pivoting around vector ortho to (target->eye) and camera 'up'\n        let currentPitch = Math.acos(this._viewMatrix[10]);\n        let adjustment = - degrees * 0.0174532925 * 2;\n        if (currentPitch + adjustment < 0.01) {\n            adjustment = 0.01 - currentPitch;\n        }\n        if (currentPitch + adjustment > Math.PI - 0.01) {\n            adjustment = Math.PI - 0.01 - currentPitch;\n        }\n\n        if (Math.abs(adjustment) < 1.e-5) {\n            return;\n        }\n\n        var T1 = mat4.fromTranslation(mat4.create(), this._center);\n        var R = mat4.fromRotation(mat4.create(), adjustment, this._viewMatrixInverted);\n        var T2 = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), this._center));\n\n        vec3.transformMat4(this._eye, this._eye, T2);\n        vec3.transformMat4(this._eye, this._eye, R);\n        vec3.transformMat4(this._eye, this._eye, T1);\n\n        vec3.transformMat4(this._target, this._target, T2);\n        vec3.transformMat4(this._target, this._target, R);\n        vec3.transformMat4(this._target, this._target, T1);\n\n        this._setDirty();\n        return;\n    }\n\n    /**\n     Rotates the target position about the eye, pivoting around the up vector.\n\n     @param {Number} degrees Angle of rotation in degrees\n     */\n    yaw(degrees) { // Rotate (yaw) 'target' and 'up' about 'eye', pivoting around 'up'\n        var eyeToTarget = vec3.subtract(tempVec3, this._target, this._eye);\n        mat4.fromRotation(tempMat4, degrees * 0.0174532925, this._gimbalLock ? this._worldUp : this._up);\n        vec3.transformMat4(eyeToTarget, eyeToTarget, tempMat4); // Rotate vector\n        vec3.add(this._target, this._eye, eyeToTarget); // Derive 'target'} from eye and vector\n        if (this._gimbalLock) {\n            vec3.transformMat4(this._up, this._up, tempMat4); // Rotate 'up' vector\n        }\n        this._setDirty();\n    }\n\n    /**\n     Rotates the target position about the eye, pivoting around the right axis (orthogonal to up vector and eye->target vector).\n\n     @param {Number} degrees Angle of rotation in degrees\n     */\n    pitch(degrees) { // Rotate (pitch) 'eye' and 'up' about 'target', pivoting around horizontal vector ortho to (target->eye) and camera 'up'\n        var eyeToTarget = vec3.subtract(tempVec3, this._target, this._eye);\n        var a = vec3.normalize(tempVec3c, eyeToTarget);\n        var b = vec3.normalize(tempVec3d, this._up);\n        var axis = vec3.cross(tempVec3b, a, b); // Pivot vector is orthogonal to target->eye\n        mat4.fromRotation(tempMat4, degrees * 0.0174532925, axis);\n        vec3.transformMat4(eyeToTarget, eyeToTarget, tempMat4); // Rotate vector\n        var newUp = vec3.transformMat4(tempVec3d, this._up, tempMat4); // Rotate 'up' vector\n        if (this._constrainPitch) {\n            var angle = vec3.dot(newUp, this._worldUp) / 0.0174532925; // Don't allow 'up' to go up[side-down with respect to World 'up'\n            if (angle < 1) {\n                return;\n            }\n        }\n        this._up.set(newUp);\n        vec3.add(this._target, this._eye, eyeToTarget); // Derive 'target'} from eye and vector\n        this._setDirty();\n    }\n\n    /**\n     Pans the camera along the camera's local X, Y and Z axis.\n\n     @param {Array} pan The pan vector\n     */\n    pan(pan) { // Translate 'eye' and 'target' along local camera axis\n        var eyeToTarget = vec3.subtract(tempVec3, this._eye, this._target);\n        var vec = [0, 0, 0];\n        if (pan[0] !== 0) {\n            let a = vec3.normalize(tempVec3b, eyeToTarget); // Get  vector orthogonal to 'up' and eye->target\n            let b = vec3.normalize(tempVec3c, this._up);\n            let v = vec3.cross(tempVec3d, a, b);\n            vec3.scale(v, v, pan[0]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        if (pan[1] !== 0) {\n            let v = vec3.scale(tempVec3, vec3.normalize(tempVec3b, this._up), pan[1]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        if (pan[2] !== 0) {\n            let v = vec3.scale(tempVec3, vec3.normalize(tempVec3b, eyeToTarget), pan[2]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        vec3.add(this._eye, this._eye, vec);\n        this._target = vec3.add(this._target, this._target, vec);\n        this._setDirty();\n    }\n\n    /**\n     Moves the camera along a ray through unprojected mouse coordinates\n\n     @param {Number} delta Zoom increment\n     @param canvasPos Mouse position relative to canvas to determine ray along which to move\n     */\n    zoom(delta, canvasPos) { // Translate 'eye' by given increment on (eye->target) vector\n        // @todo: also not efficient\n\n        let [x,y] = canvasPos;\n        vec3.set(tempVec3, x / this.viewer.width * 2 - 1, - y / this.viewer.height * 2 + 1, 1.);\n        vec3.transformMat4(tempVec3, tempVec3, this.projection.projMatrixInverted);\n        vec3.transformMat4(tempVec3, tempVec3, this.viewMatrixInverted);\n        vec3.subtract(tempVec3, tempVec3, this._eye);\n        vec3.normalize(tempVec3, tempVec3);\n        vec3.scale(tempVec3, tempVec3, -delta);\n\n        vec3.add(this._eye, this._eye, tempVec3);\n        vec3.add(this._target, this._target, tempVec3);\n\n        this._setDirty();\n    }\n\n    /**\n     Jumps the camera to look at the given axis-aligned World-space bounding box.\n\n     @param {Float32Array} aabb The axis-aligned World-space bounding box (AABB).\n     @param {Number} fitFOV Field-of-view occupied by the AABB when the camera has fitted it to view.\n     */\n    viewFit(aabb, fitFOV) {\n        aabb = aabb || this.viewer.modelBounds;\n        fitFOV = fitFOV || this.perspective.fov;\n        var eyeToTarget = vec3.normalize(tempVec3b, vec3.subtract(tempVec3, this._eye, this._target));\n        var diagonal = Math.sqrt(\n            Math.pow(aabb[3] - aabb[0], 2) +\n            Math.pow(aabb[4] - aabb[1], 2) +\n            Math.pow(aabb[5] - aabb[2], 2));\n        var center = [\n            (aabb[3] + aabb[0]) / 2,\n            (aabb[4] + aabb[1]) / 2,\n            (aabb[5] + aabb[2]) / 2\n        ];\n        this._target.set(center);\n        var sca = Math.abs(diagonal / Math.tan(fitFOV * 0.0174532925));\n        this._eye[0] = this._target[0] + (eyeToTarget[0] * sca);\n        this._eye[1] = this._target[1] + (eyeToTarget[1] * sca);\n        this._eye[2] = this._target[2] + (eyeToTarget[2] * sca);\n\n        this._setDirty();\n    }\n\n    restore(params) {\n        if (params.type) {\n            this.projectionType = type;\n        }\n        if (this._projection instanceof Perspective && params.fovy) {\n            this._projection.fov = params.fovy;\n        }\n        [\"eye\", \"target\", \"up\"].forEach((k) => {\n            if (params[k]) {\n                let fn = Object.getOwnPropertyDescriptor(this, k).set;\n                fn(this, params[k]);\n            }\n        });\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/camera.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "tempMat4",
    "memberof": "viewer/camera.js",
    "static": true,
    "longname": "viewer/camera.js~tempMat4",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "tempMat4b",
    "memberof": "viewer/camera.js",
    "static": true,
    "longname": "viewer/camera.js~tempMat4b",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "viewer/camera.js",
    "static": true,
    "longname": "viewer/camera.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "tempVec3b",
    "memberof": "viewer/camera.js",
    "static": true,
    "longname": "viewer/camera.js~tempVec3b",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "tempVec3c",
    "memberof": "viewer/camera.js",
    "static": true,
    "longname": "viewer/camera.js~tempVec3c",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "tempVec3d",
    "memberof": "viewer/camera.js",
    "static": true,
    "longname": "viewer/camera.js~tempVec3d",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "variable",
    "name": "tempVec3e",
    "memberof": "viewer/camera.js",
    "static": true,
    "longname": "viewer/camera.js~tempVec3e",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "name": "tmp_modelBounds",
    "memberof": "viewer/camera.js",
    "static": true,
    "longname": "viewer/camera.js~tmp_modelBounds",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "class",
    "name": "Camera",
    "memberof": "viewer/camera.js",
    "static": true,
    "longname": "viewer/camera.js~Camera",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/camera.js",
    "importStyle": "{Camera}",
    "description": "A **Camera** defines viewing and projection transforms for its Viewer.",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "perspective",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#perspective",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "orthographic",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#orthographic",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "_projection",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_projection",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "_viewMatrix",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_viewMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "_viewProjMatrix",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_viewProjMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "_viewMatrixInverted",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_viewMatrixInverted",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "_viewProjMatrixInverted",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_viewProjMatrixInverted",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "_viewNormalMatrix",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_viewNormalMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "_eye",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_eye",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_target",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_target",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "_up",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_up",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "_center",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_center",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "_worldAxis",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_worldAxis",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "_worldUp",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_worldUp",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "_worldRight",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_worldRight",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "_worldForward",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_worldForward",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "_gimbalLock",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_gimbalLock",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "_constrainPitch",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_constrainPitch",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "_dirty",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_dirty",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "_locked",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_locked",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "_modelBounds",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#_modelBounds",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "listeners",
    "memberof": "viewer/camera.js~Camera",
    "static": false,
    "longname": "viewer/camera.js~Camera#listeners",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "lock",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#lock",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "unlock",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#unlock",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "_setDirty",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#_setDirty",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "setModelBounds",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#setModelBounds",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "bounds",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "_build",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#_build",
    "access": "private",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "get",
    "name": "viewMatrix",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#viewMatrix",
    "access": "public",
    "description": "Gets the current viewing transform matrix.",
    "lineNumber": 154,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "4x4 column-order matrix as an array of 16 contiguous floats."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "get",
    "name": "viewProjMatrix",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#viewProjMatrix",
    "access": "public",
    "description": "Gets the current view projection matrix.",
    "lineNumber": 166,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "4x4 column-order matrix as an array of 16 contiguous floats."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "get",
    "name": "viewProjMatrixInverted",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#viewProjMatrixInverted",
    "access": "public",
    "description": "Gets the current inverted view projection matrix.",
    "lineNumber": 178,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "4x4 column-order matrix as an array of 16 contiguous floats."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "get",
    "name": "viewMatrixInverted",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#viewMatrixInverted",
    "access": "public",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "get",
    "name": "viewNormalMatrix",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#viewNormalMatrix",
    "access": "public",
    "description": "Gets the current viewing transform matrix for normals.\n\nThis is the transposed inverse of the view matrix.",
    "lineNumber": 199,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "4x4 column-order matrix as an array of 16 contiguous floats."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "get",
    "name": "projMatrix",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#projMatrix",
    "access": "public",
    "description": "Gets the current projection transform matrix.",
    "lineNumber": 211,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "4x4 column-order matrix as an array of 16 contiguous floats."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "set",
    "name": "projectionType",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#projectionType",
    "access": "public",
    "description": "Selects the current projection type.",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectionType",
        "description": "Accepted values are \"persp\" or \"ortho\"."
      }
    ]
  },
  {
    "__docId__": 245,
    "kind": "get",
    "name": "projectionType",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#projectionType",
    "access": "public",
    "description": "Gets the current projection type.",
    "lineNumber": 235,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "projectionType \"persp\" or \"ortho\"."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "get",
    "name": "projection",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#projection",
    "access": "public",
    "description": "Gets the component that represents the current projection type.",
    "lineNumber": 244,
    "return": {
      "nullable": null,
      "types": [
        "Perspective",
        "Orthographic"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "set",
    "name": "eye",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#eye",
    "access": "public",
    "description": "Sets the position of the camera.",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "eye",
        "description": "3D position of the camera in World space."
      }
    ]
  },
  {
    "__docId__": 248,
    "kind": "get",
    "name": "eye",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#eye",
    "access": "public",
    "description": "Gets the position of the camera.",
    "lineNumber": 261,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "3D position of the camera in World space."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "set",
    "name": "target",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#target",
    "access": "public",
    "description": "Sets the point the camera is looking at.",
    "lineNumber": 269,
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "3D position of the point of interest in World space."
      }
    ]
  },
  {
    "__docId__": 250,
    "kind": "get",
    "name": "target",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#target",
    "access": "public",
    "description": "Gets the point tha camera is looking at.",
    "lineNumber": 278,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "3D position of the point of interest in World space."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "set",
    "name": "center",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#center",
    "access": "public",
    "description": null,
    "lineNumber": 282,
    "undocument": true
  },
  {
    "__docId__": 252,
    "kind": "get",
    "name": "center",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#center",
    "access": "public",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "set",
    "name": "up",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#up",
    "access": "public",
    "description": "Sets the camera's \"up\" direction.",
    "lineNumber": 295,
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "up",
        "description": "3D vector indicating the camera's \"up\" direction in World-space."
      }
    ]
  },
  {
    "__docId__": 254,
    "kind": "get",
    "name": "up",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#up",
    "access": "public",
    "description": "Gets the camera's \"up\" direction.",
    "lineNumber": 304,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "3D vector indicating the camera's \"up\" direction in World-space."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "set",
    "name": "gimbalLock",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#gimbalLock",
    "access": "public",
    "description": "Sets whether camera rotation is gimbal locked.\n\nWhen true, yaw rotation will always pivot about the World-space \"up\" axis.",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "gimbalLock",
        "description": "Whether or not to enable gimbal locking."
      }
    ]
  },
  {
    "__docId__": 257,
    "kind": "get",
    "name": "gimbalLock",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#gimbalLock",
    "access": "public",
    "description": "Sets whether camera rotation is gimbal locked.\n\nWhen true, yaw rotation will always pivot about the World-space \"up\" axis.",
    "lineNumber": 326,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if gimbal locking is enabled."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "set",
    "name": "constrainPitch",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#constrainPitch",
    "access": "public",
    "description": "Sets whether its currently possible to pitch the camera to look at the model upside-down.\n\nWhen this is true, camera will ignore attempts to orbit (camera or model) about the horizontal axis\nthat would result in the model being viewed upside-down.",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "constrainPitch",
        "description": "Whether or not to activate the constraint."
      }
    ]
  },
  {
    "__docId__": 260,
    "kind": "get",
    "name": "constrainPitch",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#constrainPitch",
    "access": "public",
    "description": "Gets whether its currently possible to pitch the camera to look at the model upside-down.",
    "lineNumber": 347,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "set",
    "name": "worldAxis",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#worldAxis",
    "access": "public",
    "description": "Indicates the up, right and forward axis of the World coordinate system.\n\nThis is used for deriving rotation axis for yaw orbiting, and for moving camera to axis-aligned positions.\n\nHas format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````",
    "lineNumber": 360,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "get",
    "name": "worldAxis",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#worldAxis",
    "access": "public",
    "description": "Indicates the up, right and forward axis of the World coordinate system.\n\nThis is used for deriving rotation axis for yaw orbiting, and for moving camera to axis-aligned positions.\n\nHas format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````",
    "lineNumber": 383,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "get",
    "name": "worldUp",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#worldUp",
    "access": "public",
    "description": "Direction of World-space \"up\".",
    "lineNumber": 392,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "get",
    "name": "worldRight",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#worldRight",
    "access": "public",
    "description": "Direction of World-space \"right\".",
    "lineNumber": 401,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "get",
    "name": "worldForward",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#worldForward",
    "access": "public",
    "description": "Direction of World-space \"forwards\".",
    "lineNumber": 410,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "orbitYaw",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#orbitYaw",
    "access": "public",
    "description": "Rotates the eye position about the target position, pivoting around the up vector.",
    "lineNumber": 419,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "degrees",
        "description": "Angle of rotation in degrees"
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "orbitPitch",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#orbitPitch",
    "access": "public",
    "description": "Rotates the eye position about the target position, pivoting around the right axis (orthogonal to up vector and eye->target vector).",
    "lineNumber": 444,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "degrees",
        "description": "Angle of rotation in degrees"
      }
    ],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "yaw",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#yaw",
    "access": "public",
    "description": "Rotates the target position about the eye, pivoting around the up vector.",
    "lineNumber": 479,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "degrees",
        "description": "Angle of rotation in degrees"
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "pitch",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#pitch",
    "access": "public",
    "description": "Rotates the target position about the eye, pivoting around the right axis (orthogonal to up vector and eye->target vector).",
    "lineNumber": 495,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "degrees",
        "description": "Angle of rotation in degrees"
      }
    ],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "pan",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#pan",
    "access": "public",
    "description": "Pans the camera along the camera's local X, Y and Z axis.",
    "lineNumber": 519,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "pan",
        "description": "The pan vector"
      }
    ],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "zoom",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#zoom",
    "access": "public",
    "description": "Moves the camera along a ray through unprojected mouse coordinates",
    "lineNumber": 554,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "Zoom increment"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "canvasPos",
        "description": "Mouse position relative to canvas to determine ray along which to move"
      }
    ],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "viewFit",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#viewFit",
    "access": "public",
    "description": "Jumps the camera to look at the given axis-aligned World-space bounding box.",
    "lineNumber": 577,
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": "The axis-aligned World-space bounding box (AABB)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fitFOV",
        "description": "Field-of-view occupied by the AABB when the camera has fitted it to view."
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "restore",
    "memberof": "viewer/camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/camera.js~Camera#restore",
    "access": "public",
    "description": null,
    "lineNumber": 599,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "file",
    "name": "viewer/cameracontrol.js",
    "content": "export const DRAG_ORBIT = 0xfe01;\nexport const DRAG_PAN = 0xfe02;\nexport const DRAG_SECTION = 0xfe03;\n\n/**\n Controls the camera with user input.\n */\nexport class CameraControl {\n\n    constructor(viewer) {\n\n        this.viewer = viewer;\n\n        this.mousePanSensitivity = 0.5;\n        this.mouseOrbitSensitivity = 0.5;\n        this.canvasPickTolerance = 4;\n\n        this.canvas = viewer.canvas;\n        this.camera = viewer.camera;\n\n        this.mousePos = vec2.create();\n        this.mouseDownPos = vec2.create();\n        this.over = false; // True when mouse over canvas\n        this.lastX = 0; // Last canvas pos while dragging\n        this.lastY = 0;\n\n        this.mouseDown = false;\n        this.dragMode = DRAG_ORBIT;\n\n        this.canvas.oncontextmenu = (e) => {\n            e.preventDefault();\n        };\n\n        this.canvas.addEventListener(\"mousedown\", this.canvasMouseDownHandler = (e) => {\n        \tthis.canvasMouseDown(e);\n        });\n\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUpHandler = (e) => {\n        \tthis.canvasMouseUp(e);\n        });\n\n        this.documentMouseUpHandler = (e) => {\n        \tthis.documentMouseUp(e);\n        };\n        document.addEventListener(\"mouseup\", this.documentMouseUpHandler);\n\n        this.canvas.addEventListener(\"mouseenter\", this.canvasMouseEnterHandler = (e) => {\n            this.over = true;\n            e.preventDefault();\n        });\n\n        this.canvas.addEventListener(\"mouseleave\", this.canvasMouseLeaveHandler = (e) => {\n            this.over = false;\n            e.preventDefault();\n        });\n\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMoveHandler = (e) => {\n        \tthis.canvasMouseMove(e);\n        });\n\n        this.canvas.addEventListener(\"wheel\", this.canvasMouseWheelHandler = (e) => {\n        \tthis.canvasWheel(e);\n        });\n    }\n\n    /**\n     * @private\n     */\n    getCanvasPosFromEvent(event, canvasPos) {\n        if (!event) {\n            event = window.event;\n            canvasPos[0] = event.x;\n            canvasPos[1] = event.y;\n        } else {\n            var element = event.target;\n            var totalOffsetLeft = 0;\n            var totalOffsetTop = 0;\n            while (element.offsetParent) {\n                totalOffsetLeft += element.offsetLeft;\n                totalOffsetTop += element.offsetTop;\n                element = element.offsetParent;\n            }\n            canvasPos[0] = event.pageX - totalOffsetLeft;\n            canvasPos[1] = event.pageY - totalOffsetTop;\n        }\n        return canvasPos;\n    }\n\n    /**\n     * @private\n     */\n    getZoomRate() {\n        var modelBounds = this.viewer.modelBounds;\n        if (modelBounds) {\n            var xsize = modelBounds[3] - modelBounds[0];\n            var ysize = modelBounds[4] - modelBounds[1];\n            var zsize = modelBounds[5] - modelBounds[2];\n            var max = (xsize > ysize ? xsize : ysize);\n            max = (zsize > max ? zsize : max);\n            return max / 20;\n        } else {\n            return 1;\n        }\n    }\n\n    /**\n     * @private\n     */\n    canvasMouseDown(e) {\n        this.getCanvasPosFromEvent(e, this.mousePos);\n\n        this.lastX = this.mousePos[0];\n        this.lastY = this.mousePos[1];\n\n        this.mouseDown = true;\n        this.mouseDownTime = e.timeStamp;\n        this.mouseDownPos.set(this.mousePos);\n\n        switch (e.which) {\n            case 1:                \n                if (e.ctrlKey) {\n                    this.mouseDownTime = 0;\n                    this.dragMode = DRAG_SECTION;\n                    this.viewer.startSectionPlane({canvasPos:[this.lastX, this.lastY]});                    \n                } else {\n                    this.dragMode = DRAG_ORBIT;\n                    let picked = this.viewer.pick({canvasPos:[this.lastX, this.lastY], select:false});\n                    if (picked && picked.coordinates && picked.object) {\n                        this.viewer.camera.center = picked.coordinates;\n                    } else {\n                        // Check if we can 'see' the previous center. If not, pick\n                        // a new point.\n                        let center_vp = vec3.transformMat4(vec3.create(), this.viewer.camera.center, this.viewer.camera.viewProjMatrix);\n\n                        let isv = true;\n                        for (let i = 0; i < 3; ++i) {\n                            if (center_vp[i] < -1. || center_vp[i] > 1.) {\n                                isv = false;\n                                break;\n                            }\n                        }\n\n                        if (!isv) {\n                            let [x,y] = this.mousePos;\n                            vec3.set(center_vp, x / this.viewer.width * 2 - 1, - y / this.viewer.height * 2 + 1, 1.);\n                            vec3.transformMat4(center_vp, center_vp, this.camera.viewProjMatrixInverted);\n                            vec3.subtract(center_vp, center_vp, this.camera.eye);\n                            vec3.normalize(center_vp, center_vp);\n                            vec3.scale(center_vp, center_vp, this.getZoomRate() * 10.);\n                            vec3.add(center_vp, center_vp, this.camera.eye);\n                            console.log(\"new center\", center_vp);\n                            this.viewer.camera.center = center_vp;\n                        }\n                    }\n                }\n                break;\n            case 2:\n                this.dragMode = DRAG_PAN; \n                break;\n            default:\n                break;\n        }\n        this.over = true;\n        e.preventDefault();\n    }\n\n    /**\n     * @private\n     */\n    canvasMouseUp(e) {\n        this.camera.orbitting = false;\n        this.viewer.overlay.update();\n        this.getCanvasPosFromEvent(e, this.mousePos);\n\n        let dt = e.timeStamp - this.mouseDownTime;\n        this.mouseDown = false;\n\n        switch (e.which) {\n            case 1:\n            \tif (dt < 500. && this.closeEnoughCanvas(this.mouseDownPos, this.mousePos)) {\n                    var viewObject = this.viewer.pick({\n                        canvasPos: this.mousePos,\n                        shiftKey: e.shiftKey\n                    });\n                    if (viewObject && viewObject.object) {\n                        console.log(\"Picked\", viewObject.object);\n                    }\n                    this.viewer.drawScene();\n                }\n                break;\n        }\n        e.preventDefault();\n    }\n\n    /**\n     * @private\n     */\n    canvasWheel(e) {\n        this.getCanvasPosFromEvent(e, this.mousePos);\n        var delta = Math.max(-1, Math.min(1, -e.deltaY * 40));\n        if (delta === 0) {\n            return;\n        }\n        var d = delta / Math.abs(delta);\n        var zoom = -d * this.getZoomRate() * this.mousePanSensitivity;\n        this.camera.zoom(zoom, this.mousePos);\n        e.preventDefault();\n    }\n\n    /**\n     * @private\n     */\n    closeEnoughCanvas(p, q) {\n        return p[0] >= (q[0] - this.canvasPickTolerance) &&\n            p[0] <= (q[0] + this.canvasPickTolerance) &&\n            p[1] >= (q[1] - this.canvasPickTolerance) &&\n            p[1] <= (q[1] + this.canvasPickTolerance);\n    }\n\n    /**\n     * @private\n     */\n    canvasMouseMove(e) {\n        if (!this.over) {\n            return;\n        }\n        if (this.mouseDown) {\n        \tthis.getCanvasPosFromEvent(e, this.mousePos);\n            var x = this.mousePos[0];\n            var y = this.mousePos[1];\n            var xDelta = (x - this.lastX);\n            var yDelta = (y - this.lastY);\n            this.lastX = x;\n            this.lastY = y;\n            if (this.dragMode == DRAG_ORBIT) {\n                let f = 0.5;\n                if (xDelta !== 0) {\n                \tthis.camera.orbitYaw(-xDelta * this.mouseOrbitSensitivity * f);\n                }\n                if (yDelta !== 0) {\n                \tthis.camera.orbitPitch(yDelta * this.mouseOrbitSensitivity * f);\n                }\n                this.camera.orbitting = true;\n            } else if (this.dragMode == DRAG_PAN) {\n                var f = this.getEyeLookDist() / 600;\n                this.camera.pan([xDelta * f, yDelta * this.mousePanSensitivity * f, 0.0]);\n            }\n        }\n        e.preventDefault();\n    }\n\n    /**\n     * @private\n     */\n    documentMouseUp(e) {\n        this.mouseDown = false;\n    }\n\n    getEyeLookDist() {\n        var vec = vec3.create();\n        return vec3.length(vec3.subtract(vec, this.viewer.camera.target, this.viewer.camera.eye));\n    }\n\n    /**\n     * @private\n     */\n    cleanup() {\n        var canvas = this.canvas;\n    \tdocument.removeEventListener(\"mouseup\", this.documentMouseUpHandler);\n        canvas.removeEventListener(\"mousedown\", this.canvasMouseDownHandler);\n        canvas.removeEventListener(\"mouseup\", this.canvasMouseUpHandler);\n        document.removeEventListener(\"mouseup\", this.documentMouseUpHandler);\n        canvas.removeEventListener(\"mouseenter\", this.canvasMouseEnterHandler);\n        canvas.removeEventListener(\"mouseleave\", this.canvasMouseLeaveHandler);\n        canvas.removeEventListener(\"mousemove\", this.canvasMouseMoveHandler);\n        canvas.removeEventListener(\"wheel\", this.canvasMouseWheelHandler);\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/cameracontrol.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "DRAG_ORBIT",
    "memberof": "viewer/cameracontrol.js",
    "static": true,
    "longname": "viewer/cameracontrol.js~DRAG_ORBIT",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/cameracontrol.js",
    "importStyle": "{DRAG_ORBIT}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "name": "DRAG_PAN",
    "memberof": "viewer/cameracontrol.js",
    "static": true,
    "longname": "viewer/cameracontrol.js~DRAG_PAN",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/cameracontrol.js",
    "importStyle": "{DRAG_PAN}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "DRAG_SECTION",
    "memberof": "viewer/cameracontrol.js",
    "static": true,
    "longname": "viewer/cameracontrol.js~DRAG_SECTION",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/cameracontrol.js",
    "importStyle": "{DRAG_SECTION}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "class",
    "name": "CameraControl",
    "memberof": "viewer/cameracontrol.js",
    "static": true,
    "longname": "viewer/cameracontrol.js~CameraControl",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/cameracontrol.js",
    "importStyle": "{CameraControl}",
    "description": "Controls the camera with user input.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 281,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "mousePanSensitivity",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#mousePanSensitivity",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "mouseOrbitSensitivity",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#mouseOrbitSensitivity",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "canvasPickTolerance",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#canvasPickTolerance",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "canvas",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "camera",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#camera",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "mousePos",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#mousePos",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "mouseDownPos",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#mouseDownPos",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "over",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#over",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "lastX",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#lastX",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "lastY",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#lastY",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "mouseDown",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#mouseDown",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "dragMode",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#dragMode",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "documentMouseUpHandler",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#documentMouseUpHandler",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "getCanvasPosFromEvent",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#getCanvasPosFromEvent",
    "access": "private",
    "description": "",
    "lineNumber": 69,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "canvasPos",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "getZoomRate",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#getZoomRate",
    "access": "private",
    "description": "",
    "lineNumber": 92,
    "params": [],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "canvasMouseDown",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#canvasMouseDown",
    "access": "private",
    "description": "",
    "lineNumber": 109,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "mouseDownTime",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#mouseDownTime",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "canvasMouseUp",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#canvasMouseUp",
    "access": "private",
    "description": "",
    "lineNumber": 170,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "canvasWheel",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#canvasWheel",
    "access": "private",
    "description": "",
    "lineNumber": 198,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "closeEnoughCanvas",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#closeEnoughCanvas",
    "access": "private",
    "description": "",
    "lineNumber": 213,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "canvasMouseMove",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#canvasMouseMove",
    "access": "private",
    "description": "",
    "lineNumber": 223,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "documentMouseUp",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#documentMouseUp",
    "access": "private",
    "description": "",
    "lineNumber": 255,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "getEyeLookDist",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#getEyeLookDist",
    "access": "public",
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "cleanup",
    "memberof": "viewer/cameracontrol.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/cameracontrol.js~CameraControl#cleanup",
    "access": "private",
    "description": "",
    "lineNumber": 267,
    "params": [],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "file",
    "name": "viewer/datainputstream.js",
    "content": "// Reuse the text decoder\nlet utf8TextDecoder = new TextDecoder(\"utf-8\");\n\n/**\n * This class keeps track of the position of reading, supplies get methods for most types and provides alignment methods.\n * All data is assumed to be in LITTLE_ENDIAN!\n */\nexport class DataInputStream {\n\n\tconstructor(arrayBuffer) {\n\t\tthis.arrayBuffer = arrayBuffer;\n\t\tthis.dataView = new DataView(arrayBuffer);\n\t\tthis.pos = 0;\n\t}\n\t\n\tremaining() {\n\t\treturn this.arrayBuffer.byteLength - this.pos;\n\t}\n\n\treadUTF8() {\n\t\tvar length = this.dataView.getInt16(this.pos);\n\t\tthis.pos += 2;\n\t\tvar view = this.arrayBuffer.slice(this.pos, this.pos + length);\n\t\tvar result = utf8TextDecoder.decode(view);\n\t\tthis.pos += length;\n\t\treturn result;\n\t}\n\n\talign4() {\n\t\t// Skips to the next alignment of 4 (source should have done the same!)\n\t\tvar skip = 4 - (this.pos % 4);\n\t\tif(skip > 0 && skip != 4) {\n\t\t\tthis.pos += skip;\n\t\t}\n\t}\n\n\talign8() {\n\t\t// Skips to the next alignment of 8 (source should have done the same!)\n\t\tvar skip = 8 - (this.pos % 8);\n\t\tif(skip > 0 && skip != 8) {\n\t\t\tthis.pos += skip;\n\t\t}\n\t}\n\n\treadBytes(size) {\n\t\treturn this.arrayBuffer.slice(this.pos, this.pos + size);\n\t}\n\t\n\treadFloat() {\n\t\tvar value = this.dataView.getFloat32(this.pos, true);\n\t\tthis.pos += 4;\n\t\treturn value;\n\t}\n\n\treadInt() {\n\t\tvar value = this.dataView.getInt32(this.pos, true);\n\t\tthis.pos += 4;\n\t\treturn value;\n\t}\n\n\treadByte() {\n\t\tvar value = this.dataView.getInt8(this.pos);\n\t\tthis.pos += 1;\n\t\treturn value;\n\t}\n\n\treadLong() {\n\t\tvar value = this.dataView.getUint32(this.pos, true) + 0x100000000 * this.dataView.getUint32(this.pos + 4, true);\n\t\tthis.pos += 8;\n\t\treturn value;\n\t}\n\n\t// Disabled for now as only Chrome currently supports this (27-11-2018)\n//\treadLongAsBigInt() {\n//\t\tvar value = this.dataView.getBigInt64(this.pos, true);\n//\t\tvar value = this.dataView.getUint32(this.pos, true) + 0x100000000 * this.dataView.getUint32(this.pos + 4, true);\n//\t\tthis.pos += 8;\n//\t\treturn value;\n//\t}\n\n\treadFloatArray2(length) {\n\t\tvar results = [];\n\t\tfor (var i=0; i<length; i++) {\n\t\t\tvar value = this.dataView.getFloat32(this.pos, true);\n\t\t\tthis.pos += 4;\n\t\t\tresults.push(value);\n\t\t}\n\t\treturn results;\n\t}\n\t\n\treadFloatArray(length) {\n\t\ttry {\n\t\t\tvar result = new Float32Array(this.arrayBuffer, this.pos, length);\n\t\t\tthis.pos += length * 4;\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error(e, this.arrayBuffer.byteLength, this.pos, length);\n\t\t}\n\t}\n\n\treadByteArray(length) {\n\t\ttry {\n\t\t\tvar result = new Int8Array(this.arrayBuffer, this.pos, length);\n\t\t\tthis.pos += length;\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error(e, this.arrayBuffer.byteLength, this.pos, length);\n\t\t}\n\t}\n\n\treadUnsignedByteArray(length) {\n\t\ttry {\n\t\t\tvar result = new Uint8Array(this.arrayBuffer, this.pos, length);\n\t\t\tthis.pos += length;\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error(e, this.arrayBuffer.byteLength, this.pos, length);\n\t\t}\n\t}\n\t\n\treadDoubleArray(length) {\n\t\tvar result = new Float64Array(this.arrayBuffer, this.pos, length);\n\t\tthis.pos += length * 8;\n\t\treturn result;\n\t}\n\n\treadDoubleArrayCopy(length) {\n\t\tvar result = Float64Array.from(new Float64Array(this.arrayBuffer, this.pos, length));\n\t\tthis.pos += length * 8;\n\t\treturn result;\n\t}\n\n\treadIntArray2(length) {\n\t\tvar results = [];\n\t\tfor (var i=0; i<length; i++) {\n\t\t\tvar value = this.dataView.getInt32(this.pos, true);\n\t\t\tthis.pos += 4;\n\t\t\tresults.push(value);\n\t\t}\n\t\treturn results;\n\t}\n\t\n\treadIntArray(length) {\n\t\tvar result = new Int32Array(this.arrayBuffer, this.pos, length);\n\t\tthis.pos += length * 4;\n\t\treturn result;\n\t}\n\t\n\treadShortArray(length) {\n\t\ttry {\n\t\t\tvar result = new Int16Array(this.arrayBuffer, this.pos, length);\n\t\t\tthis.pos += length * 2;\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error(e, this.pos, length);\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/datainputstream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "variable",
    "name": "utf8TextDecoder",
    "memberof": "viewer/datainputstream.js",
    "static": true,
    "longname": "viewer/datainputstream.js~utf8TextDecoder",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/datainputstream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "class",
    "name": "DataInputStream",
    "memberof": "viewer/datainputstream.js",
    "static": true,
    "longname": "viewer/datainputstream.js~DataInputStream",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/datainputstream.js",
    "importStyle": "{DataInputStream}",
    "description": "This class keeps track of the position of reading, supplies get methods for most types and provides alignment methods.\nAll data is assumed to be in LITTLE_ENDIAN!",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 324,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "arrayBuffer",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#arrayBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "dataView",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#dataView",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "pos",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#pos",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "remaining",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#remaining",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "readUTF8",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readUTF8",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "align4",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#align4",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "align8",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#align8",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "readBytes",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readBytes",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "readFloat",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readFloat",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "readInt",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readInt",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "readByte",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readByte",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "readLong",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readLong",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "readFloatArray2",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readFloatArray2",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "readFloatArray",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readFloatArray",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "readByteArray",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readByteArray",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "readUnsignedByteArray",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readUnsignedByteArray",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "readDoubleArray",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readDoubleArray",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "readDoubleArrayCopy",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readDoubleArrayCopy",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "readIntArray2",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readIntArray2",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "readIntArray",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readIntArray",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "readShortArray",
    "memberof": "viewer/datainputstream.js~DataInputStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/datainputstream.js~DataInputStream#readShortArray",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "file",
    "name": "viewer/defaultcolors.js",
    "content": "/**\r\n * Default colors, only used by the GeometryLoader when no default color is given by the serializer\r\n */\r\nexport const DefaultColors = {\r\n\tIfcSpace: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcRoof: {r: 0.837255, g: 0.203922, b: 0.270588, a: 1.0},\r\n\tIfcSlab: {r: 0.637255, g: 0.603922, b: 0.670588, a: 1.0},\r\n\tIfcWall: {r: 0.537255, g: 0.337255, b: 0.237255, a: 1.0},\r\n\tIfcWallStandardCase: {r: 0.537255, g: 0.337255, b: 0.237255, a: 1.0},\r\n\tIfcDoor: {r: 0.637255, g: 0.603922, b: 0.670588, a: 1.0},\r\n\tIfcWindow: {r: 0.137255, g: 0.403922, b: 0.870588, a: 0.5},\r\n\tIfcOpeningElement: {r: 0.137255, g: 0.403922, b: 0.870588, a: 0},\r\n\tIfcRailing: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcColumn: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcBeam: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcBeamStandardCase: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcFurnishingElement: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcCurtainWall: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcStair: {r: 0.637255, g: 0.603922, b: 0.670588, a: 1.0},\r\n\tIfcStairFlight: {r: 0.637255, g: 0.603922, b: 0.670588, a: 1.0},\r\n\tIfcBuildingElementProxy: {r: 0.5, g: 0.5, b: 0.5, a: 1.0},\r\n\tIfcFlowSegment: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcFlowitting: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcFlowTerminal: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcProxy: {r: 0.137255, g: 0.403922, b: 0.870588, a: 1.0},\r\n\tIfcSite: {r: 0.32, g: 0.23, b: 0.19, a: 1.0},\r\n\tIfcLightFixture: {r: 0.8470588235, g: 0.8470588235, b: 0.870588, a: 1.0},\r\n\tIfcDuctSegment: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcDistributionFlowElement: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcDuctFitting: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcPlate: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 0.5},\r\n\tIfcPile: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcAirTerminal: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcMember: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcCovering: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcTransportElement: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcFlowController: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcFlowFitting: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcRamp: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcFurniture: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcFooting: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcSystemFurnitureElement: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0},\r\n\tIfcSpace: {r: 0.137255, g: 0.303922, b: 0.570588, a: 0.5},\r\n\tIfcBuildingElementPart: {r: 1, g: 0.5, b: 0.5, a: 1.0},\r\n\tIfcDistributionElement: {r: 1, g: 0.5, b: 0.5, a: 1.0},\r\n\tDEFAULT: {r: 0.8470588235, g: 0.427450980392, b: 0, a: 1.0}\r\n};",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/defaultcolors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "variable",
    "name": "DefaultColors",
    "memberof": "viewer/defaultcolors.js",
    "static": true,
    "longname": "viewer/defaultcolors.js~DefaultColors",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/defaultcolors.js",
    "importStyle": "{DefaultColors}",
    "description": "Default colors, only used by the GeometryLoader when no default color is given by the serializer",
    "lineNumber": 4,
    "type": {
      "types": [
        "{\"IfcSpace\": *, \"IfcRoof\": *, \"IfcSlab\": *, \"IfcWall\": *, \"IfcWallStandardCase\": *, \"IfcDoor\": *, \"IfcWindow\": *, \"IfcOpeningElement\": *, \"IfcRailing\": *, \"IfcColumn\": *, \"IfcBeam\": *, \"IfcBeamStandardCase\": *, \"IfcFurnishingElement\": *, \"IfcCurtainWall\": *, \"IfcStair\": *, \"IfcStairFlight\": *, \"IfcBuildingElementProxy\": *, \"IfcFlowSegment\": *, \"IfcFlowitting\": *, \"IfcFlowTerminal\": *, \"IfcProxy\": *, \"IfcSite\": *, \"IfcLightFixture\": *, \"IfcDuctSegment\": *, \"IfcDistributionFlowElement\": *, \"IfcDuctFitting\": *, \"IfcPlate\": *, \"IfcPile\": *, \"IfcAirTerminal\": *, \"IfcMember\": *, \"IfcCovering\": *, \"IfcTransportElement\": *, \"IfcFlowController\": *, \"IfcFlowFitting\": *, \"IfcRamp\": *, \"IfcFurniture\": *, \"IfcFooting\": *, \"IfcSystemFurnitureElement\": *, \"IfcBuildingElementPart\": *, \"IfcDistributionElement\": *, \"DEFAULT\": *}"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "file",
    "name": "viewer/defaultrenderlayer.js",
    "content": "import {BufferManagerTransparencyOnly} from './buffermanagertransparencyonly.js'\r\nimport {BufferManagerPerColor} from './buffermanagerpercolor.js'\r\nimport {Utils} from './utils.js'\r\nimport {VertexQuantization} from './vertexquantization.js'\r\nimport {RenderLayer} from './renderlayer.js'\r\nimport {GpuBufferManager} from './gpubuffermanager.js'\r\n\r\n/**\r\n * This is the default renderer for what we called the base layer. Usually this layer should be small enough to be rendered at good FPS\r\n *\r\n * This class does:\r\n * - Populate the CPU side buffers\r\n * - Allocate buffers on the GPU and flush buffers to it\r\n * - Render all buffers\r\n *\r\n */\r\nexport class DefaultRenderLayer extends RenderLayer {\r\n\tconstructor(viewer, geometryDataToReuse) {\r\n\t\tsuper(viewer, geometryDataToReuse);\r\n\r\n\t\tif (this.settings.useObjectColors) {\r\n\t\t\tthis.bufferManager = new BufferManagerPerColor(this.viewer, this.settings, this, this.viewer.bufferSetPool);\r\n\t\t} else {\r\n\t\t\tthis.bufferManager = new BufferManagerTransparencyOnly(this.viewer, this.settings, this, this.viewer.bufferSetPool);\r\n\t\t}\r\n\r\n\t\tthis.gpuBufferManager = new GpuBufferManager(this.viewer);\r\n\t\t\r\n\t\twindow.defaultRenderLayer = this;\r\n\t}\r\n\r\n\tcreateObject(loaderId, roid, oid, objectId, geometryIds, matrix, normalMatrix, scaleMatrix, hasTransparency, type, aabb) {\r\n\t\treturn super.createObject(loaderId, roid, oid, objectId, geometryIds, matrix, normalMatrix, scaleMatrix, hasTransparency, type, aabb, this.gpuBufferManager);\r\n\t}\r\n\r\n\taddGeometryReusable(geometry, loader, gpuBufferManager) {\r\n\t\tsuper.addGeometryReusable(geometry, loader, gpuBufferManager);\r\n\t\tthis.viewer.stats.inc(\"Drawing\", \"Draw calls per frame (L1)\");\r\n\t}\r\n\t\r\n\taddGeometry(loaderId, geometry, object) {\r\n\t\t// TODO some of this is duplicate code, also in tilingrenderlayer.js\r\n\t\tif (geometry.reused > 1 && this.geometryDataToReuse != null && this.geometryDataToReuse.has(geometry.id)) {\r\n\t\t\tgeometry.matrices.push(object.matrix);\r\n\t\t\tgeometry.objects.push(object);\r\n\r\n\t\t\tthis.viewer.stats.inc(\"Drawing\", \"Triangles to draw (L1)\", geometry.indices.length / 3);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar sizes = {\r\n\t\t\tvertices: geometry.positions.length,\r\n\t\t\tnormals: geometry.normals.length,\r\n\t\t\tindices: geometry.indices.length,\r\n\t\t\tcolors: (geometry.colors != null ? geometry.colors.length : 0),\r\n\t\t\tpickColors: geometry.positions.length\r\n\t\t};\r\n\t\tvar buffer = this.bufferManager.getBufferSet(geometry.hasTransparency, geometry.color, sizes);\r\n\r\n\t\tsuper.addGeometry(loaderId, geometry, object, buffer, sizes);\r\n\t}\r\n\r\n\tdone(loaderId) {\r\n\t\tvar loader = this.getLoader(loaderId);\r\n\r\n\t\tfor (var geometry of loader.geometries.values()) {\r\n\t\t\tif (geometry.isReused) {\r\n\t\t\t\tthis.addGeometryReusable(geometry, loader, this.gpuBufferManager);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (var object of loader.objects.values()) {\r\n\t\t\tobject.add = null;\r\n\t\t}\r\n\r\n\t\tthis.removeLoader(loaderId);\r\n\t}\r\n\r\n\tcompletelyDone() {\r\n\t\tthis.flushAllBuffers();\r\n\r\n\t\tif (this.settings.useObjectColors) {\r\n\t\t\t// When using object colors, it makes sense to sort the buffers by color, so we can potentially skip a few uniform binds\r\n\t\t\t// It might be beneficiary to do this sorting on-the-lfy and not just when everything is loaded\r\n\t\t\tthis.gpuBufferManager.sortAllBuffers();\r\n\t\t} else if (this.settings.autoCombineGpuBuffers) {\r\n\t\t\tvar savedBuffers = this.gpuBufferManager.combineBuffers();\r\n\r\n\t\t\tthis.viewer.stats.dec(\"Drawing\", \"Draw calls per frame (L1)\", savedBuffers);\r\n\t\t\tthis.viewer.stats.dec(\"Buffers\", \"Buffer groups\", savedBuffers);\r\n\t\t}\r\n\r\n\t\tthis.bufferManager.clear();\r\n\t}\r\n\r\n\tflushAllBuffers() {\r\n\t\tfor (var buffer of this.bufferManager.getAllBuffers()) {\r\n\t\t\tthis.flushBuffer(buffer);\r\n\t\t}\r\n\t}\r\n\r\n\taddCompleteBuffer(buffer, gpuBufferManager) {\r\n\t\tvar newBuffer = super.addCompleteBuffer(buffer, gpuBufferManager);\r\n\t\t\r\n\t\tthis.viewer.stats.inc(\"Drawing\", \"Draw calls per frame (L1)\");\r\n\t\tthis.viewer.stats.inc(\"Drawing\", \"Triangles to draw (L1)\", buffer.nrIndices / 3);\r\n\t\t\r\n\t\treturn newBuffer;\r\n\t}\r\n\t\r\n\tflushBuffer(buffer) {\r\n\t\tlet gpuBuffer = super.flushBuffer(buffer, this.gpuBufferManager);\r\n\r\n\t\tthis.viewer.stats.inc(\"Drawing\", \"Draw calls per frame (L1)\");\r\n\t\tthis.viewer.stats.inc(\"Drawing\", \"Triangles to draw (L1)\", buffer.nrIndices / 3);\r\n\r\n\t\tthis.bufferManager.resetBuffer(buffer);\r\n\r\n\t\treturn gpuBuffer;\r\n\t}\r\n\r\n\trenderBuffers(transparency, reuse, visibleElements) {\r\n\t\tvar buffers = this.gpuBufferManager.getBuffers(transparency, reuse);\r\n\t\tif (buffers.length > 0) {\r\n\t\t\tlet picking = visibleElements.pass === 'pick';\r\n\r\n\t\t\tvar programInfo = this.viewer.programManager.getProgram(this.viewer.programManager.createKey(reuse, picking));\r\n\t\t\tthis.gl.useProgram(programInfo.program);\r\n\t\t\t// TODO find out whether it's possible to do this binding before the program is used (possibly just once per frame, and better yet, a different location in the code)\r\n\r\n\t\t\tif (!picking) {\r\n\t\t\t\tthis.viewer.lighting.render(programInfo.uniformBlocks.LightData);\r\n\t\t\t\tthis.gl.uniformMatrix3fv(programInfo.uniformLocations.viewNormalMatrix, false, this.viewer.camera.viewNormalMatrix);\r\n\t\t\t}\r\n\r\n\t\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, this.viewer.camera.projMatrix);\r\n\t\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.viewMatrix, false, this.viewer.camera.viewMatrix);\r\n\t\t\tthis.gl.uniform4fv(programInfo.uniformLocations.sectionPlane, this.viewer.sectionPlaneValues);\r\n\r\n\t\t\tif (this.settings.quantizeVertices) {\r\n\t\t\t\tif (!reuse) {\r\n\t\t\t\t\t// This is odd, it seems as though the reused shaders also need the vertexQuantizationMatrix, but it seems to work anyways... (same code in pickBuffers)\r\n\t\t\t\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.vertexQuantizationMatrix, false, this.viewer.vertexQuantization.getTransformedInverseVertexQuantizationMatrix());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.renderFinalBuffers(buffers, programInfo, visibleElements);\r\n\t\t}\r\n\t}\r\n\r\n\tsetProgressListener(progressListener) {\r\n\t\tthis.progressListener = progressListener;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/defaultrenderlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "class",
    "name": "DefaultRenderLayer",
    "memberof": "viewer/defaultrenderlayer.js",
    "static": true,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/defaultrenderlayer.js",
    "importStyle": "{DefaultRenderLayer}",
    "description": "This is the default renderer for what we called the base layer. Usually this layer should be small enough to be rendered at good FPS\n\nThis class does:\n- Populate the CPU side buffers\n- Allocate buffers on the GPU and flush buffers to it\n- Render all buffers",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "viewer/renderlayer.js~RenderLayer"
    ]
  },
  {
    "__docId__": 367,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "bufferManager",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#bufferManager",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "gpuBufferManager",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#gpuBufferManager",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "createObject",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#createObject",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      },
      {
        "name": "roid",
        "types": [
          "*"
        ]
      },
      {
        "name": "oid",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "normalMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaleMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "aabb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "addGeometryReusable",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#addGeometryReusable",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      },
      {
        "name": "loader",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "addGeometry",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#addGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "done",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#done",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "completelyDone",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#completelyDone",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "flushAllBuffers",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#flushAllBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "addCompleteBuffer",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#addCompleteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "flushBuffer",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#flushBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "renderBuffers",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#renderBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "transparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "reuse",
        "types": [
          "*"
        ]
      },
      {
        "name": "visibleElements",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "setProgressListener",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#setProgressListener",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "params": [
      {
        "name": "progressListener",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "progressListener",
    "memberof": "viewer/defaultrenderlayer.js~DefaultRenderLayer",
    "static": false,
    "longname": "viewer/defaultrenderlayer.js~DefaultRenderLayer#progressListener",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "file",
    "name": "viewer/defaultsettings.js",
    "content": "/**\r\n * @ignore\r\n */\r\nexport class DefaultSettings {\r\n\tstatic create(settings) {\r\n\t\tif (settings == null) {\r\n\t\t\tvar settings = {};\r\n\t\t}\r\n\t\tif (settings.useObjectColors == null) {\r\n\t\t\tsettings.useObjectColors = false;\r\n\t\t}\r\n\t\tif (settings.useSmallIndicesIfPossible == null) {\r\n\t\t\tsettings.useSmallIndicesIfPossible = true;\r\n\t\t}\r\n\t\tif (settings.quantizeNormals == null) {\r\n\t\t\tsettings.quantizeNormals = true;\r\n\t\t}\r\n\t\tif (settings.quantizeVertices == null) {\r\n\t\t\tsettings.quantizeVertices = true;\r\n\t\t}\r\n\t\tif (settings.quantizeColors == null) {\r\n\t\t\tsettings.quantizeColors = true;\r\n\t\t}\r\n\t\tif (settings.gpuReuse == null) {\r\n\t\t\tsettings.gpuReuse = true;\r\n\t\t}\r\n\t\tif (settings.loaderSettings == null) {\r\n\t\t\tsettings.loaderSettings = {};\r\n\t\t}\r\n\t\tif (settings.loaderSettings.useObjectColors == null) {\r\n\t\t\tsettings.loaderSettings.useObjectColors = false;\r\n\t\t}\r\n\t\tif (settings.loaderSettings.quantizeNormals == null) {\r\n\t\t\tsettings.loaderSettings.quantizeNormals = true;\r\n\t\t}\r\n\t\tif (settings.loaderSettings.quantizeVertices == null) {\r\n\t\t\tsettings.loaderSettings.quantizeVertices = true;\r\n\t\t}\r\n\t\tif (settings.loaderSettings.quantizeColors == null) {\r\n\t\t\tsettings.loaderSettings.quantizeColors = true;\r\n\t\t}\r\n\t\tif (settings.triangleThresholdDefaultLayer == null) {\r\n\t\t\tsettings.triangleThresholdDefaultLayer = 1000000;\r\n\t\t}\r\n\t\tif (settings.defaultLayerEnabled == null) {\r\n\t\t\tsettings.defaultLayerEnabled = true;\r\n\t\t}\r\n\t\tif (settings.tilingLayerEnabled == null) {\r\n\t\t\tsettings.tilingLayerEnabled = true;\r\n\t\t}\r\n\t\tif (settings.maxOctreeDepth == null) {\r\n\t\t\tsettings.maxOctreeDepth = 5;\r\n\t\t}\r\n\t\tif (settings.fakeLoading == null) {\r\n\t\t\tsettings.fakeLoading = false;\r\n\t\t}\r\n\t\tif (settings.autoResize == null) {\r\n\t\t\tsettings.autoResize = true;\r\n\t\t}\r\n\t\tif (settings.loaderSettings.splitGeometry == null) {\r\n\t\t\tsettings.loaderSettings.splitGeometry = false;\r\n\t\t}\r\n\t\tif (settings.loaderSettings.normalizeUnitsToMM == null) {\r\n\t\t\tsettings.loaderSettings.normalizeUnitsToMM = true;\r\n\t\t}\r\n\t\tif (settings.loaderSettings.useSmallInts == null) {\r\n\t\t\tsettings.loaderSettings.useSmallInts = false;\r\n\t\t}\r\n\t\tif (settings.loaderSettings.reportProgress == null) {\r\n\t\t\tsettings.loaderSettings.reportProgress = false;\r\n\t\t}\r\n\t\tif (settings.viewerBasePath == null) {\r\n\t\t\tsettings.viewerBasePath = \"./\";\r\n\t\t}\r\n\t\tif (settings.autoCombineGpuBuffers == null) {\r\n\t\t\tsettings.autoCombineGpuBuffers = false;\r\n\t\t}\r\n\t\tif (settings.regionSelector == null) {\r\n\t\t\tsettings.regionSelector = (bbs) => {\r\n\t\t\t\treturn Promise.resolve(bbs[0]);\r\n\t\t\t};\r\n\t\t}\r\n\t\tif (settings.loaderSettings.tilingLayerReuse == null) {\r\n\t\t\tsettings.loaderSettings.tilingLayerReuse = true;\r\n\t\t}\r\n\t\tif (settings.loaderSettings.reuseThreshold == null) {\r\n\t\t\tsettings.loaderSettings.reuseThreshold = 25000;\r\n\t\t}\r\n\t\tif (settings.loaderSettings.prepareBuffers == null) {\r\n\t\t\tsettings.loaderSettings.prepareBuffers = true;\r\n\t\t}\r\n\t\tif (settings.realtimeSettings == null) {\r\n\t\t\tsettings.realtimeSettings = {};\r\n\t\t}\r\n\t\tif (settings.realtimeSettings.orderIndependentTransparency == null) {\r\n\t\t\tsettings.realtimeSettings.orderIndependentTransparency = true;\r\n\t\t}\r\n\t\treturn settings;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/defaultsettings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 383,
    "kind": "class",
    "name": "DefaultSettings",
    "memberof": "viewer/defaultsettings.js",
    "static": true,
    "longname": "viewer/defaultsettings.js~DefaultSettings",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/defaultsettings.js",
    "importStyle": "{DefaultSettings}",
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "create",
    "memberof": "viewer/defaultsettings.js~DefaultSettings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/defaultsettings.js~DefaultSettings.create",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "settings",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "file",
    "name": "viewer/eventhandler.js",
    "content": "/**\n * @ignore\n */\nexport class EventHandler {\n    constructor() {\n        this.handlers = {};\n    }\n\n    on(evt, handler) {\n        (this.handlers[evt] || (this.handlers[evt] = [])).push(handler);\n    }\n\n    off() {\n        var h = this.handlers[evt];\n        var found = false;\n        if (typeof(h) !== 'undefined') {\n            var i = h.indexOf(handler);\n            if (i >= -1) {\n                h.splice(i, 1);\n                found = true;\n            }\n        }\n        if (!found) {\n            throw new Error(\"Handler not found\");\n        }\n    }\n\n    fire(evt, ...args) {\n        var h = this.handlers[evt];\n        if (!h) {\n            return;\n        }\n        for (var i = 0; i < h.length; ++i) {\n            h[i].apply(this, ...args);\n        }\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/eventhandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 386,
    "kind": "class",
    "name": "EventHandler",
    "memberof": "viewer/eventhandler.js",
    "static": true,
    "longname": "viewer/eventhandler.js~EventHandler",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/eventhandler.js",
    "importStyle": "{EventHandler}",
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 387,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/eventhandler.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/eventhandler.js~EventHandler#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "handlers",
    "memberof": "viewer/eventhandler.js~EventHandler",
    "static": false,
    "longname": "viewer/eventhandler.js~EventHandler#handlers",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "on",
    "memberof": "viewer/eventhandler.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/eventhandler.js~EventHandler#on",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "off",
    "memberof": "viewer/eventhandler.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/eventhandler.js~EventHandler#off",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "fire",
    "memberof": "viewer/eventhandler.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/eventhandler.js~EventHandler#fire",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 392,
    "kind": "file",
    "name": "viewer/executor.js",
    "content": "/**\r\n * Executor allows to submit jobs for execution. Jobs are queued when the maxJobCount is exceeded.\r\n *\r\n */\r\nexport class Executor {\r\n\tconstructor(maxJobCount) {\r\n\t\tthis.jobCounter = 0;\r\n\t\t\r\n\t\tthis.jobsToDo = {};\r\n\t\tthis.idsToDo = [];\r\n\t\tthis.jobsRunning = {};\r\n\t\tthis.maxJobCount = maxJobCount;\r\n\t\t\r\n\t\tthis.nrRunning = 0;\r\n\t\tthis.jobsDone = 0;\r\n\t}\r\n\t\r\n\tadd(job) {\r\n\t\tjob.id = this.jobCounter++;\r\n\t\tif (this.nrRunning < this.maxJobCount) {\r\n\t\t\treturn this.startJob(job);\r\n\t\t}\r\n\t\tthis.jobsToDo[job.id] = job;\r\n\t\tthis.idsToDo.push(job.id);\r\n\t\treturn job.promise;\r\n\t}\r\n\t\r\n\tjobDone(job) {\r\n\t\tdelete this.jobsRunning[job.id];\r\n\t\tthis.jobsDone++;\r\n\t\tthis.nrRunning--;\r\n\t\tif (this.nrRunning == 0 && this.idsToDo.length == 0) {\r\n\t\t\tthis.done();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.idsToDo.length > 0 && this.nrRunning < this.maxJobCount) {\r\n\t\t\tvar jobId = this.idsToDo.splice(0, 1)[0];\r\n\t\t\tvar job = this.jobsToDo[jobId];\r\n\t\t\tthis.startJob(job);\r\n\t\t}\r\n\t}\r\n\r\n\tupdateProgress() {\r\n\t\tif (this.progressListener != null) {\r\n\t\t\tthis.progressListener(100 * this.jobsDone / this.jobCounter);\r\n\t\t}\r\n\t}\r\n\t\r\n\tstartJob(job) {\r\n\t\tthis.jobsRunning[job.id] = job;\r\n\t\tthis.nrRunning++;\r\n\t\tthis.updateProgress();\r\n\t\tvar r;\r\n\t\tvar newPromise = new Promise((resolve, reject) => {\r\n\t\t\tr = resolve;\r\n\t\t});\r\n\t\tvar p = job.start();\r\n\t\tp.then(() => {\r\n\t\t\tr();\r\n\t\t\tthis.jobDone(job);\r\n\t\t});\r\n\t\treturn newPromise;\r\n\t}\r\n\t\r\n\tdone() {\r\n\t\tif (this.resolve != null) {\r\n\t\t\tthis.resolve();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*\r\n\t * Will fire a promise when all jobs are done, a problem with this atm is that it should fire after all handlers of the tasks its promise have been handled, not sure how to do that\r\n\t */\r\n\tawaitTermination() {\r\n\t\tif (this.terminationPromise == null) {\r\n\t\t\tthis.terminationPromise = new Promise((resolve, reject) => {\r\n\t\t\t\tthis.resolve = resolve;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this.terminationPromise;\r\n\t}\r\n\t\r\n\tsetProgressListener(progressListener) {\r\n\t\tthis.progressListener = progressListener;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/executor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 393,
    "kind": "class",
    "name": "Executor",
    "memberof": "viewer/executor.js",
    "static": true,
    "longname": "viewer/executor.js~Executor",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/executor.js",
    "importStyle": "{Executor}",
    "description": "Executor allows to submit jobs for execution. Jobs are queued when the maxJobCount is exceeded.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 394,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/executor.js~Executor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/executor.js~Executor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "jobCounter",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#jobCounter",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "jobsToDo",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#jobsToDo",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "idsToDo",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#idsToDo",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "jobsRunning",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#jobsRunning",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "maxJobCount",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#maxJobCount",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "nrRunning",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#nrRunning",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "jobsDone",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#jobsDone",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "add",
    "memberof": "viewer/executor.js~Executor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/executor.js~Executor#add",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "job",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "jobDone",
    "memberof": "viewer/executor.js~Executor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/executor.js~Executor#jobDone",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "job",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "updateProgress",
    "memberof": "viewer/executor.js~Executor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/executor.js~Executor#updateProgress",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "startJob",
    "memberof": "viewer/executor.js~Executor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/executor.js~Executor#startJob",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "job",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "done",
    "memberof": "viewer/executor.js~Executor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/executor.js~Executor#done",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "awaitTermination",
    "memberof": "viewer/executor.js~Executor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/executor.js~Executor#awaitTermination",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "terminationPromise",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#terminationPromise",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "resolve",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#resolve",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "setProgressListener",
    "memberof": "viewer/executor.js~Executor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/executor.js~Executor#setProgressListener",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "progressListener",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "progressListener",
    "memberof": "viewer/executor.js~Executor",
    "static": false,
    "longname": "viewer/executor.js~Executor#progressListener",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "file",
    "name": "viewer/fatlinerenderer.js",
    "content": "import {Utils} from './utils.js'\nimport {ProgramManager} from './programmanager.js'\nimport {VERTEX_QUANTIZATION} from './programmanager.js'\nimport {LINE_PRIMITIVES} from './programmanager.js'\n\n/**\n *\n * As you many know, line rendering with thickness is not well-supported in\n * WebGL implementations (mostly due to WebGL implementations on Windows\n * defaulting to emulating OpenGL calls via ANGLE on DirectX 9). Therefore\n * lines are rendered using triangles. This greatly blows up the memory\n * requirements as enough information needs to be passed to expand lines\n * in the vertex shader to a constant thickness. See below:\n * \n * @todo: we should probably see if some of this overhead can be reduced\n *        with drawElementsInstanced() or by cleverly aligning strides and\n *        or offsets.\n * \n * (A,B,-1)                                     (B,A,-1)\n *  +-------------------------------------------------+\n *  |                                                 |\n *  | (A)                                         (B) |\n *  |  +-------------------------------------------+  |\n *  |                                                 |\n *  |                                                 |\n *  +-------------------------------------------------+\n * (A,B,1)                                       (B,A,1)\n * \n */\nexport class FatLineRenderer {\n    constructor(viewer, gl, settings) {\n    \tthis.viewer = viewer;\n\t\tsettings = settings || {};\n\t\tthis.idx = 0;\n        this.gl = gl;\n        this.vertexPosition = Array();\n\t\tthis.nextVertexPosition = Array();\n\t\tthis.direction = Array();\n\t\tthis.indices = Array();\n\t\tthis.quantize = settings.quantize || false;\n\t\tthis.matrixMap = new Map();\n\t\tthis.croid = null;\n    }\n\n    finalize() {\n\t\tconst gl = this.gl;\n\t\tvar indexType = this.indexType = ((this.vertexPosition.length / 3) < 256) ? gl.UNSIGNED_BYTE : gl.UNSIGNED_SHORT;\n        this.setupFunctions = [\"vertexPosition\", \"nextVertexPosition\", \"direction\", \"indices\"].map((bufferName, i) => {\n\t\t\tconst buf = this[bufferName + \"Buffer\"] = gl.createBuffer();\n\t\t\tconst bufType = bufferName === \"indices\" ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n\t\t\t// @todo, somehow just cannot get direction as a byte to work :(\n\t\t\tconst elemType = [this.quantize ? gl.SHORT : gl.FLOAT, this.quantize ? gl.SHORT : gl.FLOAT, gl.FLOAT, indexType][i];\n\t\t\tconst typedArrFn = Utils.glTypeToTypedArray(elemType);\n\t\t\tconst typedArr = new typedArrFn(this[bufferName]);\n\t\t\tconst numElements = bufferName === \"direction\" ? 1 : 3;\n\t\t\t\n\t\t\tgl.bindBuffer(bufType, buf);\n\t\t\tgl.bufferData(bufType, typedArr, this.gl.STATIC_DRAW);\n\n\t\t\treturn (programInfo) => {\n\t\t\t\tgl.bindBuffer(bufType, buf);\n\t\t\t\tif (bufType != gl.ELEMENT_ARRAY_BUFFER) {\n\t\t\t\t\tvar loc = programInfo.attribLocations[bufferName];\n\t\t\t\t\tif (elemType == gl.FLOAT) {\n\t\t\t\t\t\tgl.vertexAttribPointer(loc, numElements, elemType, false, 0, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.vertexAttribIPointer(loc, numElements, elemType, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t\tgl.enableVertexAttribArray(loc);\n\t\t\t\t}\n\t\t\t};\n\t\t});\n    }\n\n    pushVertices(a, b) {\n\t\tArray.prototype.push.apply(this.vertexPosition, a);\n\t\tArray.prototype.push.apply(this.vertexPosition, b);\n\t\tArray.prototype.push.apply(this.vertexPosition, a);\n\t\tArray.prototype.push.apply(this.vertexPosition, b);\n\n\t\tArray.prototype.push.apply(this.nextVertexPosition, b);\n\t\tArray.prototype.push.apply(this.nextVertexPosition, a);\n\t\tArray.prototype.push.apply(this.nextVertexPosition, b);\n\t\tArray.prototype.push.apply(this.nextVertexPosition, a);\n\t\t\n\t\tArray.prototype.push.apply(this.direction, [1,1,-1,-1]);\n\n\t\tArray.prototype.push.apply(this.indices, [0,1,2,1,3,0].map((i)=>{return i+this.idx;}));\n\t\tthis.idx += 4;\n\t}\n\t\n\tgetVertexBuffer() {\n\t\treturn this.vertexPositionBuffer;\n    }\n    \n    // To minimize GPU calls, renderStart and renderStop can (and have to be) used in order to batch-draw a lot of boxes\n\trenderStart(viewer) {\n\t\tvar key = 0;\n\t\tkey |= (this.quantize ? VERTEX_QUANTIZATION : 0);\n\t\tkey |= LINE_PRIMITIVES;\n\t\tvar programInfo = this.programInfo = this.programInfo || this.viewer.programManager.getProgram(key);\n\n\t\tthis.gl.useProgram(programInfo.program);\n\n\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, viewer.camera.projMatrix);\n\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.viewMatrix, false, viewer.camera.viewMatrix);\n\t\tconst aspect = viewer.width / viewer.height;\n\t\tthis.gl.uniform1f(programInfo.uniformLocations.aspect, aspect);\n\n\t\tif (this.quantize) {\n\t\t\tif (this.croid) {\n\t\t\t\t// This is necessary for line renderings of reused geometries.\n\t\t\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.vertexQuantizationMatrix, false, viewer.vertexQuantization.getUntransformedInverseVertexQuantizationMatrixForCroid(this.croid));\n\t\t\t} else {\n\t\t\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.vertexQuantizationMatrix, false, viewer.vertexQuantization.inverseVertexQuantizationMatrixWithGlobalTransformation);\n\t\t\t}\n\t\t}\n\n\t\tfor (const fn of this.setupFunctions) {\n\t\t\tfn(programInfo);\n\t\t}\n\n\t\tthis.first = true;\n\t}\n\t\n\trenderStop() {\n\t\t\n\t}\n\t\n\trender(color, matrix, thickness) {\n\t\tthis.gl.uniform1f(this.programInfo.uniformLocations.thickness, thickness || 0.005);\n\t\tthis.gl.uniformMatrix4fv(this.programInfo.uniformLocations.matrix, false, matrix);\n\t\tthis.gl.uniform4fv(this.programInfo.uniformLocations.inputColor, color);\n\t\tthis.gl.drawElements(this.gl.TRIANGLES, this.indices.length, this.indexType, 0);\n\t}\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/fatlinerenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "class",
    "name": "FatLineRenderer",
    "memberof": "viewer/fatlinerenderer.js",
    "static": true,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/fatlinerenderer.js",
    "importStyle": "{FatLineRenderer}",
    "description": "\nAs you many know, line rendering with thickness is not well-supported in\nWebGL implementations (mostly due to WebGL implementations on Windows\ndefaulting to emulating OpenGL calls via ANGLE on DirectX 9). Therefore\nlines are rendered using triangles. This greatly blows up the memory\nrequirements as enough information needs to be passed to expand lines\nin the vertex shader to a constant thickness. See below:\n\n@todo: we should probably see if some of this overhead can be reduced\n       with drawElementsInstanced() or by cleverly aligning strides and\n       or offsets.\n\n(A,B,-1)                                     (B,A,-1)\n +-------------------------------------------------+\n |                                                 |\n | (A)                                         (B) |\n |  +-------------------------------------------+  |\n |                                                 |\n |                                                 |\n +-------------------------------------------------+\n(A,B,1)                                       (B,A,1)",
    "lineNumber": 30,
    "interface": false
  },
  {
    "__docId__": 414,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "idx",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#idx",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "gl",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#gl",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "vertexPosition",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#vertexPosition",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "nextVertexPosition",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#nextVertexPosition",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "direction",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#direction",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "indices",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#indices",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "quantize",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#quantize",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "matrixMap",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#matrixMap",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "croid",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#croid",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "finalize",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#finalize",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "setupFunctions",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#setupFunctions",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "pushVertices",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#pushVertices",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "getVertexBuffer",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#getVertexBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "renderStart",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#renderStart",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "viewer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "first",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#first",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "renderStop",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#renderStop",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "render",
    "memberof": "viewer/fatlinerenderer.js~FatLineRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/fatlinerenderer.js~FatLineRenderer#render",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "thickness",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 434,
    "kind": "file",
    "name": "viewer/freezableset.js",
    "content": "/**\n * The default ES6 Set() class is rather useless, as it doesn't do\n * proper equality comparison, no use of keys in a Map(), etc.\n * \n * This class is a wrapper around such a Set() but with a `frozen'\n * getter to convert to String for equality testing.\n *\n * @export\n * @class FreezableSet\n */\nexport class FreezableSet {\n    constructor() {\n        this._set = new Set();\n        this._update = true;\n        this._build();\n    }\n\n    _build() {\n        let a = Array.from(this._set);\n        a.sort();\n        this._string = a.join(\",\");\n    }\n\n    get frozen() {\n        return this._string;\n    }\n\n    *[Symbol.iterator]() {\n        yield* this._set;\n    }\n\n    get size() {\n        // Don't know link} from Set.prototype, see if() below\n        return this._set.size;\n    }\n\n    batch(fn) {\n        this._update = false;\n        fn();\n        this._build();\n        this._update = true;\n    }\n}\n\n// Hacks to automatically copy over functions} from Set.prototype\nlet props = Object.getOwnPropertyDescriptors(Set.prototype);\nObject.getOwnPropertyNames(Set.prototype).forEach((name) => {\n    if (!props[name].get) {\n        FreezableSet.prototype[name] = function(...args) {\n            let r = this._set[name](...args);\n            // Rebuild the string representation after every modification\n            if (this._update && name !== 'has') {\n                this._build();\n            }\n            return r;\n        }\n    }\n})\n",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/freezableset.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 435,
    "kind": "class",
    "name": "FreezableSet",
    "memberof": "viewer/freezableset.js",
    "static": true,
    "longname": "viewer/freezableset.js~FreezableSet",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/freezableset.js",
    "importStyle": "{FreezableSet}",
    "description": "The default ES6 Set() class is rather useless, as it doesn't do\nproper equality comparison, no use of keys in a Map(), etc.\n\nThis class is a wrapper around such a Set() but with a `frozen'\ngetter to convert to String for equality testing.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "FreezableSet"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 436,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/freezableset.js~FreezableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/freezableset.js~FreezableSet#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "_set",
    "memberof": "viewer/freezableset.js~FreezableSet",
    "static": false,
    "longname": "viewer/freezableset.js~FreezableSet#_set",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "_update",
    "memberof": "viewer/freezableset.js~FreezableSet",
    "static": false,
    "longname": "viewer/freezableset.js~FreezableSet#_update",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "_build",
    "memberof": "viewer/freezableset.js~FreezableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/freezableset.js~FreezableSet#_build",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 440,
    "kind": "member",
    "name": "_string",
    "memberof": "viewer/freezableset.js~FreezableSet",
    "static": false,
    "longname": "viewer/freezableset.js~FreezableSet#_string",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "get",
    "name": "frozen",
    "memberof": "viewer/freezableset.js~FreezableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/freezableset.js~FreezableSet#frozen",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "viewer/freezableset.js~FreezableSet",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "viewer/freezableset.js~FreezableSet#[Symbol.iterator]",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 443,
    "kind": "get",
    "name": "size",
    "memberof": "viewer/freezableset.js~FreezableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/freezableset.js~FreezableSet#size",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "batch",
    "memberof": "viewer/freezableset.js~FreezableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/freezableset.js~FreezableSet#batch",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 447,
    "kind": "variable",
    "name": "props",
    "memberof": "viewer/freezableset.js",
    "static": true,
    "longname": "viewer/freezableset.js~props",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/freezableset.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 448,
    "kind": "file",
    "name": "viewer/frozenbufferset.js",
    "content": "import {AbstractBufferSet} from \"./abstractbufferset.js\";\nimport {Utils} from \"./utils.js\"\n\n/**\n * @ignore\n */\nexport class FrozenBufferSet extends AbstractBufferSet {\n    constructor(\n    \tviewer,\n        originalBuffer,\n        positionBuffer, normalBuffer, colorBuffer, pickColorBuffer, indexBuffer,\t\t\t\t\n        color, colorHash,\n        nrIndices, nrNormals, nrPositions, nrColors,\n        vao, vaoPick,\n        hasTransparency, reuse, owner, manager, \n\n        // only in case of reuse\n        roid, croid)\n    {\n        super(viewer);\n\n        this.geometryIdToIndex = originalBuffer ? originalBuffer.geometryIdToIndex : null;\n        // @todo make these something like LRU caches?\n        this.visibleRanges = new Map();\n        this.lineIndexBuffers = new Map();\n\n        this.positionBuffer = positionBuffer;\n        this.normalBuffer = normalBuffer;\n        this.colorBuffer = colorBuffer;\n        this.pickColorBuffer = pickColorBuffer;\n        this.indexBuffer = indexBuffer;\n\n        this.color = color;\n        this.colorHash = colorHash;\n\n        this.nrIndices = nrIndices;\n        this.nrNormals = nrNormals;\n        this.nrPositions = nrPositions;\n        this.nrColors = nrColors;\n\n        this.vao = vao;\n        this.vaoPick = vaoPick;\n\n        this.hasTransparency = hasTransparency;\n        this.reuse = reuse;\n        this.owner = owner;\n        this.manager = manager;\n        \n        this.roid = roid;\n        this.croid = croid;\n        this.indexType = indexBuffer.attrib_type;\n\n        this.instanceMatricesBuffer = null;\n        this.instanceNormalMatricesBuffer = null;\n        this.instancePickColorsBuffer = null;\n    }\n\n    // Sets reuse instances\n    setObjects(gl, objects) {\n        this.objects = objects;\n        this.reuse = true;\n        \n        const N = this.nrProcessedMatrices = objects.length;\n\n        var instanceMatrices = new Float32Array(N * 16);\n        var instanceNormalMatrices = new Float32Array(N * 9);\n        var instancePickColors = new Uint8Array(N * 4);\n\n        objects.forEach((object, index) => {\n            instanceMatrices.set(object.matrix, index * 16);\n            instanceNormalMatrices.set(object.normalMatrix, index * 9);\n            instancePickColors.set(this.viewer.getPickColor(object.id), index * 4);\n        });\n        \n        if (this.instanceMatricesBuffer === null) {\n            this.instanceMatricesBuffer = Utils.createBuffer(gl, instanceMatrices, null, null, 16);\n            this.instanceNormalMatricesBuffer = Utils.createBuffer(gl, instanceNormalMatrices, null, null, 9);\n            this.instancePickColorsBuffer = Utils.createBuffer(gl, instancePickColors, null, null, 4);\n        } else {\n            let arrays = [instanceMatrices, instanceNormalMatrices, instancePickColors];\n            let buffers = [this.instanceMatricesBuffer, this.instanceNormalMatricesBuffer, this.instancePickColorsBuffer];\n            var restoreArrayBinding = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n            arrays.forEach(function(a, idx) {\n                let b = buffers[idx];\n                gl.bindBuffer(gl.ARRAY_BUFFER, b);\n                gl.bufferData(gl.ARRAY_BUFFER, a, gl.STATIC_DRAW, 0);             \n            });\n            gl.bindBuffer(gl.ARRAY_BUFFER, restoreArrayBinding);\n        }\n    }\n\n    copyEmpty() {\n        let b = new FrozenBufferSet(\n        \tthis.viewer,\n            null,\n            // multiply\n            this.positionBuffer,\n            this.normalBuffer,\n            this.colorBuffer,\n            this.pickColorBuffer,\n            this.indexBuffer,\n\n            null,\n            null,\n\n            this.indexBuffer.N,\n            this.normalBuffer.N,\n            this.positionBuffer.N,\n            this.colorBuffer.N,\n\n            // vaos\n            null,\n            null,\n\n            this.hasTransparency,\n            this.reuse,\n            this.owner,\n            this.manager,\n\n            this.roid,\n            this.croid\n        );\n        return b;\n    }\n\n    buildVao(gl, settings, programInfo, pickProgramInfo) {\n\n        let bindLocationPairs = (locations) => {\n            for (let [location, buffer] of locations) {\n                gl.bindBuffer(buffer.gl_type, buffer);\n                let fn = buffer.attrib_type == gl.FLOAT\n                    ? gl.vertexAttribPointer\n                    : gl.vertexAttribIPointer;\n                fn.bind(gl)(location, buffer.components, buffer.attrib_type, buffer.normalize, buffer.stride, buffer.offset);\n                gl.enableVertexAttribArray(location);\n            }\n        };\n\n        // Regular drawing VAO\n        var vao = this.vao = gl.createVertexArray();\n        gl.bindVertexArray(vao);\n\n        let locations = [\n            [programInfo.attribLocations.vertexPosition, this.positionBuffer],\n            [programInfo.attribLocations.vertexNormal, this.normalBuffer]\n        ];\n        if (!settings.useObjectColors) {\n            locations.push([programInfo.attribLocations.vertexColor, this.colorBuffer]);\n        }\n        bindLocationPairs(locations);\n\n        if (this.instanceMatricesBuffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceMatricesBuffer);\n            for (let i = 0; i < 4; ++i) {\n                gl.enableVertexAttribArray(programInfo.attribLocations.instanceMatrices + i);\n                gl.vertexAttribPointer(programInfo.attribLocations.instanceMatrices + i, 4, gl.FLOAT, false, 64, 16 * i);\n                gl.vertexAttribDivisor(programInfo.attribLocations.instanceMatrices + i, 1);\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceNormalMatricesBuffer);\n            for (let i = 0; i < 3; ++i) {\n                gl.enableVertexAttribArray(programInfo.attribLocations.instanceNormalMatrices + i);\n                gl.vertexAttribPointer(programInfo.attribLocations.instanceNormalMatrices + i, 3, gl.FLOAT, false, 36, 12 * i);\n                gl.vertexAttribDivisor(programInfo.attribLocations.instanceNormalMatrices + i, 1);\n            }\n\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bindVertexArray(null);\n\n        // Picking VAO\n        var vaoPick = this.vaoPick = gl.createVertexArray();\n        gl.bindVertexArray(vaoPick);\n\n        locations = [[pickProgramInfo.attribLocations.vertexPosition, this.positionBuffer]];\n        if (this.pickColorBuffer) {\n            locations.push([pickProgramInfo.attribLocations.vertexPickColor, this.pickColorBuffer]);\n        }\n        bindLocationPairs(locations);\n\n        if (this.instanceMatricesBuffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.instanceMatricesBuffer);\n            for (let i = 0; i < 4; ++i) {\n                gl.enableVertexAttribArray(pickProgramInfo.attribLocations.instanceMatrices + i);\n                gl.vertexAttribPointer(pickProgramInfo.attribLocations.instanceMatrices + i, 4, gl.FLOAT, false, 64, 16 * i);\n                gl.vertexAttribDivisor(pickProgramInfo.attribLocations.instanceMatrices + i, 1);\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.instancePickColorsBuffer);\n            gl.enableVertexAttribArray(pickProgramInfo.attribLocations.instancePickColors);\n            gl.vertexAttribIPointer(pickProgramInfo.attribLocations.instancePickColors, 4, gl.UNSIGNED_BYTE, false, 0, 0);\n            gl.vertexAttribDivisor(pickProgramInfo.attribLocations.instancePickColors, 1);\n        }\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bindVertexArray(null);\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/frozenbufferset.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 449,
    "kind": "class",
    "name": "FrozenBufferSet",
    "memberof": "viewer/frozenbufferset.js",
    "static": true,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/frozenbufferset.js",
    "importStyle": "{FrozenBufferSet}",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "interface": false,
    "extends": [
      "viewer/abstractbufferset.js~AbstractBufferSet"
    ]
  },
  {
    "__docId__": 450,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 451,
    "kind": "member",
    "name": "geometryIdToIndex",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#geometryIdToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "member",
    "name": "visibleRanges",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#visibleRanges",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "member",
    "name": "lineIndexBuffers",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#lineIndexBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "member",
    "name": "positionBuffer",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#positionBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "member",
    "name": "normalBuffer",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#normalBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "member",
    "name": "colorBuffer",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#colorBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "member",
    "name": "pickColorBuffer",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#pickColorBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "member",
    "name": "indexBuffer",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#indexBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "member",
    "name": "color",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#color",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "member",
    "name": "colorHash",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#colorHash",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "nrIndices",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#nrIndices",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "member",
    "name": "nrNormals",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#nrNormals",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "nrPositions",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#nrPositions",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "nrColors",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#nrColors",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "member",
    "name": "vao",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#vao",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "vaoPick",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#vaoPick",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "member",
    "name": "hasTransparency",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#hasTransparency",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "member",
    "name": "reuse",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#reuse",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "member",
    "name": "owner",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#owner",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "manager",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#manager",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "roid",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#roid",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "member",
    "name": "croid",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#croid",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "indexType",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#indexType",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "member",
    "name": "instanceMatricesBuffer",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#instanceMatricesBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "instanceNormalMatricesBuffer",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#instanceNormalMatricesBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "member",
    "name": "instancePickColorsBuffer",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#instancePickColorsBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "setObjects",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#setObjects",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "objects",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 478,
    "kind": "member",
    "name": "objects",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#objects",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "copyEmpty",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#copyEmpty",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "buildVao",
    "memberof": "viewer/frozenbufferset.js~FrozenBufferSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/frozenbufferset.js~FrozenBufferSet#buildVao",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "settings",
        "types": [
          "*"
        ]
      },
      {
        "name": "programInfo",
        "types": [
          "*"
        ]
      },
      {
        "name": "pickProgramInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 485,
    "kind": "file",
    "name": "viewer/frustum.js",
    "content": "import {FrustumPlane} from './frustumplane.js'\n\nvar tempMat4 = mat4.create();\nvar tempVec3 = vec3.create();\nvar tempVec3b = vec3.create();\n\n/**\n * Frustum for fast World-space frustum-AABB collision testing\n * \n * @export\n * @class Frustum\n */\nexport class Frustum {\n\n    constructor() {\n        this.planes = [ // Allocate now, init when needed\n            new FrustumPlane(),\n            new FrustumPlane(),\n            new FrustumPlane(),\n            new FrustumPlane(),\n            new FrustumPlane(),\n            new FrustumPlane()\n        ];\n    }\n\n    init(viewMatrix, projMatrix) { // Builds frustum planes} from view and projection matrices\n        var m = tempMat4;\n        mat4.multiply(m, projMatrix, viewMatrix);\n        var m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3];\n        var m4 = m[4], m5 = m[5], m6 = m[6], m7 = m[7];\n        var m8 = m[8], m9 = m[9], m10 = m[10], m11 = m[11];\n        var m12 = m[12], m13 = m[13], m14 = m[14], m15 = m[15];\n        this.planes[0].init(m3 - m0, m7 - m4, m11 - m8, m15 - m12);\n        this.planes[1].init(m3 + m0, m7 + m4, m11 + m8, m15 + m12);\n        this.planes[2].init(m3 - m1, m7 - m5, m11 - m9, m15 - m13);\n        this.planes[3].init(m3 + m1, m7 + m5, m11 + m9, m15 + m13);\n        this.planes[4].init(m3 - m2, m7 - m6, m11 - m10, m15 - m14);\n        this.planes[5].init(m3 + m2, m7 + m6, m11 + m10, m15 + m14);\n    }\n\n    // Tests for intersection with World-space AABB, which is assumed to be: [xmin, ymin, zmin, xwidth, ywidth, zwidth]\n    intersectsWorldAABB(minmax) {\n        var result = Frustum.INSIDE_FRUSTUM;\n        var plane = null;\n        var normal;\n        var offset;\n        var testVertex;\n        for (var i = 0; i < 6; ++i) {\n            plane = this.planes[i];\n            normal = plane.normal;\n            offset = plane.offset;\n            testVertex = plane.testVertex;\n            if (((normal[0] * minmax[testVertex[0]][0]) + (normal[1] * minmax[testVertex[1]][1]) + (normal[2] * minmax[testVertex[2]][2]) + (offset)) < 0.0) {\n                return Frustum.OUTSIDE_FRUSTUM;\n            }\n            if (((normal[0] * minmax[1 - testVertex[0]][0]) + (normal[1] * minmax[1 - testVertex[1]][1]) + (normal[2] * minmax[1 - testVertex[2]][2]) + (offset)) < 0.0) {\n                result = Frustum.INTERSECT_FRUSTUM; // May still become OUTSIDE_FRUSTUM\n            }\n        }\n        return result;\n    }\n}\n\nFrustum.OUTSIDE_FRUSTUM = 0;\nFrustum.INTERSECT_FRUSTUM = 1;\nFrustum.INSIDE_FRUSTUM = 2;",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/frustum.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 486,
    "kind": "variable",
    "name": "tempMat4",
    "memberof": "viewer/frustum.js",
    "static": true,
    "longname": "viewer/frustum.js~tempMat4",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/frustum.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 487,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "viewer/frustum.js",
    "static": true,
    "longname": "viewer/frustum.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/frustum.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 488,
    "kind": "variable",
    "name": "tempVec3b",
    "memberof": "viewer/frustum.js",
    "static": true,
    "longname": "viewer/frustum.js~tempVec3b",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/frustum.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 489,
    "kind": "class",
    "name": "Frustum",
    "memberof": "viewer/frustum.js",
    "static": true,
    "longname": "viewer/frustum.js~Frustum",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/frustum.js",
    "importStyle": "{Frustum}",
    "description": "Frustum for fast World-space frustum-AABB collision testing",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Frustum"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 490,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/frustum.js~Frustum#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "planes",
    "memberof": "viewer/frustum.js~Frustum",
    "static": false,
    "longname": "viewer/frustum.js~Frustum#planes",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "init",
    "memberof": "viewer/frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/frustum.js~Frustum#init",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "viewMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "projMatrix",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "intersectsWorldAABB",
    "memberof": "viewer/frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/frustum.js~Frustum#intersectsWorldAABB",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "minmax",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "file",
    "name": "viewer/frustumplane.js",
    "content": "/**\n * @ignore\n */\nexport class FrustumPlane {\n\n    constructor(nx = 0, ny = 0, nz = 1, offset = 1.0) {\n\n        this.normal = vec3.create();\n        this.testVertex = vec3.create();\n        this.offset = 0;\n\n        this.init(nx, ny, nz, offset);\n    }\n\n    init(nx = 0, ny = 0, nz = 1, offset = 1.0) {\n\n        var s = 1.0 / Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n        this.normal[0] = nx * s;\n        this.normal[1] = ny * s;\n        this.normal[2] = nz * s;\n\n        this.offset = offset * s;\n\n        this.testVertex[0] = this.normal[0] >= 0.0 ? 1 : 0;\n        this.testVertex[1] = this.normal[1] >= 0.0 ? 1 : 0;\n        this.testVertex[2] = this.normal[2] >= 0.0 ? 1 : 0;\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/frustumplane.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 495,
    "kind": "class",
    "name": "FrustumPlane",
    "memberof": "viewer/frustumplane.js",
    "static": true,
    "longname": "viewer/frustumplane.js~FrustumPlane",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/frustumplane.js",
    "importStyle": "{FrustumPlane}",
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 496,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/frustumplane.js~FrustumPlane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/frustumplane.js~FrustumPlane#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 497,
    "kind": "member",
    "name": "normal",
    "memberof": "viewer/frustumplane.js~FrustumPlane",
    "static": false,
    "longname": "viewer/frustumplane.js~FrustumPlane#normal",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 498,
    "kind": "member",
    "name": "testVertex",
    "memberof": "viewer/frustumplane.js~FrustumPlane",
    "static": false,
    "longname": "viewer/frustumplane.js~FrustumPlane#testVertex",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "member",
    "name": "offset",
    "memberof": "viewer/frustumplane.js~FrustumPlane",
    "static": false,
    "longname": "viewer/frustumplane.js~FrustumPlane#offset",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "init",
    "memberof": "viewer/frustumplane.js~FrustumPlane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/frustumplane.js~FrustumPlane#init",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "nx",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "ny",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "nz",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      },
      {
        "name": "offset",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 502,
    "kind": "file",
    "name": "viewer/geometrycache.js",
    "content": "/**\r\n * Keeps track of GeometryData that is potentially reused. There are three fases:\r\n * - toload (this data has yet to start loading)\r\n * - loading (data has been requested} from the server but not yet returned)\r\n * - loaded (data has arrived and is processed)\r\n */\r\nexport class GeometryCache {\r\n\tconstructor(renderLayer) {\r\n\t\tthis.renderLayer = renderLayer;\r\n\t\t\r\n\t\t// GeometryData ID -> geometry\r\n\t\tthis.loaded = new Map();\r\n\r\n\t\t// GeometryData ID -> Set of GeometryLoader\r\n\t\tthis.toload = new Map();\r\n\r\n\t\t// GeometryData ID -> Set of GeometryLoader\r\n\t\tthis.loading = new Map();\r\n\t}\r\n\r\n\tintegrate2(geometryDataId, loader, gpuBufferManager, geometryInfoIds, geometryLoader) {\r\n\t\tvar info = {\r\n\t\t\tloader: loader,\r\n\t\t\tgpuBufferManager: gpuBufferManager,\r\n\t\t\tgeometryInfoIds: geometryInfoIds,\r\n\t\t\tgeometryLoader: geometryLoader\r\n\t\t};\r\n\t\tif (this.loaded.has(geometryDataId)) {\r\n\t\t\tfor (const geometryInfoId of geometryInfoIds) {\r\n\t\t\t\tthis.renderLayer.addGeometryToObject(geometryDataId, geometryInfoId, info.loader, info.gpuBufferManager);\r\n\t\t\t}\r\n\t\t\tinfo.geometryLoader.geometryDataIdResolved(geometryDataId);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.loading.has(geometryDataId)) {\r\n\t\t\tvar set = this.loading.get(geometryDataId);\r\n\t\t\tset.add(info);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar set = this.toload.get(geometryDataId);\r\n\t\tif (set == null) {\r\n\t\t\tset = new Set();\r\n\t\t\tthis.toload.set(geometryDataId, set);\r\n\t\t}\r\n\t\tset.add(info);\r\n\t}\r\n\t\r\n\t/*\r\n\t * Calling this method will either:\r\n\t * - Store the geometryDataId as toload if it's not already loaded and also not loading\r\n\t * - If the geometryDataId is already loading, it will add the given `info` to the list to be triggered when it is loaded\r\n\t * - If it's already loaded, the addGeometryToObject will be triggered right away\r\n\t */\r\n\tintegrate(geometryDataId, info) {\r\n\t\tif (this.loaded.has(geometryDataId)) {\r\n\t\t\tthis.renderLayer.addGeometryToObject(geometryDataId, info.geometryInfoId, info.loader, info.gpuBufferManager);\r\n\t\t\tinfo.geometryLoader.geometryDataIdResolved(geometryDataId);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.loading.has(geometryDataId)) {\r\n\t\t\tvar set = this.loading.get(geometryDataId);\r\n\t\t\tset.add(info);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar set = this.toload.get(geometryDataId);\r\n\t\tif (set == null) {\r\n\t\t\tset = new Set();\r\n\t\t\tthis.toload.set(geometryDataId, set);\r\n\t\t}\r\n\t\tset.add(info);\r\n\t}\r\n\t\r\n\t/*\r\n\t * Whenever this method is called, all objects in the toload state are moved to the loading state. The IDs of the objecst are returned as an array\r\n\t */\r\n\tpullToLoad() {\r\n\t\tvar ids = Array.from(this.toload.keys());\r\n\t\tfor (var id of ids) {\r\n\t\t\tthis.loading.set(id, this.toload.get(id));\r\n\t\t\tthis.toload.delete(id);\r\n\t\t}\r\n\t\treturn ids;\r\n\t}\r\n\r\n\thas(geometryDataId) {\r\n\t\treturn this.loaded.has(geometryDataId);\r\n\t}\r\n\t\r\n\tget(geometryDataId) {\r\n\t\treturn this.loaded.get(geometryDataId);\r\n\t}\r\n\r\n\t/*\r\n\t * Stores a piece of geometry\r\n\t */\r\n\tset(geometryDataId, geometry) {\r\n\t\tif (this.loaded.has(geometryDataId)) {\r\n\t\t\tconsole.error(\"Already loaded\", geometryDataId);\r\n\t\t}\r\n\t\tthis.loaded.set(geometryDataId, geometry);\r\n\t\tvar geometryInfos = this.loading.get(geometryDataId);\r\n\t\tif (geometryInfos != null) {\r\n\t\t\tfor (var info of geometryInfos.values()) {\r\n\t\t\t\tfor (const geometryInfoId of info.geometryInfoIds) {\r\n\t\t\t\t\tthis.renderLayer.addGeometryToObject(geometryDataId, geometryInfoId, info.loader, info.gpuBufferManager);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// TODO in a lot of cases, this is 4000x the same geomtryLoader, which after 1 invocation has already cleaned-up...\r\n\t\t\tfor (var info of geometryInfos.values()) {\r\n\t\t\t\tinfo.geometryLoader.geometryDataIdResolved(geometryDataId);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.loading.delete(geometryDataId);\r\n\t}\r\n\t\r\n\tisEmpty() {\r\n\t\treturn this.toload.size == 0;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/geometrycache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 503,
    "kind": "class",
    "name": "GeometryCache",
    "memberof": "viewer/geometrycache.js",
    "static": true,
    "longname": "viewer/geometrycache.js~GeometryCache",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/geometrycache.js",
    "importStyle": "{GeometryCache}",
    "description": "Keeps track of GeometryData that is potentially reused. There are three fases:\n- toload (this data has yet to start loading)\n- loading (data has been requested} from the server but not yet returned)\n- loaded (data has arrived and is processed)",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 504,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 505,
    "kind": "member",
    "name": "renderLayer",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#renderLayer",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "member",
    "name": "loaded",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#loaded",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 507,
    "kind": "member",
    "name": "toload",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#toload",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 508,
    "kind": "member",
    "name": "loading",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#loading",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "integrate2",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#integrate2",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "geometryDataId",
        "types": [
          "*"
        ]
      },
      {
        "name": "loader",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryInfoIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryLoader",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "integrate",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#integrate",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "geometryDataId",
        "types": [
          "*"
        ]
      },
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "pullToLoad",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#pullToLoad",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "has",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#has",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "geometryDataId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "get",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#get",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "geometryDataId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "set",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#set",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "geometryDataId",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "viewer/geometrycache.js~GeometryCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometrycache.js~GeometryCache#isEmpty",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 516,
    "kind": "file",
    "name": "viewer/geometryloader.js",
    "content": "import {DataInputStream} from \"./datainputstream.js\"\r\nimport {DefaultColors} from \"./defaultcolors.js\"\r\nimport {RenderLayer} from \"./renderlayer.js\"\r\nimport {Utils} from \"./utils.js\"\r\n\r\n/**\r\n * GeometryLoader loads data} from a BIMserver\r\n */\r\nexport class GeometryLoader {\r\n\r\n\tconstructor(loaderId, bimServerApi, renderLayer, roids, loaderSettings, vertexQuantizationMatrices, stats, settings, query, geometryCache, gpuBufferManager) {\r\n\t\tthis.renderLayer = renderLayer;\r\n\t\tthis.settings = settings;\r\n\t\t\r\n\t\tthis.query = query;\r\n\t\tthis.loaderSettings = loaderSettings;\r\n\r\n\t\tthis.loaderId = loaderId;\r\n\t\tthis.bimServerApi = bimServerApi;\r\n\t\tthis.roids = roids;\r\n\t\tthis.vertexQuantizationMatrices = vertexQuantizationMatrices;\r\n\t\tthis.stats = stats;\r\n\t\tthis.geometryCache = geometryCache;\r\n\r\n\t\tthis.state = {};\r\n\t\tthis.objectAddedListeners = [];\r\n\t\tthis.prepareReceived = false;\r\n\t\tthis.geometryIds = new Map();\r\n\t\tthis.dataToInfo = new Map();\r\n\t\t\r\n\t\tthis.gpuBufferManager = gpuBufferManager;\r\n\r\n\t\tif (query.loaderSettings.prepareBuffers) {\r\n\t\t\tthis.createdTransparentObjects = new Map(); // object id -> object info\r\n\t\t\tthis.createdOpaqueObjects = new Map(); // object id -> object info\r\n\t\t}\r\n\t\t\r\n\t\tthis.promise = new Promise((resolve, reject) => {\r\n\t\t\tthis.resolve = resolve;\r\n\t\t});\r\n\t}\r\n\t\r\n\t// This promise is fired as soon as the GeometryLoader is done\r\n\tgetPromise() {\r\n\t\treturn promise;\r\n\t}\r\n\r\n\tstart() {\r\n\t\tif (this.onStart != null) {\r\n\t\t\tthis.onStart();\r\n\t\t}\r\n\t\tvar obj = [];\r\n\t\t\r\n\t\tvar loaderSettings = JSON.parse(JSON.stringify(this.loaderSettings));\r\n\t\tif (this.vertexQuantizationMatrices != null) {\r\n\t\t\tthis.query.loaderSettings.vertexQuantizationMatrices = this.vertexQuantizationMatrices;\r\n\t\t}\r\n\r\n\t\tthis.bimServerApi.getSerializerByPluginClassName(\"org.bimserver.serializers.binarygeometry.BinaryGeometryMessagingStreamingSerializerPlugin\").then((serializer) => {\r\n\t\t\tthis.bimServerApi.callWithWebsocket(\"ServiceInterface\", \"download\", {\r\n\t\t\t\troids: this.roids,\r\n\t\t\t\tquery: JSON.stringify(this.query),\r\n\t\t\t\tserializerOid : serializer.oid,\r\n\t\t\t\tsync : false\r\n\t\t\t}).then((topicId) => {\r\n\t\t\t\tthis.topicId = topicId;\r\n\t\t\t\t\r\n\t\t\t\tthis.state = {\r\n\t\t\t\t\tmode: 0,\r\n\t\t\t\t\tnrObjectsRead: 0,\r\n\t\t\t\t\tnrObjects: 0\r\n\t\t\t\t};\r\n\t\t\t\tvar msg = {\r\n\t\t\t\t\ttopicId: this.topicId\r\n\t\t\t\t};\r\n\t\t\t\tthis.bimServerApi.setBinaryDataListener(this.topicId, (data) => {\r\n\t\t\t\t\tthis.binaryDataListener(data);\r\n\t\t\t\t});\r\n\t\t\t\tthis.bimServerApi.downloadViaWebsocket(msg);\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn this.promise;\r\n\t}\r\n\r\n\tprocessMessage(stream) {\r\n\t\tvar messageType = stream.readByte();\r\n\t\t\r\n\t\tif (messageType == 0) {\r\n\t\t\tthis.readStart(stream);\r\n\t\t} else if (messageType == 6) {\r\n\t\t\tthis.readEnd(stream);\r\n\t\t} else {\r\n\t\t\tthis.readObject(stream, messageType);\r\n\t\t}\r\n\t\tstream.align8();\r\n\t\treturn stream.remaining() > 0;\r\n\t}\r\n\t\r\n\tbinaryDataListener(data) {\r\n\t\tthis.stats.inc(\"Network\", \"Bytes OTL\", data.byteLength);\r\n\t\tvar stream = new DataInputStream(data);\r\n\t\tvar channel = stream.readLong();\r\n\r\n\t\twhile (this.processMessage(stream)) {\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\treadEnd(data) {\r\n\t\tif (this.dataToInfo.size > 0) {\r\n\t\t\t// We need to tell the renderlayer that not all data has been loaded\r\n\t\t\tthis.renderLayer.storeMissingGeometry(this, this.dataToInfo);\r\n\t\t}\r\n//\t\tconsole.log(this.dataToInfo);\r\n\r\n//\t\tthis.viewer.loadingDone();\r\n\t\tthis.bimServerApi.callWithWebsocket(\"ServiceInterface\", \"cleanupLongAction\", {topicId: this.topicId});\r\n\t\tthis.bimServerApi.clearBinaryDataListener(this.topicId);\r\n\t\tif (this.dataToInfo.size == 0) {\r\n\t\t\t// Only resolve (and cleanup this loader) when all has been loaded\r\n\t\t\tthis.resolve();\r\n\t\t}\r\n\t}\r\n\t\r\n\tgeometryDataIdResolved(geometryDataId) {\r\n\t\tthis.dataToInfo.delete(geometryDataId);\r\n\t\tif (this.dataToInfo.size == 0) {\r\n\t\t\t// Only resolve (and cleanup this loader) when all has been loaded\r\n\t\t\tthis.resolve();\r\n\t\t}\r\n\t}\r\n\r\n\treadStart(data) {\r\n\t\tvar start = data.readUTF8();\r\n\r\n\t\tif (start != \"BGS\") {\r\n\t\t\tconsole.error(\"data does not start with BGS (\" + start + \")\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.protocolVersion = data.readByte();\r\n\r\n\t\tif (this.protocolVersion != 17) {\r\n\t\t\tconsole.error(\"Unimplemented version\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.multiplierToMm = data.readFloat();\r\n\t\tdata.align8();\r\n\r\n\t\tvar boundary = data.readDoubleArray(6);\r\n\r\n\t\tthis.state.mode = 1;\r\n\t}\r\n\r\n\treadObject(stream, geometryType) {\r\n\t\tvar geometryId;\r\n\t\tvar numGeometries;\r\n\t\tvar numParts;\r\n\t\tvar objectBounds;\r\n\t\tvar numIndices;\r\n\t\tvar indices;\r\n\t\tvar numPositions;\r\n\t\tvar positions;\r\n\t\tvar numNormals;\r\n\t\tvar normals;\r\n\t\tvar numColors;\r\n\t\tvar colors = null;\r\n\r\n\t\tif (geometryType == 1) {\r\n\t\t\t// Geometry\r\n\t\t\tvar reused = stream.readInt();\r\n\t\t\tvar type = stream.readUTF8();\r\n\t\t\tstream.align8();\r\n\t\t\tvar roid = stream.readLong();\r\n\t\t\tvar croid = stream.readLong();\r\n\t\t\tvar hasTransparency = stream.readLong() == 1;\r\n\t\t\tvar geometryDataId = stream.readLong();\r\n\t\t\tthis.readGeometry(stream, roid, croid, geometryDataId, geometryDataId, hasTransparency, reused, type, true);\r\n\t\t\tif (this.dataToInfo.has(geometryDataId)) {\r\n\t\t\t\t// There are objects that have already been loaded, that are waiting for this GeometryData\r\n\t\t\t\tvar oids = this.dataToInfo.get(geometryDataId);\r\n\t\t\t\tfor (var oid of oids) {\r\n\t\t\t\t\tvar ob = this.renderLayer.getObject(this.loaderId, oid);\r\n\t\t\t\t\tif (ob == null) {\r\n\t\t\t\t\t\tconsole.error(\"Object with oid not found\", oid)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tob.add(geometryDataId, oid);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Now we can clean it up, nobody is waiting anymore\r\n\t\t\t\tthis.dataToInfo.delete(geometryDataId);\r\n\t\t\t}\r\n\t\t} else if (geometryType == 5) {\r\n\t\t\t// Object\r\n\t\t\tvar inPreparedBuffer = stream.readByte() == 1;\r\n\t\t\tvar oid = stream.readLong();\r\n\t\t\tvar type = stream.readUTF8();\r\n\t\t\tvar nrColors = stream.readInt();\r\n\t\t\tstream.align8();\r\n\t\t\tvar roid = stream.readLong();\r\n\t\t\tvar geometryInfoOid = stream.readLong();\r\n\t\t\tvar hasTransparency = stream.readLong() == 1;\r\n\r\n\t\t\t// Making copies here because otherwise we are potentially referring to very big buffers for as long as the viewer lives\r\n\t\t\tvar objectBounds = stream.readDoubleArrayCopy(6);\r\n\t\t\tvar matrix = stream.readDoubleArrayCopy(16);\r\n\t\t\t\r\n\t\t\tvar geometryDataOid = stream.readLong();\r\n\t\t\tvar geometryDataOidFound = geometryDataOid;\r\n\t\t\tif (inPreparedBuffer) {\r\n\t\t\t\tif (hasTransparency) {\r\n\t\t\t\t\tthis.createdTransparentObjects.set(oid, {\r\n\t\t\t\t\t\tnrColors: nrColors,\r\n\t\t\t\t\t\ttype: type\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.createdOpaqueObjects.set(oid, {\r\n\t\t\t\t\t\tnrColors: nrColors,\r\n\t\t\t\t\t\ttype: type\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!inPreparedBuffer) {\r\n\t\t\t\tif (!this.geometryIds.has(geometryDataOid)) {\r\n\t\t\t\t\tif (this.geometryCache != null && this.geometryCache.has(geometryDataOid)) {\r\n\t\t\t\t\t\t// We know it's cached\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tgeometryDataOidFound = null;\r\n\t\t\t\t\t\t// We don't have the data yet, it might come in this stream, or maybe in a later stream\r\n\t\t\t\t\t\tvar list = this.dataToInfo.get(geometryDataOid);\r\n\t\t\t\t\t\tif (list == null) {\r\n\t\t\t\t\t\t\tlist = [oid];\r\n\t\t\t\t\t\t\tthis.dataToInfo.set(geometryDataOid, list);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tlist.push(oid);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tgeometryDataOidFound = null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.createObject(roid, oid, oid, geometryDataOidFound == null ? [] : [geometryDataOidFound], matrix, hasTransparency, type, objectBounds, inPreparedBuffer);\r\n\t\t} else if (geometryType == 9) {\r\n\t\t\t// Minimal object\r\n\t\t\tvar oid = stream.readLong();\r\n\t\t\tvar type = stream.readUTF8();\r\n\t\t\tvar nrColors = stream.readInt();\r\n\t\t\tvar roid = stream.readLong();\r\n\t\t\tvar geometryInfoOid = stream.readLong();\r\n\t\t\tvar hasTransparency = stream.readLong() == 1;\r\n\t\t\t\r\n\t\t\tstream.align8();\r\n\t\t\tvar objectBounds = stream.readDoubleArrayCopy(6);\r\n\r\n\t\t\tvar geometryDataOid = stream.readLong();\r\n\t\t\tvar geometryDataOidFound = geometryDataOid;\r\n\t\t\tif (hasTransparency) {\r\n\t\t\t\tthis.createdTransparentObjects.set(oid, {\r\n\t\t\t\t\tnrColors: nrColors,\r\n\t\t\t\t\ttype: type\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.createdOpaqueObjects.set(oid, {\r\n\t\t\t\t\tnrColors: nrColors,\r\n\t\t\t\t\ttype: type\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.createObject(roid, oid, oid, [], null, hasTransparency, type, objectBounds, true);\r\n\t\t} else if (geometryType == 7) {\r\n\t\t\tthis.processPreparedBuffer(stream, true);\r\n\t\t} else if (geometryType == 8) {\r\n\t\t\tthis.processPreparedBuffer(stream, false);\r\n\t\t} else if (geometryType == 10) {\r\n\t\t\tthis.processPreparedBufferInit(stream, true);\r\n\t\t} else if (geometryType == 11) {\r\n\t\t\tthis.processPreparedBufferInit(stream, false);\r\n\t\t} else {\r\n\t\t\tconsole.error(\"Unsupported geometry type: \" + geometryType);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.state.nrObjectsRead++;\r\n\t}\r\n\r\n\tprocessPreparedBufferInit(stream, hasTransparancy) {\r\n\t\tthis.preparedBuffer = {};\r\n\r\n\t\tthis.preparedBuffer.nrObjects = stream.readInt();\r\n\t\tthis.preparedBuffer.nrIndices = stream.readInt();\r\n\t\tthis.preparedBuffer.positionsIndex = stream.readInt();\r\n\t\tthis.preparedBuffer.normalsIndex = stream.readInt();\r\n\t\tthis.preparedBuffer.colorsIndex = stream.readInt();\r\n\t\t\r\n\t\tthis.preparedBuffer.nrObjectsRead = 0;\r\n\t\t\r\n\t\tthis.preparedBuffer.nrColors = this.preparedBuffer.positionsIndex * 4 / 3;\r\n\r\n\t\tthis.preparedBuffer.indices = Utils.createEmptyBuffer(this.renderLayer.gl, this.preparedBuffer.nrIndices, this.renderLayer.gl.ELEMENT_ARRAY_BUFFER, 3, WebGL2RenderingContext.UNSIGNED_INT, \"Uint32Array\");\r\n\t\tthis.preparedBuffer.colors = Utils.createEmptyBuffer(this.renderLayer.gl, this.preparedBuffer.nrColors, this.renderLayer.gl.ARRAY_BUFFER, 4, WebGL2RenderingContext.UNSIGNED_BYTE, \"Uint8Array\");\r\n\t\tthis.preparedBuffer.vertices = Utils.createEmptyBuffer(this.renderLayer.gl, this.preparedBuffer.positionsIndex, this.renderLayer.gl.ARRAY_BUFFER, 3, this.loaderSettings.quantizeVertices ? WebGL2RenderingContext.SHORT : WebGL2RenderingContext.FLOAT, this.loaderSettings.quantizeVertices ? \"Int16Array\" : \"Float32Array\");\r\n\t\tthis.preparedBuffer.normals = Utils.createEmptyBuffer(this.renderLayer.gl, this.preparedBuffer.normalsIndex, this.renderLayer.gl.ARRAY_BUFFER, 3, WebGL2RenderingContext.BYTE, \"Int8Array\");\r\n\t\tthis.preparedBuffer.pickColors = Utils.createEmptyBuffer(this.renderLayer.gl, this.preparedBuffer.nrColors, this.renderLayer.gl.ARRAY_BUFFER, 4, WebGL2RenderingContext.UNSIGNED_BYTE, \"Uint8Array\");\r\n\t\tthis.preparedBuffer.pickColors = Utils.createEmptyBuffer(this.renderLayer.gl, this.preparedBuffer.nrColors, this.renderLayer.gl.ARRAY_BUFFER, 4, WebGL2RenderingContext.UNSIGNED_BYTE, \"Uint8Array\");\r\n\t\t\r\n\t\tthis.preparedBuffer.geometryIdToIndex = new Map();\r\n\t\tthis.preparedBuffer.geometryIdToMeta = new Map();\r\n\r\n\t\tthis.preparedBuffer.loaderId = this.loaderId;\r\n\t\tthis.preparedBuffer.hasTransparency = hasTransparancy;\r\n\t\t\r\n\t\tif (this.loaderSettings.quantizeVertices) {\r\n\t\t\tthis.preparedBuffer.unquantizationMatrix = this.unquantizationMatrix;\r\n\t\t}\r\n\r\n\t\tthis.preparedBuffer.bytes = RenderLayer.calculateBytesUsed(this.settings, this.preparedBuffer.positionsIndex, this.preparedBuffer.nrColors, this.preparedBuffer.nrIndices, this.preparedBuffer.normalsIndex);\r\n\t\t\r\n\t\tstream.align8();\r\n\t}\r\n\t\r\n\tprocessPreparedBuffer(stream, hasTransparancy) {\r\n\t\tconst nrObjects = stream.readInt();\r\n\t\tconst totalNrIndices = stream.readInt();\r\n\t\tconst positionsIndex = stream.readInt();\r\n\t\tconst normalsIndex = stream.readInt();\r\n\t\tconst colorsIndex = stream.readInt();\r\n\t\t\r\n\t\tif (this.preparedBuffer.nrIndices == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst previousStartIndex = this.preparedBuffer.indices.writePosition / 4;\r\n\t\tUtils.updateBuffer(this.renderLayer.gl, this.preparedBuffer.indices, stream.dataView, stream.pos, totalNrIndices);\r\n\t\tstream.pos += totalNrIndices * 4;\r\n\t\t\r\n\t\tvar nrColors = positionsIndex * 4 / 3;\r\n\t\tvar colors = new Uint8Array(nrColors);\r\n\t\tvar colors32 = new Uint32Array(colors.buffer);\r\n\t\tvar createdObjects = null;\r\n\t\t\r\n\t\tif (hasTransparancy) {\r\n\t\t\tcreatedObjects = this.createdTransparentObjects;\r\n\t\t} else {\r\n\t\t\tcreatedObjects = this.createdOpaqueObjects;\r\n\t\t}\r\n\t\t\r\n\t\tvar currentColorIndex = 0;\r\n\t\tvar tmpOids = new Set();\r\n\t\tfor (var i=0; i<nrObjects; i++) {\r\n\t\t\tvar oid = stream.readLong();\r\n\t\t\ttmpOids.add(oid);\r\n\t\t\tvar startIndex = stream.readInt();\r\n\t\t\tvar nrIndices = stream.readInt();\r\n\t\t\tvar nrVertices = stream.readInt();\r\n\t\t\tvar nrObjectColors = nrVertices / 3 * 4;\r\n\t\t\t\r\n\t\t\tconst density = stream.readFloat();\r\n\r\n\t\t\tvar colorPackSize = stream.readInt();\r\n\t\t\tvar object = createdObjects.get(oid);\r\n\t\t\tobject.density = density;\r\n\t\t\tvar type = object.type;\r\n\t\t\t\r\n\t\t\tconst meta = {\r\n\t\t\t\tstart: previousStartIndex + startIndex,\r\n\t\t\t\tlength: nrIndices,\r\n\t\t\t\tcolor: currentColorIndex,\r\n\t\t\t\tcolorLength: nrObjectColors\r\n\t\t\t};\r\n\t\t\tthis.preparedBuffer.geometryIdToMeta.set(oid, [meta]);\r\n\t\t\t\r\n\t\t\tif (colorPackSize == 0) {\r\n\t\t\t\t// Generate default colors for this object\r\n\t\t\t\tvar defaultColor = DefaultColors[type];\r\n\t\t\t\tif (defaultColor == null) {\r\n\t\t\t\t\tdefaultColor = DefaultColors.DEFAULT;\r\n\t\t\t\t}\r\n\t\t\t\tif (defaultColor.asInt == null) {\r\n\t\t\t\t\t// Cache the integer version\r\n\t\t\t\t\tvar color = new Uint8Array(4);\r\n\t\t\t\t\tcolor[0] = defaultColor.r * 255;\r\n\t\t\t\t\tcolor[1] = defaultColor.g * 255;\r\n\t\t\t\t\tcolor[2] = defaultColor.b * 255;\r\n\t\t\t\t\tcolor[3] = defaultColor.a * 255;\r\n\t\t\t\t\tdefaultColor.asInt = color[0] + color[1] * 256 + color[2] * 65536 + color[3] * 16777216;\r\n\t\t\t\t}\r\n\t\t\t\tcolors32.fill(defaultColor.asInt, currentColorIndex / 4, (currentColorIndex + nrObjectColors) / 4);\r\n\t\t\t\tcurrentColorIndex += nrObjectColors;\r\n\t\t\t}\r\n\t\t\tfor (var j=0; j<colorPackSize; j++) {\r\n\t\t\t\tvar count = stream.readInt();\r\n\t\t\t\tvar color = stream.readUnsignedByteArray(4);\r\n\t\t\t\tvar color32 = color[0] + color[1] * 256 + color[2] * 65536 + color[3] * 16777216;\r\n\t\t\t\tcolors32.fill(color32, (currentColorIndex / 4), (currentColorIndex + count) / 4);\r\n\t\t\t\tcurrentColorIndex += count;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.preparedBuffer.geometryIdToIndex.set(oid, previousStartIndex + startIndex);\r\n\t\t}\r\n\t\tif (currentColorIndex != nrColors) {\r\n\t\t\tconsole.error(currentColorIndex, nrColors);\r\n\t\t}\r\n\t\tUtils.updateBuffer(this.renderLayer.gl, this.preparedBuffer.colors, colors, 0, nrColors);\r\n\r\n\t\tif (this.loaderSettings.quantizeVertices) {\r\n\t\t\tUtils.updateBuffer(this.renderLayer.gl, this.preparedBuffer.vertices, stream.dataView, stream.pos, positionsIndex);\r\n\t\t\tstream.pos += positionsIndex * 2;\r\n\t\t} else {\r\n\t\t\tUtils.updateBuffer(this.renderLayer.gl, this.preparedBuffer.vertices, stream.dataView, stream.pos, positionsIndex);\r\n\t\t\tstream.pos += positionsIndex * 4;\r\n\t\t}\r\n\t\tUtils.updateBuffer(this.renderLayer.gl, this.preparedBuffer.normals, stream.dataView, stream.pos, normalsIndex);\r\n\t\tstream.pos += normalsIndex;\r\n\t\t\r\n\t\tvar pickColors = new Uint8Array(positionsIndex * 4);\r\n\t\tvar pickColors32 = new Uint32Array(pickColors.buffer);\r\n\t\tpickColors.i = 0;\r\n\r\n\t\tfor (var [oid, objectInfo] of createdObjects) {\r\n\t\t\tif (tmpOids.has(oid)) {\r\n\t\t\t\tvar pickColor = this.renderLayer.viewer.getPickColor(oid);\r\n\t\t\t\tvar color32 = pickColor[0] + pickColor[1] * 256 + pickColor[2] * 256 * 256 + pickColor[3] * 256 * 256 * 256;\r\n\t\t\t\tvar lenObjectPickColors = objectInfo.nrColors;\r\n\t\t\t\tpickColors32.fill(color32, pickColors.i / 4, (pickColors.i + lenObjectPickColors) / 4);\r\n\t\t\t\tpickColors.i += lenObjectPickColors;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tUtils.updateBuffer(this.renderLayer.gl, this.preparedBuffer.pickColors, pickColors, 0, pickColors.i);\r\n\t\t\r\n\t\tthis.preparedBuffer.nrObjectsRead += nrObjects;\r\n\t\tif (this.preparedBuffer.nrObjectsRead == this.preparedBuffer.nrObjects) {\r\n\t\t\tthis.renderLayer.addCompleteBuffer(this.preparedBuffer, this.gpuBufferManager);\r\n\t\t}\r\n\t\t\r\n\t\tstream.align8();\r\n\t}\r\n\r\n\treadGeometry(stream, roid, croid, geometryId, geometryDataOid, hasTransparency, reused, type, useIntForIndices) {\r\n\t\tvar numIndices = stream.readInt();\r\n\t\tif (useIntForIndices) {\r\n\t\t\tvar indices = stream.readIntArray(numIndices);\r\n\t\t} else {\r\n\t\t\tvar indices = stream.readShortArray(numIndices);\r\n\t\t}\r\n\t\tvar color = this.readColors(stream, type);\r\n\t\tvar numPositions = stream.readInt();\r\n\t\tif (this.loaderSettings.quantizeVertices) {\r\n\t\t\tvar positions = stream.readShortArray(numPositions);\r\n\t\t\tstream.align8();\r\n\t\t} else {\r\n\t\t\tvar positions = stream.readFloatArray(numPositions);\r\n\t\t}\r\n\t\tvar numNormals = stream.readInt();\r\n\t\tif (this.loaderSettings.quantizeNormals) {\r\n\t\t\tvar normals = stream.readByteArray(numNormals);\r\n\t\t\tstream.align8();\r\n\t\t} else {\r\n\t\t\tvar normals = stream.readFloatArray(numNormals);\r\n\t\t}\r\n\t\tvar numColors = stream.readInt();\r\n\t\tif (numColors > 0) {\r\n\t\t\tif (this.loaderSettings.quantizeColors) {\r\n\t\t\t\tvar colors = stream.readUnsignedByteArray(numColors);\r\n\t\t\t} else {\r\n\t\t\t\tvar colors = stream.readFloatArray(numColors);\r\n\t\t\t}\r\n\t\t} else if (color != null && !this.settings.useObjectColors) {\r\n\t\t\t// When we are generating this data anyways, we might as well make sure it ends up in the format required by the GPU\r\n\t\t\tif (this.settings.quantizeColors) {\r\n\t\t\t\tvar size = (4 * numPositions) / 3;\r\n\t\t\t\tvar colors = new Uint8Array(size);\r\n\t\t\t\tvar quantizedColor = new Uint8Array(4);\r\n\t\t\t\tquantizedColor[0] = color.r * 255;\r\n\t\t\t\tquantizedColor[1] = color.g * 255;\r\n\t\t\t\tquantizedColor[2] = color.b * 255;\r\n\t\t\t\tquantizedColor[3] = color.a * 255;\r\n\t\t\t\tfor (var i=0; i < size / 4; i++) {\r\n\t\t\t\t\tcolors.set(quantizedColor, i * 4);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar size = (4 * numPositions) / 3;\r\n\t\t\t\tvar colors = new Float32Array(size);\r\n\t\t\t\tvar nonQuantizedColor = new Float32Array(4);\r\n\t\t\t\tnonQuantizedColor[0] = color.r;\r\n\t\t\t\tnonQuantizedColor[1] = color.g;\r\n\t\t\t\tnonQuantizedColor[2] = color.b;\r\n\t\t\t\tnonQuantizedColor[3] = color.a;\r\n\t\t\t\tfor (var i=0; i < size / 4; i++) {\r\n\t\t\t\t\tcolors.set(nonQuantizedColor, i * 4);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.settings.useObjectColors) {\r\n\t\t\tcolors = null;\r\n\t\t}\r\n\t\tif (!this.geometryIds.has(geometryDataOid)) {\r\n\t\t\tthis.geometryIds.set(geometryDataOid, true);\r\n\t\t}\r\n\t\tif (colors.length == 0) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tthis.renderLayer.createGeometry(this.loaderId, roid, croid, geometryDataOid, positions, normals, colors, color, indices, hasTransparency, reused);\r\n\t}\r\n\r\n\treadColors(stream, type) {\r\n\t\tvar b = stream.readInt();\r\n\t\tif (b == 1) {\r\n\t\t\tvar color = {r: stream.readFloat(), g: stream.readFloat(), b: stream.readFloat(), a: stream.readFloat()};\r\n\t\t} else {\r\n\t\t\tvar defaultColor = DefaultColors[type];\r\n\t\t\tif (defaultColor == null) {\r\n\t\t\t\tvar color = {\r\n\t\t\t\t\tr: 0,\r\n\t\t\t\t\tg: 1,\r\n\t\t\t\t\tb: 0,\r\n\t\t\t\t\ta: 1\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tcolor = defaultColor;\r\n\t\t\t}\r\n\t\t}\r\n\t\tstream.align4();\r\n\t\treturn color;\r\n\t}\r\n\r\n\tcreateObject(roid, oid, objectId, geometryIds, matrix, hasTransparency, type, aabb, inCompleteBuffer) {\r\n\t\tif (this.state.mode == 0) {\r\n\t\t\tconsole.log(\"Mode is still 0, should be 1\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!inCompleteBuffer) {\r\n\t\t\tif (this.multiplierToMm < 0.99 || this.multiplierToMm > 1.01) {\r\n\t\t\t\t// We need to change the matrix because the operations in the matrix\r\n\t\t\t\t// are based on the original geometry (e.a. not scaled to the right\r\n\t\t\t\t// unit: mm)\r\n\t\t\t\tvar scaleMatrix = mat4.create();\r\n\t\t\t\tmat4.scale(scaleMatrix, scaleMatrix, [this.multiplierToMm, this.multiplierToMm, this.multiplierToMm]);\r\n\t\t\t\tvar invertedScaleMatrix = mat4.create();\r\n\t\t\t\tmat4.invert(invertedScaleMatrix, scaleMatrix);\r\n\t\t\t\t\r\n\t\t\t\tvar totalMatrix = mat4.create();\r\n\t\t\t\t// Read} from bottom to top\r\n\t\t\t\t\r\n\t\t\t\t// 3. Apply the scaling again\r\n\t\t\t\tmat4.multiply(totalMatrix, totalMatrix, scaleMatrix);\r\n\t\t\t\t\r\n\t\t\t\t// 2. Apply the matrix\r\n\t\t\t\tmat4.multiply(totalMatrix, totalMatrix, matrix);\r\n\t\t\t\t\r\n\t\t\t\t// 1. Server has already scaled the vertices, scale it back to the\r\n\t\t\t\t// original values\r\n\t\t\t\tmat4.multiply(totalMatrix, totalMatrix, invertedScaleMatrix);\r\n\t\t\t\t\r\n\t\t\t\tmatrix = totalMatrix;\r\n\t\t\t}\r\n\t\t\tvar normalMatrix = mat3.create();\r\n\t\t\tmat3.fromMat4(normalMatrix, matrix);\r\n\t\t\tmat3.invert(normalMatrix, normalMatrix);\r\n\t\t\tmat3.transpose(normalMatrix, normalMatrix);\r\n\t\t}\r\n\t\tthis.renderLayer.createObject(this.loaderId, roid, oid, objectId, geometryIds, matrix, normalMatrix, scaleMatrix, hasTransparency, type, aabb);\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/geometryloader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 517,
    "kind": "class",
    "name": "GeometryLoader",
    "memberof": "viewer/geometryloader.js",
    "static": true,
    "longname": "viewer/geometryloader.js~GeometryLoader",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/geometryloader.js",
    "importStyle": "{GeometryLoader}",
    "description": "GeometryLoader loads data} from a BIMserver",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 518,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 519,
    "kind": "member",
    "name": "renderLayer",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#renderLayer",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#settings",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "member",
    "name": "query",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#query",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "member",
    "name": "loaderSettings",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#loaderSettings",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "member",
    "name": "loaderId",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#loaderId",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 524,
    "kind": "member",
    "name": "bimServerApi",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#bimServerApi",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "member",
    "name": "roids",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#roids",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 526,
    "kind": "member",
    "name": "vertexQuantizationMatrices",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#vertexQuantizationMatrices",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "stats",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#stats",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "member",
    "name": "geometryCache",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#geometryCache",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "state",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#state",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "objectAddedListeners",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#objectAddedListeners",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "member",
    "name": "prepareReceived",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#prepareReceived",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "geometryIds",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#geometryIds",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "dataToInfo",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#dataToInfo",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "member",
    "name": "gpuBufferManager",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#gpuBufferManager",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "member",
    "name": "createdTransparentObjects",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#createdTransparentObjects",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "member",
    "name": "createdOpaqueObjects",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#createdOpaqueObjects",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "member",
    "name": "promise",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#promise",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "member",
    "name": "resolve",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#resolve",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "getPromise",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#getPromise",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "start",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#start",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "member",
    "name": "topicId",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#topicId",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "processMessage",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#processMessage",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "stream",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "binaryDataListener",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#binaryDataListener",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "readEnd",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#readEnd",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "geometryDataIdResolved",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#geometryDataIdResolved",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "geometryDataId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "readStart",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#readStart",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "member",
    "name": "protocolVersion",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#protocolVersion",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "member",
    "name": "multiplierToMm",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#multiplierToMm",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "readObject",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#readObject",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "stream",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "processPreparedBufferInit",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#processPreparedBufferInit",
    "access": "public",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "params": [
      {
        "name": "stream",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparancy",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 552,
    "kind": "member",
    "name": "preparedBuffer",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#preparedBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "processPreparedBuffer",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#processPreparedBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "params": [
      {
        "name": "stream",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparancy",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "readGeometry",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#readGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "params": [
      {
        "name": "stream",
        "types": [
          "*"
        ]
      },
      {
        "name": "roid",
        "types": [
          "*"
        ]
      },
      {
        "name": "croid",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryId",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryDataOid",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "reused",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "useIntForIndices",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "readColors",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#readColors",
    "access": "public",
    "description": null,
    "lineNumber": 507,
    "undocument": true,
    "params": [
      {
        "name": "stream",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "createObject",
    "memberof": "viewer/geometryloader.js~GeometryLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/geometryloader.js~GeometryLoader#createObject",
    "access": "public",
    "description": null,
    "lineNumber": 528,
    "undocument": true,
    "params": [
      {
        "name": "roid",
        "types": [
          "*"
        ]
      },
      {
        "name": "oid",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "aabb",
        "types": [
          "*"
        ]
      },
      {
        "name": "inCompleteBuffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 557,
    "kind": "file",
    "name": "viewer/gpubuffermanager.js",
    "content": "/**\r\n * Responsible for managing GPU buffers. There are 4 types of buffers:\r\n * - Transparent batched\r\n * - Opaque batched\r\n * - Transparent reused\r\n * - Opaque reused\r\n *  \r\n */\r\nexport class GpuBufferManager {\r\n\tconstructor(viewer) {\r\n\t\tthis.viewer = viewer;\r\n\t\tthis.gl = this.viewer.gl;\r\n\t\tthis.settings = this.viewer.settings;\r\n\t\t\r\n\t\tthis.liveBuffersTransparent = [];\r\n\t\tthis.liveBuffersOpaque = [];\r\n\t\tthis.liveReusedBuffersOpaque = [];\r\n\t\tthis.liveReusedBuffersTransparent = [];\r\n\t}\r\n\t\r\n\tisEmpty() {\r\n\t\t// This variable is required because of bug in Firefox\r\n\t\tvar isEmpty =\r\n\t\t\t(this.liveBuffersOpaque == null || this.liveBuffersOpaque.length == 0) && \r\n\t\t\t(this.liveBuffersTransparent == null || this.liveBuffersTransparent.length == 0) &&\r\n\t\t\t(this.liveReusedBuffersOpaque == null || this.liveReusedBuffersOpaque.length == 0) &&\r\n\t\t\t(this.liveReusedBuffersTransparent == null || this.liveReusedBuffersTransparent.length == 0);\r\n\t\treturn isEmpty;\r\n\t}\r\n\t\r\n\t/* \r\n\t * Get a buffer based on two booleans: transparency and reuse\r\n\t */\r\n\tgetBuffers(transparency, reuse) {\r\n\t\tif (reuse) {\r\n\t\t\tif (transparency) {\r\n\t\t\t\treturn this.liveReusedBuffersTransparent;\r\n\t\t\t} else {\r\n\t\t\t\treturn this.liveReusedBuffersOpaque;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (transparency) {\r\n\t\t\t\treturn this.liveBuffersTransparent;\r\n\t\t\t} else {\r\n\t\t\t\treturn this.liveBuffersOpaque;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpushBuffer(buffer) {\r\n\t\tthis.getBuffers(buffer.hasTransparency, buffer.reuse).push(buffer);\r\n\t}\r\n\r\n\tdeleteBuffer(buffer) {\r\n\t\tlet arr = this.getBuffers(buffer.hasTransparency, buffer.reuse);\r\n\t\tlet idx = arr.indexOf(buffer);\r\n\t\tif (idx === -1) {\r\n\t\t\tthrow \"Unable to find buffer to delete\";\r\n\t\t}\r\n\t\tarr.splice(idx, 1);\r\n\t}\r\n\t\r\n\tsortAllBuffers() {\r\n\t\tthis.sortBuffers(this.liveBuffersOpaque);\r\n\t\tthis.sortBuffers(this.liveBuffersTransparent);\r\n\t\tthis.sortBuffers(this.liveReusedBuffersOpaque);\r\n\t\tthis.sortBuffers(this.liveReusedBuffersTransparent);\r\n\t}\r\n\t\r\n\tsortBuffers(buffers) {\r\n\t\tbuffers.sort((a, b) => {\r\n\t\t\tfor (var i=0; i<4; i++) {\r\n\t\t\t\tif (a.color[i] == b.color[i]) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\treturn a.color[i] - b.color[i];\r\n\t\t\t}\r\n\t\t\t// Colors are the same\r\n\t\t\treturn 0;\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*\r\n\t * This method will combine buffers on the GPU. It's disabled for now, not that it doesn't work, but it seems to generate quite a bit of \"stuttering\". Maybe we need to use a different type of buffer.\r\n\t */\r\n\tcombineBuffers() {\r\n\t\t// TODO this is not working currently\r\n\t\t\r\n\t\tfor (var transparency of [false, true]) {\r\n\t\t\tvar buffers = this.getBuffers(transparency, false);\r\n\t\t\t\r\n\t\t\t// This is only done when useObjectColors is false for now, probably because that's going to be the default anyways\r\n\t\t\t\r\n\t\t\tif (buffers.length > 1 && !this.viewer.settings.useObjectColors) {\r\n\t\t\t\tconsole.log(\"Combining buffers\", buffers.length);\r\n\t\t\t\t\r\n\t\t\t\tvar nrPositions = 0;\r\n\t\t\t\tvar nrNormals = 0;\r\n\t\t\t\tvar nrIndices = 0;\r\n\t\t\t\tvar nrColors = 0;\r\n\t\t\t\t\r\n\t\t\t\tfor (var buffer of buffers) {\r\n\t\t\t\t\tnrPositions += buffer.nrPositions;\r\n\t\t\t\t\tnrNormals += buffer.nrNormals;\r\n\t\t\t\t\tnrIndices += buffer.nrIndices;\r\n\t\t\t\t\tnrColors += buffer.nrColors;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst positionBuffer = this.gl.createBuffer();\r\n\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_WRITE_BUFFER, positionBuffer);\r\n\t\t\t\tthis.gl.bufferData(this.gl.COPY_WRITE_BUFFER, nrPositions * (this.settings.quantizeVertices ? 2 : 4) , this.gl.STATIC_DRAW);\r\n\t\t\t\t\r\n\t\t\t\tconst normalBuffer = this.gl.createBuffer();\r\n\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_WRITE_BUFFER, normalBuffer);\r\n\t\t\t\tthis.gl.bufferData(this.gl.COPY_WRITE_BUFFER, nrNormals * (this.settings.quantizeNormals ? 1 : 4), this.gl.STATIC_DRAW);\r\n\r\n\t\t\t\tvar colorBuffer = this.gl.createBuffer();\r\n\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_WRITE_BUFFER, colorBuffer);\r\n\t\t\t\tthis.gl.bufferData(this.gl.COPY_WRITE_BUFFER, nrColors * (this.settings.quantizeColors ? 1 : 4), this.gl.STATIC_DRAW);\r\n\t\t\t\t\r\n\t\t\t\tconst indexBuffer = this.gl.createBuffer();\r\n\t\t\t\tthis.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\t\t\t\tthis.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, nrIndices * 4, this.gl.STATIC_DRAW);\r\n\r\n\t\t\t\tvar positionsOffset = 0;\r\n\t\t\t\tvar normalsOffset = 0;\r\n\t\t\t\tvar indicesOffset = 0;\r\n\t\t\t\tvar colorsOffset = 0;\r\n\r\n\t\t\t\tfor (var buffer of buffers) {\r\n\t\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_READ_BUFFER, buffer.positionBuffer);\r\n\t\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_WRITE_BUFFER, positionBuffer);\r\n\t\t\t\t\tthis.gl.copyBufferSubData(this.gl.COPY_READ_BUFFER, this.gl.COPY_WRITE_BUFFER, 0, positionsOffset * (this.settings.quantizeVertices ? 2 : 4), buffer.nrPositions * (this.settings.quantizeVertices ? 2 : 4));\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_READ_BUFFER, buffer.normalBuffer);\r\n\t\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_WRITE_BUFFER, normalBuffer);\r\n\t\t\t\t\tthis.gl.copyBufferSubData(this.gl.COPY_READ_BUFFER, this.gl.COPY_WRITE_BUFFER, 0, normalsOffset * (this.settings.quantizeNormals ? 1 : 4), buffer.nrNormals * (this.settings.quantizeNormals ? 1 : 4));\r\n\r\n\t\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_READ_BUFFER, buffer.colorBuffer);\r\n\t\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_WRITE_BUFFER, colorBuffer);\r\n\t\t\t\t\tthis.gl.copyBufferSubData(this.gl.COPY_READ_BUFFER, this.gl.COPY_WRITE_BUFFER, 0, colorsOffset * (this.settings.quantizeColors ? 1 : 4), buffer.nrColors * (this.settings.quantizeColors ? 1 : 4));\r\n\r\n\t\t\t\t\tif (positionsOffset == 0) {\r\n\t\t\t\t\t\t// Minor optimization for the first buffer\r\n\t\t\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_READ_BUFFER, buffer.indexBuffer);\r\n\t\t\t\t\t\tthis.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\t\t\t\t\t\tthis.gl.copyBufferSubData(this.gl.COPY_READ_BUFFER, this.gl.ELEMENT_ARRAY_BUFFER, 0, 0, buffer.nrIndices * 4);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar startIndex = positionsOffset / 3;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.gl.bindBuffer(this.gl.COPY_READ_BUFFER, buffer.indexBuffer);\r\n\t\t\t\t\t\tvar tmpIndexBuffer = new Int32Array(buffer.nrIndices);\r\n\t\t\t\t\t\tthis.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, tmpIndexBuffer, 0, buffer.nrIndices);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i=0; i<buffer.nrIndices; i++) {\r\n\t\t\t\t\t\t\ttmpIndexBuffer[i] = tmpIndexBuffer[i] + startIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\t\t\t\t\t\tthis.gl.bufferSubData(this.gl.ELEMENT_ARRAY_BUFFER, indicesOffset * 4, tmpIndexBuffer, 0, buffer.nrIndices);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.gl.deleteBuffer(buffer.positionBuffer);\r\n\t\t\t\t\tthis.gl.deleteBuffer(buffer.normalBuffer);\r\n\t\t\t\t\tthis.gl.deleteBuffer(buffer.colorBuffer);\r\n\t\t\t\t\tthis.gl.deleteBuffer(buffer.indexBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.gl.deleteVertexArray(buffer.vao);\r\n\t\t\t\t\t\r\n\t\t\t\t\tpositionsOffset += buffer.nrPositions;\r\n\t\t\t\t\tnormalsOffset += buffer.nrNormals;\r\n\t\t\t\t\tindicesOffset += buffer.nrIndices;\r\n\t\t\t\t\tcolorsOffset += buffer.nrColors;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar programInfo = this.viewer.programManager.getProgram({\r\n\t\t\t\t\tpicking: false,\r\n\t\t\t\t\tinstancing: false,\r\n\t\t\t\t\tuseObjectColors: this.settings.useObjectColors,\r\n\t\t\t\t\tquantizeNormals: this.settings.quantizeNormals,\r\n\t\t\t\t\tquantizeVertices: this.settings.quantizeVertices,\r\n\t\t\t\t\tquantizeColors: this.settings.quantizeColors\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar vao = this.gl.createVertexArray();\r\n\t\t\t\tthis.gl.bindVertexArray(vao);\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\tconst numComponents = 3;\r\n\t\t\t\t\tconst normalize = false;\r\n\t\t\t\t\tconst stride = 0;\r\n\t\t\t\t\tconst offset = 0;\r\n\t\t\t\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);\r\n\t\t\t\t\tif (this.settings.quantizeVertices) {\r\n\t\t\t\t\t\tthis.gl.vertexAttribIPointer(programInfo.attribLocations.vertexPosition, numComponents, this.gl.SHORT, normalize, stride, offset);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, numComponents, this.gl.FLOAT, normalize, stride, offset);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tconst numComponents = 3;\r\n\t\t\t\t\tconst normalize = false;\r\n\t\t\t\t\tconst stride = 0;\r\n\t\t\t\t\tconst offset = 0;\r\n\t\t\t\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, normalBuffer);\r\n\t\t\t\t\tif (this.settings.quantizeNormals) {\r\n\t\t\t\t\t\tthis.gl.vertexAttribIPointer(programInfo.attribLocations.vertexNormal, numComponents, this.gl.BYTE, normalize, stride, offset);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.gl.vertexAttribPointer(programInfo.attribLocations.vertexNormal, numComponents, this.gl.FLOAT, normalize, stride, offset);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.gl.enableVertexAttribArray(programInfo.attribLocations.vertexNormal);\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tconst numComponents = 4;\r\n\t\t\t\t\tconst normalize = false;\r\n\t\t\t\t\tconst stride = 0;\r\n\t\t\t\t\tconst offset = 0;\r\n\t\t\t\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, colorBuffer);\r\n\t\t\t\t\tif (this.settings.quantizeColors) {\r\n\t\t\t\t\t\tthis.gl.vertexAttribIPointer(programInfo.attribLocations.vertexColor, numComponents, this.gl.UNSIGNED_BYTE, normalize, stride, offset);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.gl.vertexAttribPointer(programInfo.attribLocations.vertexColor, numComponents, this.gl.FLOAT, normalize, stride, offset);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n\t\t\t\tthis.gl.bindVertexArray(null);\r\n\t\t\t\t\r\n\t\t\t\tvar newBuffer = {\r\n\t\t\t\t\tpositionBuffer: positionBuffer,\r\n\t\t\t\t\tnormalBuffer: normalBuffer,\r\n\t\t\t\t\tindexBuffer: indexBuffer,\r\n\t\t\t\t\tcolorBuffer: colorBuffer,\r\n\t\t\t\t\tnrIndices: indicesOffset,\r\n\t\t\t\t\tnrPositions: positionsOffset,\r\n\t\t\t\t\tnrNormals: normalsOffset,\r\n\t\t\t\t\tnrColors: colorsOffset,\r\n\t\t\t\t\tvao: vao,\r\n\t\t\t\t\thasTransparency: transparency,\r\n\t\t\t\t\treuse: false\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tvar previousLength = buffers.length;\r\n\t\t\t\tbuffers.length = 0;\r\n\t\t\t\tbuffers.push(newBuffer);\r\n\t\t\t\t\r\n\t\t\t\treturn previousLength - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/gpubuffermanager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 558,
    "kind": "class",
    "name": "GpuBufferManager",
    "memberof": "viewer/gpubuffermanager.js",
    "static": true,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/gpubuffermanager.js",
    "importStyle": "{GpuBufferManager}",
    "description": "Responsible for managing GPU buffers. There are 4 types of buffers:\n- Transparent batched\n- Opaque batched\n- Transparent reused\n- Opaque reused\n ",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 559,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 560,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "member",
    "name": "gl",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#gl",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 562,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#settings",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 563,
    "kind": "member",
    "name": "liveBuffersTransparent",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#liveBuffersTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "member",
    "name": "liveBuffersOpaque",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#liveBuffersOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 565,
    "kind": "member",
    "name": "liveReusedBuffersOpaque",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#liveReusedBuffersOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 566,
    "kind": "member",
    "name": "liveReusedBuffersTransparent",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#liveReusedBuffersTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#isEmpty",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "getBuffers",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#getBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "transparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "reuse",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "pushBuffer",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#pushBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "deleteBuffer",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#deleteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "sortAllBuffers",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#sortAllBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "sortBuffers",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#sortBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "buffers",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "combineBuffers",
    "memberof": "viewer/gpubuffermanager.js~GpuBufferManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/gpubuffermanager.js~GpuBufferManager#combineBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 574,
    "kind": "file",
    "name": "viewer/lighting.js",
    "content": "/**\r\n * Configures the viewer's light sources.\r\n * @todo This class's API will probably change as we add ability to configure multiple light sources.\r\n */\r\nexport class Lighting {\r\n\r\n    constructor(viewer) {\r\n\r\n        this.viewer = viewer;\r\n        this._dir = new Float32Array([-0.3, -0.7, -1.0]);\r\n        vec3.normalize(this._dir, this._dir);\r\n        this._color = new Float32Array([0.4, 0.4, 0.4]);\r\n        this._ambientColor = new Float32Array([0.3, 0.3, 0.3]);\r\n        this._intensity = 0.5;\r\n        this._bufferData = new Float32Array(52);\r\n        this._buffer = null;\r\n\r\n        this._setDirty();\r\n    }\r\n\r\n    _setDirty() {\r\n        this._dirty = true;\r\n        this.viewer.dirty = true;\r\n    }\r\n    \r\n    _update() {\r\n        if (!this._dirty) {\r\n            return;\r\n\r\n        }\r\n        var bufferData = this._bufferData;\r\n\r\n        bufferData[0] = this._dir[0];\r\n        bufferData[1] = this._dir[1];\r\n        bufferData[2] = this._dir[2];\r\n        bufferData[3] = 0; // unused\r\n        bufferData[4] = this._color[0];\r\n        bufferData[5] = this._color[1];\r\n        bufferData[6] = this._color[2];\r\n        bufferData[7] = 0; // unused\r\n        bufferData[8] = this._ambientColor[0];\r\n        bufferData[9] = this._ambientColor[1];\r\n        bufferData[10] = this._ambientColor[2];\r\n        bufferData[11] = 0; // unused;\r\n        bufferData[12] = this._intensity;\r\n\r\n        var gl = this.viewer.gl;\r\n\r\n        this._buffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.UNIFORM_BUFFER, this._buffer);\r\n        gl.bufferData(gl.UNIFORM_BUFFER, bufferData, gl.DYNAMIC_DRAW, 0, 52);\r\n\r\n        this._dirty = false;\r\n    }\r\n\r\n    setDir(dir) {\r\n        this._dir.set(dir);\r\n        this._setDirty();\r\n    }\r\n\r\n    setColor(color) {\r\n        this._color.set(color);\r\n        this._setDirty();\r\n    }\r\n\r\n    setAmbientColor(ambientColor) {\r\n        this._ambientColor.set(ambientColor);\r\n        this._setDirty();\r\n    }\r\n\r\n    setIntensity(intensity) {\r\n        this._intensity = intensity;\r\n        this._setDirty();\r\n    }\r\n\r\n    render(uniformBlockLocation) {\r\n        if (this._dirty) {\r\n            this._update();\r\n        }\r\n        this.viewer.gl.bindBufferBase(this.viewer.gl.UNIFORM_BUFFER, uniformBlockLocation, this._buffer);\r\n    }\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/lighting.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 575,
    "kind": "class",
    "name": "Lighting",
    "memberof": "viewer/lighting.js",
    "static": true,
    "longname": "viewer/lighting.js~Lighting",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/lighting.js",
    "importStyle": "{Lighting}",
    "description": "Configures the viewer's light sources.",
    "lineNumber": 5,
    "todo": [
      "This class's API will probably change as we add ability to configure multiple light sources."
    ],
    "interface": false
  },
  {
    "__docId__": 576,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/lighting.js~Lighting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/lighting.js~Lighting#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 577,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/lighting.js~Lighting",
    "static": false,
    "longname": "viewer/lighting.js~Lighting#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 578,
    "kind": "member",
    "name": "_dir",
    "memberof": "viewer/lighting.js~Lighting",
    "static": false,
    "longname": "viewer/lighting.js~Lighting#_dir",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 579,
    "kind": "member",
    "name": "_color",
    "memberof": "viewer/lighting.js~Lighting",
    "static": false,
    "longname": "viewer/lighting.js~Lighting#_color",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 580,
    "kind": "member",
    "name": "_ambientColor",
    "memberof": "viewer/lighting.js~Lighting",
    "static": false,
    "longname": "viewer/lighting.js~Lighting#_ambientColor",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "member",
    "name": "_intensity",
    "memberof": "viewer/lighting.js~Lighting",
    "static": false,
    "longname": "viewer/lighting.js~Lighting#_intensity",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "member",
    "name": "_bufferData",
    "memberof": "viewer/lighting.js~Lighting",
    "static": false,
    "longname": "viewer/lighting.js~Lighting#_bufferData",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "member",
    "name": "_buffer",
    "memberof": "viewer/lighting.js~Lighting",
    "static": false,
    "longname": "viewer/lighting.js~Lighting#_buffer",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "_setDirty",
    "memberof": "viewer/lighting.js~Lighting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/lighting.js~Lighting#_setDirty",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 585,
    "kind": "member",
    "name": "_dirty",
    "memberof": "viewer/lighting.js~Lighting",
    "static": false,
    "longname": "viewer/lighting.js~Lighting#_dirty",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "_update",
    "memberof": "viewer/lighting.js~Lighting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/lighting.js~Lighting#_update",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "setDir",
    "memberof": "viewer/lighting.js~Lighting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/lighting.js~Lighting#setDir",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "setColor",
    "memberof": "viewer/lighting.js~Lighting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/lighting.js~Lighting#setColor",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "setAmbientColor",
    "memberof": "viewer/lighting.js~Lighting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/lighting.js~Lighting#setAmbientColor",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "ambientColor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "setIntensity",
    "memberof": "viewer/lighting.js~Lighting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/lighting.js~Lighting#setIntensity",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "intensity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "render",
    "memberof": "viewer/lighting.js~Lighting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/lighting.js~Lighting#render",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "uniformBlockLocation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 595,
    "kind": "file",
    "name": "viewer/lineboxgeometry.js",
    "content": "import {FatLineRenderer} from './fatlinerenderer.js'\r\n\r\n/**\r\n * Simple (reusable) class to draw a linebox\r\n *\r\n * @export\r\n * @class LineBoxGeometry\r\n * @extends {FatLineRenderer}\r\n */\r\nexport class LineBoxGeometry extends FatLineRenderer {\r\n\tconstructor(viewer, gl) {\r\n\t\tsuper(viewer, gl, {quantize: false});\r\n\t\tthis.gl = gl;\r\n\t\t\r\n\t\tvar a = [-0.5, 0.5, -0.5];\r\n\t\tvar b = [0.5, 0.5, -0.5];\r\n\t\tvar c = [0.5, -0.5, -0.5];\r\n\t\tvar d = [-0.5, -0.5, -0.5];\r\n\t\tvar e = [-0.5, 0.5, 0.5];\r\n\t\tvar f = [0.5, 0.5, 0.5];\r\n\t\tvar g = [0.5, -0.5, 0.5];\r\n\t\tvar h = [-0.5, -0.5, 0.5];\r\n\t\t\r\n\t\tthis.pushVertices(a, b);\r\n\t\tthis.pushVertices(b, c);\r\n\t\tthis.pushVertices(c, d);\r\n\t\tthis.pushVertices(d, a);\r\n\t\t\r\n\t\tthis.pushVertices(e, f);\r\n\t\tthis.pushVertices(f, g);\r\n\t\tthis.pushVertices(g, h);\r\n\t\tthis.pushVertices(h, e);\r\n\r\n\t\tthis.pushVertices(a, e);\r\n\t\tthis.pushVertices(b, f);\r\n\t\tthis.pushVertices(c, g);\r\n\t\tthis.pushVertices(d, h);\r\n\r\n\t\tthis.finalize();\r\n\t}\t\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/lineboxgeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 596,
    "kind": "class",
    "name": "LineBoxGeometry",
    "memberof": "viewer/lineboxgeometry.js",
    "static": true,
    "longname": "viewer/lineboxgeometry.js~LineBoxGeometry",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/lineboxgeometry.js",
    "importStyle": "{LineBoxGeometry}",
    "description": "Simple (reusable) class to draw a linebox",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LineBoxGeometry"
      }
    ],
    "interface": false,
    "extends": [
      "FatLineRenderer"
    ]
  },
  {
    "__docId__": 597,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/lineboxgeometry.js~LineBoxGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/lineboxgeometry.js~LineBoxGeometry#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 598,
    "kind": "member",
    "name": "gl",
    "memberof": "viewer/lineboxgeometry.js~LineBoxGeometry",
    "static": false,
    "longname": "viewer/lineboxgeometry.js~LineBoxGeometry#gl",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 599,
    "kind": "file",
    "name": "viewer/octree.js",
    "content": "import {Utils} from './utils.js'\r\n\r\n/**\r\n * Octree implementation targeted towards being used in the TilingLayer, could possibly be retrofitted to be a generic Octree to be used in other contexts\r\n */\r\nclass OctreeNode {\r\n\tconstructor(viewer, parent, id, x, y, z, width, height, depth, level, globalTransformation) {\r\n\t\tthis.viewer = viewer;\r\n\t\tthis.parent = parent;\r\n\t\tthis.globalTransformation = globalTransformation;\r\n\t\tif (parent != null) {\r\n\t\t\tif (level > this.parent.deepestLevel) {\r\n\t\t\t\tthis.parent.deepestLevel = level;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.id = id;\r\n\t\t\r\n\t\tthis.leaf = true;\r\n\t\t\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\t\r\n\t\tthis.nrObjects = 0;\r\n\t\t\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.depth = depth;\r\n\t\t\r\n\t\tthis.level = level;\r\n\t\t\r\n\t\tthis.center = vec4.fromValues(this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth / 2, 1);\r\n\t\tthis.normalizedCenter = vec4.create();\r\n\t\tvec3.transformMat3(this.normalizedCenter, this.center, this.globalTransformation);\r\n\t\t\r\n\t\tthis.radius = (Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2) + Math.pow(this.depth, 2))) / 2;\r\n\t\t\r\n\t\tthis.matrix = mat4.create();\r\n\t\tmat4.translate(this.matrix, this.matrix, [this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth / 2]);\r\n\t\tmat4.scale(this.matrix, this.matrix, [this.width, this.height, this.depth]);\r\n\r\n\t\tthis.normalizedMatrix = mat4.create();\r\n\t\tmat4.multiply(this.normalizedMatrix, this.normalizedMatrix, this.globalTransformation);\r\n\t\tmat4.translate(this.normalizedMatrix, this.normalizedMatrix, [this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth / 2]);\r\n\t\tmat4.scale(this.normalizedMatrix, this.normalizedMatrix, [this.width, this.height, this.depth]);\r\n\t\t\r\n\t\tthis.bounds = [this.x, this.y, this.z, this.width, this.height, this.depth];\r\n\t\t\r\n\t\tvar minVector = vec3.create();\r\n\t\tvar maxVector = vec3.create();\r\n\t\tvec3.set(minVector, this.bounds[0], this.bounds[1], this.bounds[2]);\r\n\t\tvec3.set(maxVector, this.bounds[0] + this.bounds[3], this.bounds[1] + this.bounds[4], this.bounds[2] + this.bounds[5]);\r\n\t\tthis.boundsVectors = [minVector, maxVector];\r\n\t\t\r\n\t\tvar normalizedMinVector = vec3.clone(minVector);\r\n\t\tvar normalizedMaxVector = vec3.clone(maxVector);\r\n\t\tvec3.transformMat4(normalizedMinVector, normalizedMinVector, globalTransformation);\r\n\t\tvec3.transformMat4(normalizedMaxVector, normalizedMaxVector, globalTransformation);\r\n\t\tthis.normalizedBoundsVectors = [normalizedMinVector, normalizedMaxVector];\r\n\t\t\r\n\t\t// TODO also keep track of the minimal bounds (usually smaller than the \"static\" bounds of the node), which can be used for (frustum) occlusion culling\r\n\t\t// TODO also keep track of the minimal bounds inc. children (useful for hyrachical culling)\r\n\t\t\r\n\t\tthis.quadrants = [];\r\n\t\t\r\n\t\tif (this.viewer.vertexQuantization) {\r\n\t\t\tthis.vertexQuantizationMatrix = Utils.toArray(this.viewer.vertexQuantization.getTransformedQuantizationMatrix(this.bounds));\r\n\t\t\tthis.vertexUnquantizationMatrix = Utils.toArray(this.viewer.vertexQuantization.getTransformedInverseQuantizationMatrix(this.bounds));\r\n\t\t}\r\n\t\t\r\n\t\tthis.largestFaceArea = width * height;\r\n\t\tif (width * depth > this.largestFaceArea) {\r\n\t\t\tthis.largestFaceArea = width * depth;\r\n\t\t}\r\n\t\tif (depth * height > this.largestFaceArea) {\r\n\t\t\tthis.largestFaceArea = depth * height;\r\n\t\t}\r\n\t\tthis.largestEdge = width;\r\n\t\tif (height > this.largestEdge) {\r\n\t\t\tthis.largestEdge = height;\r\n\t\t}\r\n\t\tif (depth > this.largestEdge) {\r\n\t\t\tthis.largestEdge = depth;\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetBounds() {\r\n\t\treturn this.bounds;\r\n\t}\r\n\t\r\n\tgetMatrix() {\r\n\t\treturn this.matrix;\r\n\t}\r\n\r\n\ttraverseBreathFirstInternal(fn, level) {\r\n\t\tif (this.level == level) {\r\n\t\t\tvar result = fn(this);\r\n\t\t\tif (result === false && toSkip != null) {\r\n\t\t\t\t// TODO do something to make sure we are not calling fn for the children of this node\r\n\t\t\t\ttoSkip.add(this.id);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.level >= level) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (var node of this.quadrants) {\r\n\t\t\tif (node != null) {\r\n\t\t\t\tnode.traverseBreathFirstInternal(fn, level);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\ttraverseBreathFirst(fn) {\r\n\t\tif (this.levelLists == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (var l=0; l<=this.maxDepth; l++) {\r\n\t\t\tfor (var node of this.levelLists[l]) {\r\n\t\t\t\tfn(node);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\ttraverse(fn, onlyLeafs, level) {\r\n\t\tif (!onlyLeafs || this.leaf == true) {\r\n\t\t\tif (fn(this, level || 0) === false) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.quadrants == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (var node of this.quadrants) {\r\n\t\t\tif (node != null) {\r\n\t\t\t\tnode.traverse(fn, onlyLeafs, (level || 0) + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetCenter() {\r\n\t\treturn this.center;\r\n\t}\r\n\t\r\n\tgetBoundingSphereRadius() {\r\n\t\treturn this.radius;\r\n\t}\r\n\t\r\n\tgetQuadrant(localId) {\r\n\t\tif (localId < 0 || localId > 7) {\r\n\t\t\tthrow \"Invalid local id: \" + localId;\r\n\t\t}\r\n\t\tvar quadrant = this.quadrants[localId];\r\n\t\tif (quadrant == null) {\r\n\t\t\tvar newLevel = this.level + 1;\r\n\t\t\tvar newId = this.id * 8 + localId + 1;\r\n\t\t\tswitch (localId) {\r\n\t\t\t\tcase 0: quadrant = new OctreeNode(this.viewer, this, newId, this.x, this.y, this.z, this.width / 2, this.height / 2, this.depth / 2, newLevel, this.globalTransformation); break;\r\n\t\t\t\tcase 1: quadrant = new OctreeNode(this.viewer, this, newId, this.x, this.y, this.z + this.depth / 2, this.width / 2, this.height / 2, this.depth / 2, newLevel, this.globalTransformation); break;\r\n\t\t\t\tcase 2: quadrant = new OctreeNode(this.viewer, this, newId, this.x, this.y + this.height / 2, this.z, this.width / 2, this.height / 2, this.depth / 2, newLevel, this.globalTransformation); break;\r\n\t\t\t\tcase 3: quadrant = new OctreeNode(this.viewer, this, newId, this.x, this.y + this.height / 2, this.z + this.depth / 2, this.width / 2, this.height / 2, this.depth / 2, newLevel, this.globalTransformation); break;\r\n\t\t\t\tcase 4: quadrant = new OctreeNode(this.viewer, this, newId, this.x + this.width / 2, this.y, this.z, this.width / 2, this.height / 2, this.depth / 2, newLevel, this.globalTransformation); break;\r\n\t\t\t\tcase 5: quadrant = new OctreeNode(this.viewer, this, newId, this.x + this.width / 2, this.y, this.z + this.depth / 2, this.width / 2, this.height / 2, this.depth / 2, newLevel, this.globalTransformation); break;\r\n\t\t\t\tcase 6: quadrant = new OctreeNode(this.viewer, this, newId, this.x + this.width / 2, this.y + this.height / 2, this.z, this.width / 2, this.height / 2, this.depth / 2, newLevel, this.globalTransformation); break;\r\n\t\t\t\tcase 7: quadrant = new OctreeNode(this.viewer, this, newId, this.x + this.width / 2, this.y + this.height / 2, this.z + this.depth / 2, this.width / 2, this.height / 2, this.depth / 2, newLevel, this.globalTransformation); break;\r\n\t\t\t}\r\n\t\t\tthis.quadrants[localId] = quadrant;\r\n\t\t}\r\n\t\tthis.leaf = false;\r\n\t\treturn quadrant;\r\n\t}\r\n\t\r\n\tgetNodeById(id) {\r\n\t\tif (id == this.id) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tvar localId = (id - 1) % 8;\r\n\t\tvar parentId = (id - 1 - localId) / 8;\r\n\t\tvar list = [];\r\n\t\tlist.push((id - 1) % 8);\r\n\t\twhile (parentId > 0) {\r\n\t\t\tlist.push((parentId - 1) % 8);\r\n\t\t\tparentId = Math.floor((parentId - 1) / 8);\r\n\t\t}\r\n\t\tvar node = this;\r\n\t\tfor (var i=list.length-1; i>=0; i--) {\r\n\t\t\tnode = node.getQuadrant(list[i]);\r\n\t\t}\r\n\t\tif (node.id != id) {\r\n\t\t\tthrow \"Ids do not match \" + node.id + \" / \" + id;\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\t\r\n\tprepareLevelListsInternal(level, levelList) {\r\n\t\tif (this.level == level) {\r\n\t\t\tlevelList.push(this);\r\n\t\t}\r\n\t\tif (this.level >= level) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (var node of this.quadrants) {\r\n\t\t\tif (node != null) {\r\n\t\t\t\tnode.prepareLevelListsInternal(level, levelList);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprepareBreathFirstInternal(breathFirstList, fn, level) {\r\n\t\tif (this.level == level) {\r\n\t\t\tif (fn(this)) {\r\n\t\t\t\tbreathFirstList.push(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.level > level) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.quadrants == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (var node of this.quadrants) {\r\n\t\t\tif (node != null) {\r\n\t\t\t\tnode.prepareBreathFirstInternal(breathFirstList, fn, level);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprepareFullListInternal(fullList, level) {\r\n\t\tif (this.level == level) {\r\n\t\t\tfullList.push(this);\r\n\t\t}\r\n\t\tif (this.level > level) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.quadrants == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor (var node of this.quadrants) {\r\n\t\t\tnode.prepareFullListInternal(fullList, level);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class Octree extends OctreeNode {\r\n\tconstructor(viewer, realBounds, globalTransformation, maxDepth) {\r\n\t\tsuper(viewer, null, 0, realBounds[0], realBounds[1], realBounds[2], realBounds[3] - realBounds[0], realBounds[4] - realBounds[1], realBounds[5] - realBounds[2], 0, globalTransformation);\r\n\t\tthis.maxDepth = maxDepth;\r\n\t\tthis.actualMaxLevel;\r\n\t\tthis.level = 0;\r\n\t\tthis.breathFirstList = [];\r\n\t}\r\n\t\r\n\textractBreathFirstList(fn) {\r\n\t\tvar list = [];\r\n\t\tthis.traverseBreathFirst((node) => {\r\n\t\t\tif (fn(node)) {\r\n\t\t\t\tlist.push(node);\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn list;\r\n\t}\r\n\t\r\n\ttraverseBreathFirstCached(fn) {\r\n\t\tfor (var node of this.breathFirstList) {\r\n\t\t\tfn(node);\r\n\t\t}\r\n\t}\r\n\t\r\n\tprepareLevelLists() {\r\n\t\tthis.levelLists = [];\r\n\t\tfor (var l=0; l<=this.maxDepth; l++) {\r\n\t\t\tthis.levelLists[l] = [];\r\n\t\t\tthis.prepareLevelListsInternal(l, this.levelLists[l]);\r\n\t\t}\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/octree.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 600,
    "kind": "class",
    "name": "OctreeNode",
    "memberof": "viewer/octree.js",
    "static": true,
    "longname": "viewer/octree.js~OctreeNode",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/octree.js",
    "importStyle": null,
    "description": "Octree implementation targeted towards being used in the TilingLayer, could possibly be retrofitted to be a generic Octree to be used in other contexts",
    "lineNumber": 6,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 601,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "member",
    "name": "parent",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#parent",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "member",
    "name": "globalTransformation",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#globalTransformation",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "member",
    "name": "id",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#id",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 606,
    "kind": "member",
    "name": "leaf",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#leaf",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "member",
    "name": "x",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#x",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "member",
    "name": "y",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#y",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "member",
    "name": "z",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#z",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "member",
    "name": "nrObjects",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#nrObjects",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "member",
    "name": "width",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#width",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 612,
    "kind": "member",
    "name": "height",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#height",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 613,
    "kind": "member",
    "name": "depth",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#depth",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "level",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#level",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "center",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#center",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "member",
    "name": "normalizedCenter",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#normalizedCenter",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "member",
    "name": "radius",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#radius",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "matrix",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#matrix",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "member",
    "name": "normalizedMatrix",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#normalizedMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "member",
    "name": "bounds",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#bounds",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "member",
    "name": "boundsVectors",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#boundsVectors",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "normalizedBoundsVectors",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#normalizedBoundsVectors",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "member",
    "name": "quadrants",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#quadrants",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "member",
    "name": "vertexQuantizationMatrix",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#vertexQuantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "member",
    "name": "vertexUnquantizationMatrix",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#vertexUnquantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 626,
    "kind": "member",
    "name": "largestFaceArea",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#largestFaceArea",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "member",
    "name": "largestEdge",
    "memberof": "viewer/octree.js~OctreeNode",
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#largestEdge",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "getBounds",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#getBounds",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "getMatrix",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#getMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "traverseBreathFirstInternal",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#traverseBreathFirstInternal",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "traverseBreathFirst",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#traverseBreathFirst",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "traverse",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#traverse",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "onlyLeafs",
        "types": [
          "*"
        ]
      },
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "getCenter",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#getCenter",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "getBoundingSphereRadius",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#getBoundingSphereRadius",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "getQuadrant",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#getQuadrant",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "localId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "getNodeById",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#getNodeById",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "method",
    "name": "prepareLevelListsInternal",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#prepareLevelListsInternal",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      },
      {
        "name": "levelList",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "prepareBreathFirstInternal",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#prepareBreathFirstInternal",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [
      {
        "name": "breathFirstList",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "prepareFullListInternal",
    "memberof": "viewer/octree.js~OctreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~OctreeNode#prepareFullListInternal",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "fullList",
        "types": [
          "*"
        ]
      },
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 645,
    "kind": "class",
    "name": "Octree",
    "memberof": "viewer/octree.js",
    "static": true,
    "longname": "viewer/octree.js~Octree",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/octree.js",
    "importStyle": "{Octree}",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "interface": false,
    "extends": [
      "OctreeNode"
    ]
  },
  {
    "__docId__": 646,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/octree.js~Octree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~Octree#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true
  },
  {
    "__docId__": 647,
    "kind": "member",
    "name": "maxDepth",
    "memberof": "viewer/octree.js~Octree",
    "static": false,
    "longname": "viewer/octree.js~Octree#maxDepth",
    "access": "public",
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "member",
    "name": "level",
    "memberof": "viewer/octree.js~Octree",
    "static": false,
    "longname": "viewer/octree.js~Octree#level",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "member",
    "name": "breathFirstList",
    "memberof": "viewer/octree.js~Octree",
    "static": false,
    "longname": "viewer/octree.js~Octree#breathFirstList",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "extractBreathFirstList",
    "memberof": "viewer/octree.js~Octree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~Octree#extractBreathFirstList",
    "access": "public",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "traverseBreathFirstCached",
    "memberof": "viewer/octree.js~Octree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~Octree#traverseBreathFirstCached",
    "access": "public",
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "prepareLevelLists",
    "memberof": "viewer/octree.js~Octree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/octree.js~Octree#prepareLevelLists",
    "access": "public",
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 653,
    "kind": "member",
    "name": "levelLists",
    "memberof": "viewer/octree.js~Octree",
    "static": false,
    "longname": "viewer/octree.js~Octree#levelLists",
    "access": "public",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "file",
    "name": "viewer/orthographic.js",
    "content": "/**\n * Configures orthographic projection mode for the camera.\n * In this projection mode, an object's size in the rendered image stays constant regardless of its distance} from the camera.\n * Orthographic projection is represented as a viewing frustum, given as six planes.\n */\nexport class Orthographic {\n\n    constructor(viewer) {\n        this.viewer = viewer;\n        this._projMatrix = mat4.create();\n        this._left = -1.0;\n        this._bottom = -1.0;\n        this._near = 0.1;\n        this._right = 1.0;\n        this._top = 1.0;\n        this._far = 5000;\n        this._dirty = true;\n    }\n\n    _setDirty() {\n        this._dirty = true;\n        this.viewer.dirty = true;\n    }\n\n    /**\n     Sets the position of the left plane on the negative View-space X-axis.\n\n     @param {Number} left Position of the left plane.\n     */\n    set left(left) {\n        left = left || -1.0;\n        this._left = left;\n        this._setDirty();\n    }\n\n    /**\n     Gets the position of the left plane on the negative View-space X-axis.\n\n     @return {Number} Position of the left plane.\n     */\n    get left() {\n        return this._left;\n    }\n\n    /**\n     Sets the position of bottom plane on the negative View-space Y-axis.\n\n     @param {Number} bottom Position of the bottom plane.\n     */\n    set bottom(bottom) {\n        bottom = bottom || -1.0;\n        this._bottom = bottom;\n        this._setDirty();\n    }\n\n    /**\n     Gets the position of bottom plane on the negative View-space Y-axis.\n\n     @return {Number} Position of the bottom plane.\n     */\n    get bottom() {\n        return this._bottom;\n    }\n\n    /**\n     Sets the position of the near plane on the positive View-space Z-axis. Default is 0.1.\n\n     @param {Number} near Position of the near clipping plane. The valid range is between 0 and the current value of the far plane\n     */\n    set near(near) {\n        this._near = near || 0.1;\n        this._setDirty();\n    }\n\n    /**\n     Gets the position of the near plane on the positive View-space Z-axis.\n\n     @return {Number} Position of the near clipping plane.\n     */\n    get near() {\n        return this._near;\n    }\n\n    /**\n     Sets the position of the right plane on the positive View-space X-axis.\n\n     @param {Number} right Position of the right plane.\n     */\n    set right(right) {\n        right = right || 1.0;\n        this._right = right;\n        this._setDirty();\n    }\n\n    /**\n     Gets the position of the right plane on the positive View-space X-axis.\n\n     @return {Number} Position of the right plane.\n     */\n    get right() {\n        return this._right;\n    }\n\n    /**\n     Sets the position of the top plane on the positive View-space Y-axis.\n\n     @param {Number} top Position of the top plane.\n     */\n    set top(top) {\n        this._top = top || 1.0;\n        this._setDirty();\n    }\n\n    /**\n     Gets the position of the top plane on the positive View-space Y-axis.\n\n     @return {Number} Position of the top plane.\n     */\n    get top() {\n        return this._top;\n    }\n\n    /**\n     Sets the position of the far plane on the positive View-space Z-axis. Default is 5000.\n\n     @param {Number} far Position of the far clipping plane. The valid range is between the current value of the near plane and infinity.\n     */\n    set far(far) {\n        this._far = far || 5000;\n        this._setDirty();\n    }\n\n    /**\n     Gets the position of the far clipping plane on the positive View-space Z-axis.\n\n     @return {Number} Position of the far clipping plane.\n     */\n    get far() {\n        return this._far;\n    }\n\n    /**\n     Gets the current orthographic projection transform matrix.\n\n     This will be the camera's current projection matrix when it's in orthographic projection mode.\n\n     @return {Float32Array} 4x4 column-order matrix as an array of 16 contiguous floats.\n     */\n    get projMatrix() {\n        if (this._dirty) {\n            mat4.ortho(this._projMatrix, this._left, this._right, this._bottom, this._top, this._near, this._far);\n            this._dirty = false;\n        }\n        return this._projMatrix;\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/orthographic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 655,
    "kind": "class",
    "name": "Orthographic",
    "memberof": "viewer/orthographic.js",
    "static": true,
    "longname": "viewer/orthographic.js~Orthographic",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/orthographic.js",
    "importStyle": "{Orthographic}",
    "description": "Configures orthographic projection mode for the camera.\nIn this projection mode, an object's size in the rendered image stays constant regardless of its distance} from the camera.\nOrthographic projection is represented as a viewing frustum, given as six planes.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 656,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 657,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/orthographic.js~Orthographic",
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 658,
    "kind": "member",
    "name": "_projMatrix",
    "memberof": "viewer/orthographic.js~Orthographic",
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#_projMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 659,
    "kind": "member",
    "name": "_left",
    "memberof": "viewer/orthographic.js~Orthographic",
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#_left",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 660,
    "kind": "member",
    "name": "_bottom",
    "memberof": "viewer/orthographic.js~Orthographic",
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#_bottom",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 661,
    "kind": "member",
    "name": "_near",
    "memberof": "viewer/orthographic.js~Orthographic",
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#_near",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 662,
    "kind": "member",
    "name": "_right",
    "memberof": "viewer/orthographic.js~Orthographic",
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#_right",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "member",
    "name": "_top",
    "memberof": "viewer/orthographic.js~Orthographic",
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#_top",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 664,
    "kind": "member",
    "name": "_far",
    "memberof": "viewer/orthographic.js~Orthographic",
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#_far",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "member",
    "name": "_dirty",
    "memberof": "viewer/orthographic.js~Orthographic",
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#_dirty",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "_setDirty",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#_setDirty",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 668,
    "kind": "set",
    "name": "left",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#left",
    "access": "public",
    "description": "Sets the position of the left plane on the negative View-space X-axis.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "Position of the left plane."
      }
    ]
  },
  {
    "__docId__": 670,
    "kind": "get",
    "name": "left",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#left",
    "access": "public",
    "description": "Gets the position of the left plane on the negative View-space X-axis.",
    "lineNumber": 41,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Position of the left plane."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "set",
    "name": "bottom",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#bottom",
    "access": "public",
    "description": "Sets the position of bottom plane on the negative View-space Y-axis.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom",
        "description": "Position of the bottom plane."
      }
    ]
  },
  {
    "__docId__": 673,
    "kind": "get",
    "name": "bottom",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#bottom",
    "access": "public",
    "description": "Gets the position of bottom plane on the negative View-space Y-axis.",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Position of the bottom plane."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 674,
    "kind": "set",
    "name": "near",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#near",
    "access": "public",
    "description": "Sets the position of the near plane on the positive View-space Z-axis. Default is 0.1.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "near",
        "description": "Position of the near clipping plane. The valid range is between 0 and the current value of the far plane"
      }
    ]
  },
  {
    "__docId__": 676,
    "kind": "get",
    "name": "near",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#near",
    "access": "public",
    "description": "Gets the position of the near plane on the positive View-space Z-axis.",
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Position of the near clipping plane."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 677,
    "kind": "set",
    "name": "right",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#right",
    "access": "public",
    "description": "Sets the position of the right plane on the positive View-space X-axis.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "Position of the right plane."
      }
    ]
  },
  {
    "__docId__": 679,
    "kind": "get",
    "name": "right",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#right",
    "access": "public",
    "description": "Gets the position of the right plane on the positive View-space X-axis.",
    "lineNumber": 100,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Position of the right plane."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "set",
    "name": "top",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#top",
    "access": "public",
    "description": "Sets the position of the top plane on the positive View-space Y-axis.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "top",
        "description": "Position of the top plane."
      }
    ]
  },
  {
    "__docId__": 682,
    "kind": "get",
    "name": "top",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#top",
    "access": "public",
    "description": "Gets the position of the top plane on the positive View-space Y-axis.",
    "lineNumber": 119,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Position of the top plane."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 683,
    "kind": "set",
    "name": "far",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#far",
    "access": "public",
    "description": "Sets the position of the far plane on the positive View-space Z-axis. Default is 5000.",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "far",
        "description": "Position of the far clipping plane. The valid range is between the current value of the near plane and infinity."
      }
    ]
  },
  {
    "__docId__": 685,
    "kind": "get",
    "name": "far",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#far",
    "access": "public",
    "description": "Gets the position of the far clipping plane on the positive View-space Z-axis.",
    "lineNumber": 138,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Position of the far clipping plane."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "get",
    "name": "projMatrix",
    "memberof": "viewer/orthographic.js~Orthographic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/orthographic.js~Orthographic#projMatrix",
    "access": "public",
    "description": "Gets the current orthographic projection transform matrix.\n\nThis will be the camera's current projection matrix when it's in orthographic projection mode.",
    "lineNumber": 149,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "4x4 column-order matrix as an array of 16 contiguous floats."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 688,
    "kind": "file",
    "name": "viewer/perspective.js",
    "content": "/**\n * Configures perspective projection mode for the camera.\n * Perspective projection is represented as a viewing frustum, given as six planes, along with a field of view (FOV) angle.\n */\nexport class Perspective {\n\n    constructor(viewer) {\n        this.viewer = viewer;\n        this._projMatrix = mat4.create();\n        this._projMatrixInverted = mat4.create();\n        this._fov = 45;\n        this._near = 0.01;\n        this._far = 100;\n        this._dirty = true;\n    }\n\n    _setDirty() {\n        this._dirty = true;\n        this.viewer.dirty = true;\n    }\n\n    build() {\n        var aspect = this.viewer.width / this.viewer.height;\n        mat4.perspective(this._projMatrix, this._fov * Math.PI / 180.0, aspect, this._near, this._far);\n        mat4.invert(this._projMatrixInverted, this._projMatrix);\n        this._dirty = false;\n    }\n\n    /**\n     Sets the frustum's vertical field of view,} from bottom to top of view, in degrees. Default is 45.\n\n     @param {Number} fov Field of view angle, in degrees.\n     */\n    set fov(fov) {\n        fov = fov || 45;\n        fov = Math.min(fov, 120);\n        this._fov = fov;\n        this._setDirty();\n    }\n\n    /**\n     Gets the frustum's vertical field of view,} from bottom to top of view, in degrees.\n\n     @return {Number} Field of view angle, in degrees.\n     */\n    get fov() {\n        return this._fov;\n    }\n\n    /**\n     Sets the position of the near plane on the positive View-space Z-axis. Default is 0.1.\n\n     @param {Number} near Position of the near clipping plane. The valid range is between 0 and the current value of the far plane\n     */\n    set near(near) {\n        this._near = near || 0.01;\n        this._setDirty();\n    }\n\n    /**\n     Gets the position of the near plane on the positive View-space Z-axis.\n\n     @return {Number} Position of the near clipping plane.\n     */\n    get near() {\n        return this._near;\n    }\n\n    /**\n     Sets the position of the far plane on the positive View-space Z-axis. Default is 5000.\n\n     @param {Number} far Position of the far clipping plane. The valid range is between the current value of the near plane and infinity.\n     */\n    set far(far) {\n        this._far = far || 5000;\n        this._setDirty();\n    }\n\n    /**\n     Gets the position of the far clipping plane on the positive View-space Z-axis.\n\n     @return {Number} Position of the far clipping plane.\n     */\n    get far() {\n        return this._far;\n    }\n\n    /**\n     Gets the current projection projection transform matrix.\n\n     This will be the camera's current projection matrix when it's in perspective projection mode.\n\n     @return {Float32Array} 4x4 column-order matrix as an array of 16 contiguous floats.\n     */\n    get projMatrix() {\n        if (this._dirty) {\n            this.build();\n        }\n        return this._projMatrix;\n    }\n\n    get projMatrixInverted() {\n        if (this._dirty) {\n            this.build();\n        }\n        return this._projMatrixInverted;\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/perspective.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 689,
    "kind": "class",
    "name": "Perspective",
    "memberof": "viewer/perspective.js",
    "static": true,
    "longname": "viewer/perspective.js~Perspective",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/perspective.js",
    "importStyle": "{Perspective}",
    "description": "Configures perspective projection mode for the camera.\nPerspective projection is represented as a viewing frustum, given as six planes, along with a field of view (FOV) angle.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 690,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 691,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/perspective.js~Perspective",
    "static": false,
    "longname": "viewer/perspective.js~Perspective#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 692,
    "kind": "member",
    "name": "_projMatrix",
    "memberof": "viewer/perspective.js~Perspective",
    "static": false,
    "longname": "viewer/perspective.js~Perspective#_projMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 693,
    "kind": "member",
    "name": "_projMatrixInverted",
    "memberof": "viewer/perspective.js~Perspective",
    "static": false,
    "longname": "viewer/perspective.js~Perspective#_projMatrixInverted",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 694,
    "kind": "member",
    "name": "_fov",
    "memberof": "viewer/perspective.js~Perspective",
    "static": false,
    "longname": "viewer/perspective.js~Perspective#_fov",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 695,
    "kind": "member",
    "name": "_near",
    "memberof": "viewer/perspective.js~Perspective",
    "static": false,
    "longname": "viewer/perspective.js~Perspective#_near",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 696,
    "kind": "member",
    "name": "_far",
    "memberof": "viewer/perspective.js~Perspective",
    "static": false,
    "longname": "viewer/perspective.js~Perspective#_far",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 697,
    "kind": "member",
    "name": "_dirty",
    "memberof": "viewer/perspective.js~Perspective",
    "static": false,
    "longname": "viewer/perspective.js~Perspective#_dirty",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "_setDirty",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#_setDirty",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "build",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#build",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 702,
    "kind": "set",
    "name": "fov",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#fov",
    "access": "public",
    "description": "Sets the frustum's vertical field of view,} from bottom to top of view, in degrees. Default is 45.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fov",
        "description": "Field of view angle, in degrees."
      }
    ]
  },
  {
    "__docId__": 704,
    "kind": "get",
    "name": "fov",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#fov",
    "access": "public",
    "description": "Gets the frustum's vertical field of view,} from bottom to top of view, in degrees.",
    "lineNumber": 46,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Field of view angle, in degrees."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 705,
    "kind": "set",
    "name": "near",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#near",
    "access": "public",
    "description": "Sets the position of the near plane on the positive View-space Z-axis. Default is 0.1.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "near",
        "description": "Position of the near clipping plane. The valid range is between 0 and the current value of the far plane"
      }
    ]
  },
  {
    "__docId__": 707,
    "kind": "get",
    "name": "near",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#near",
    "access": "public",
    "description": "Gets the position of the near plane on the positive View-space Z-axis.",
    "lineNumber": 65,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Position of the near clipping plane."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 708,
    "kind": "set",
    "name": "far",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#far",
    "access": "public",
    "description": "Sets the position of the far plane on the positive View-space Z-axis. Default is 5000.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "far",
        "description": "Position of the far clipping plane. The valid range is between the current value of the near plane and infinity."
      }
    ]
  },
  {
    "__docId__": 710,
    "kind": "get",
    "name": "far",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#far",
    "access": "public",
    "description": "Gets the position of the far clipping plane on the positive View-space Z-axis.",
    "lineNumber": 84,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Position of the far clipping plane."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 711,
    "kind": "get",
    "name": "projMatrix",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#projMatrix",
    "access": "public",
    "description": "Gets the current projection projection transform matrix.\n\nThis will be the camera's current projection matrix when it's in perspective projection mode.",
    "lineNumber": 95,
    "return": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": "4x4 column-order matrix as an array of 16 contiguous floats."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 712,
    "kind": "get",
    "name": "projMatrixInverted",
    "memberof": "viewer/perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/perspective.js~Perspective#projMatrixInverted",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 713,
    "kind": "file",
    "name": "viewer/programmanager.js",
    "content": "export const OBJECT_COLORS = 1;\r\nexport const VERTEX_QUANTIZATION = 2;\r\nexport const NORMAL_QUANTIZATION = 4;\r\nexport const COLOR_QUANTIZATION = 8;\r\nexport const REUSE = 16;\r\nexport const PICKING = 32;\r\nexport const LINE_PRIMITIVES = 64;\r\n\r\n/**\r\n * Keeps track of shader programs, glsl, uniform positions and vertex attributes\r\n */\r\nexport class ProgramManager {\r\n\t\r\n\tconstructor(gl, settings) {\r\n\t\tthis.gl = gl;\r\n\t\tthis.viewerBasePath = settings.viewerBasePath;\r\n\t\tthis.settings = settings;\r\n\t\tthis.loadedFiles = new Map();\r\n\t\tthis.programs = [];\r\n\t\tthis.promises = [];\r\n\t}\r\n\r\n\tgenerateSetup(key) {\r\n\t\tvar settings = {\r\n\t\t\tattributes: [],\r\n\t\t\tuniforms: []\r\n\t\t};\r\n\t\tif (key & LINE_PRIMITIVES) {\r\n\t\t\treturn key;\r\n\t\t}\r\n\t\tif (key & PICKING) {\r\n\t\t\tif (key & REUSE) {\r\n\t\t\t\tsettings.attributes.push(\"instancePickColors\");\r\n\t\t\t} else {\r\n\t\t\t\tsettings.attributes.push(\"vertexPickColor\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (key & REUSE) {\r\n\t\t\tsettings.attributes.push(\"instanceMatrices\");\r\n\t\t\tsettings.uniforms.push(\"numContainedInstances\");\r\n\t\t\tsettings.uniforms.push(\"containedInstances\");\r\n\t\t\tsettings.uniforms.push(\"containedMeansHidden\");\r\n\t\t\tif (!(key & PICKING)) {\r\n\t\t\t\tsettings.attributes.push(\"instanceNormalMatrices\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!(key & PICKING)) {\r\n\t\t\tif (key & OBJECT_COLORS) {\r\n\t\t\t\tsettings.uniforms.push(\"objectColor\");\r\n\t\t\t} else {\r\n\t\t\t\tsettings.attributes.push(\"vertexColor\");\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tif (key & NORMAL_QUANTIZATION) {\r\n\t\t\t// Has no effect on locations\r\n\t\t}\r\n\t\tif (key & VERTEX_QUANTIZATION) {\r\n\t\t\tsettings.uniforms.push(\"vertexQuantizationMatrix\");\r\n\t\t}\r\n\t\treturn settings;\r\n\t}\r\n\r\n\tload() {\r\n\t\tvar defaultSetup = {\r\n\t\t\tattributes: [\r\n\t\t\t\t\"vertexPosition\",\r\n\t\t\t\t\"vertexNormal\"\r\n\t\t\t\t],\r\n\t\t\tuniforms: [\r\n\t\t\t\t\"projectionMatrix\",\r\n\t\t\t\t\"viewNormalMatrix\",\r\n\t\t\t\t\"viewMatrix\",\r\n\t\t\t\t\"sectionPlane\"\r\n\t\t\t],\r\n\t\t\tuniformBlocks: [\r\n\t\t\t\t\"LightData\"\r\n\t\t\t]\r\n\t\t};\r\n\t\tvar defaultSetupForPicking = {\r\n\t\t\tattributes: [\r\n\t\t\t\t\"vertexPosition\"\r\n\t\t\t\t],\r\n\t\t\tuniforms: [\r\n\t\t\t\t\"projectionMatrix\",\r\n\t\t\t\t\"viewMatrix\",\r\n\t\t\t\t\"sectionPlane\"\r\n\t\t\t\t],\r\n\t\t\tuniformBlocks: [\r\n\t\t\t]\r\n\t\t};\r\n\r\n\t\t{\r\n\t\t\tlet picking = false;\r\n\t\t\tfor (var instancing of [true, false]) {\r\n\t\t\t\tvar key = this.createKey(instancing, picking);\r\n\t\t\t\tthis.generateShaders(defaultSetup, key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Line primitives\r\n\r\n\t\t// Some line renderer do not use quantization (which is actually better for low-triangle-counts)\r\n\t\t// Others do (outline fore example potentialy draws a lot, also it's faster to copy if the regular geometry is already quantized)\r\n\t\tfor (var quantization of [true, false]) {\r\n\t\t\tlet lineUniforms = [\r\n\t\t\t\t\"matrix\",\r\n\t\t\t\t\"inputColor\",\r\n\t\t\t\t\"projectionMatrix\",\r\n\t\t\t\t\"viewMatrix\",\r\n\t\t\t\t\"aspect\",\r\n\t\t\t\t\"thickness\"\r\n\t\t\t];\r\n\t\t\tvar key = LINE_PRIMITIVES;\r\n\t\t\tif (quantization) {\r\n\t\t\t\tlineUniforms.push(\"vertexQuantizationMatrix\");\r\n\t\t\t\tkey |= VERTEX_QUANTIZATION;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.setupProgram(this.viewerBasePath + \"shaders/vertex.glsl\", this.viewerBasePath + \"shaders/fragment.glsl\", {\r\n\t\t\t\tattributes: [\"vertexPosition\", \"nextVertexPosition\", \"direction\"],\r\n\t\t\t\tuniforms: lineUniforms\r\n\t\t\t}, this.generateSetup(key), key);\r\n\t\t}\r\n\r\n        //  Picking shaders\r\n\t\t{\r\n\t\t\tlet picking = true;\r\n\t\t\tfor (var instancing of [true, false]) {\r\n\t\t\t\tvar key = this.createKey(instancing, picking);\r\n\t\t\t\tthis.generateShaders(defaultSetupForPicking, key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n        return Promise.all(this.promises);\r\n\t}\r\n\t\r\n\tgenerateShaders(defaultSetup, key) {\r\n\t\tvar vertexShaderName = this.getVertexShaderName();\r\n\t\tvar fragShaderName = \"shaders/fragment.glsl\";\r\n\t\tthis.setupProgram(this.viewerBasePath + vertexShaderName, this.viewerBasePath + fragShaderName, defaultSetup, this.generateSetup(key), key);\r\n\t}\r\n\r\n\tgetVertexShaderName() {\r\n\t\treturn \"shaders/vertex.glsl\";\r\n\t}\r\n\r\n\tcreateKey(reuse, picking) {\r\n\t\tvar key = 0;\r\n\t\tkey |= (this.settings.useObjectColors ? OBJECT_COLORS : 0);\r\n\t\tkey |= (this.settings.quantizeVertices ? VERTEX_QUANTIZATION : 0);\r\n\t\tkey |= ((!picking && this.settings.quantizeNormals) ? NORMAL_QUANTIZATION : 0);\r\n\t\tkey |= ((!picking && this.settings.quantizeColors) ? COLOR_QUANTIZATION : 0);\r\n\t\tkey |= (reuse ? REUSE : 0);\r\n\t\tkey |= (picking ? PICKING : 0);\r\n\t\treturn key;\r\n\t}\r\n\t\r\n\t// Only used for debugging\r\n\tkeyToJson(key) {\r\n\t\treturn {\r\n\t\t\tuseObjectColors: (key & OBJECT_COLORS) ? true : false,\r\n\t\t\tquantizeVertices: (key & VERTEX_QUANTIZATION) ? true : false,\r\n\t\t\tquantizeNormals: (key & NORMAL_QUANTIZATION) ? true : false,\r\n\t\t\tquantizeColors: (key & COLOR_QUANTIZATION) ? true : false,\r\n\t\t\treuse: (key & REUSE) ? true : false,\r\n\t\t\tpicking: (key & PICKING) ? true : false,\r\n\t\t\tlinePrimitives: (key & LINE_PRIMITIVES) ? true : false\r\n\t\t};\r\n\t}\r\n\t\r\n\tgetProgram(key) {\r\n//\t\tconsole.log(\"getProgram\", key, this.keyToJson(key));\r\n\t\tvar program = this.programs[key];\r\n\t\tif (program != null) {\r\n\t\t\treturn program;\r\n\t\t}\r\n\t\tconsole.error(\"Program not found\", key);\r\n//\t\tthis.programNames = this.programNames || {};\r\n//\t\tvar vertexShaderName = this.getVertexShaderName(key);\r\n//\t\tif (!this.programNames[vertexShaderName]) {\r\n//\t\t\tconsole.log(\"getProgram(..) -> \" + vertexShaderName);\r\n//\t\t\tthis.programNames[vertexShaderName] = true;\r\n//\t\t}\r\n//\r\n//\t\tprogram = this.programs[key];\r\n//\t\tif (program == null) {\r\n//\t\t\tconsole.error(\"Program not found\", key);\r\n//\t\t}\r\n//\t\treturn program;\r\n\t}\r\n\r\n\tsetProgram(key, program) {\r\n\t\tthis.programs[key] = program;\r\n\t}\r\n\r\n\tsetupProgram(vertexShader, fragmentShader, defaultSetup, specificSetup, key) {\r\n//\t\tconsole.log(\"setupProgram\", key, this.keyToJson(key));\r\n\t\tvar p = new Promise((resolve, reject) => {\r\n\t\t\tthis.loadShaderFile(vertexShader).then((vsSource) => {\r\n\t\t\t\tthis.loadShaderFile(fragmentShader).then((fsSource) => {\r\n\t\t\t\t\tvar shaderProgram = this.initShaderProgram(this.gl, vertexShader, vsSource, fragmentShader, fsSource, key);\r\n\r\n\t\t\t\t\tvar programInfo = {\r\n\t\t\t\t\t\tprogram: shaderProgram,\r\n\t\t\t\t\t\tattribLocations: {},\r\n\t\t\t\t\t\tuniformLocations: {},\r\n\t\t\t\t\t\tuniformBlocks: {}\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t//console.log(\"----------------------------------------\");\r\n\t\t\t\t\t//console.log(\"setupProgram (\" + vertexShader + \", \" + fragmentShader + \")\");\r\n\r\n\t\t\t\t\tfor (var setup of [defaultSetup, specificSetup]) {\r\n\t\t\t\t\t\tif (setup.attributes != null) {\r\n\t\t\t\t\t\t\t//console.log(\"attributes:\");\r\n\t\t\t\t\t\t\tfor (var attribute of setup.attributes) {\r\n\t\t\t\t\t\t\t\tlet res = programInfo.attribLocations[attribute] = this.gl.getAttribLocation(shaderProgram, attribute);\r\n\t\t\t\t\t\t\t\tif (res === -1) {\r\n\t\t\t\t\t\t\t\t\tconsole.error(\"Missing attribute location\", attribute, vertexShader, this.keyToJson(key));\r\n\t\t\t\t\t\t\t\t\tdebugger;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (setup.uniforms != null) {\r\n\t\t\t\t\t\t\t// @todo can also use getUniformIndices()\r\n\t\t\t\t\t\t\tfor (var uniform of setup.uniforms) {\r\n\t\t\t\t\t\t\t\tlet res = programInfo.uniformLocations[uniform] = this.gl.getUniformLocation(shaderProgram, uniform);\r\n\t\t\t\t\t\t\t\tif (res === null) {\r\n\t\t\t\t\t\t\t\t\tconsole.error(\"Missing uniform location\", uniform, vertexShader, this.keyToJson(key));\r\n\t\t\t\t\t\t\t\t\tdebugger;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (setup.uniformBlocks != null) {\r\n\t\t\t\t\t\t\tif (setup.uniformBlocks != null) {\r\n\t\t\t\t\t\t\t\tfor (var uniformBlock of setup.uniformBlocks) {\r\n\t\t\t\t\t\t\t\t\tlet res = programInfo.uniformBlocks[uniformBlock] = this.gl.getUniformBlockIndex(shaderProgram, uniformBlock);\r\n\t\t\t\t\t\t\t\t\tif (res == -1) {\r\n\t\t\t\t\t\t\t\t\t\tconsole.error(\"Missing uniformBlock '\" + uniformBlock + \"' = \" + programInfo.uniformBlocks[uniformBlock], this.keyToJson(key));\r\n\t\t\t\t\t\t\t\t\t\tdebugger;\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tthis.gl.uniformBlockBinding(shaderProgram, programInfo.uniformBlocks[uniformBlock], 0);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tprogramInfo.vertexShaderFile = vertexShader;\r\n\t\t\t\t\tprogramInfo.fragmentShaderFile = fragmentShader;\r\n\r\n\t\t\t\t\tthis.setProgram(key, programInfo);\r\n\r\n\t\t\t\t\tresolve(programInfo);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.promises.push(p);\r\n\r\n\t\treturn p;\r\n\t}\r\n\r\n\tloadShaderFile(filename) {\r\n\t\tif (this.loadedFiles.has(filename)) {\r\n\t\t\treturn this.loadedFiles.get(filename);\r\n\t\t}\r\n\t\tvar promise = new Promise((resolve, reject) => {\r\n\t\t\tvar request = new XMLHttpRequest();\r\n\t\t\trequest.open(\"GET\", filename, true);\r\n\t\t\trequest.addEventListener(\"load\", () => {\r\n\t\t\t\tresolve(request.responseText);\r\n\t\t\t});\r\n\t\t\trequest.send();\r\n\t\t});\r\n\t\tthis.loadedFiles.set(filename, promise);\r\n\t\treturn promise;\r\n\t}\r\n\r\n\tinitShaderProgram(gl, vsName, vsSource, fsName, fsSource, key) {\r\n\t\tconst vertexShader = this.loadShader(gl, gl.VERTEX_SHADER, vsName, vsSource, key);\r\n\t\tconst fragmentShader = this.loadShader(gl, gl.FRAGMENT_SHADER, fsName, fsSource, key);\r\n\r\n\t\tconst shaderProgram = gl.createProgram();\r\n\t\tgl.attachShader(shaderProgram, vertexShader);\r\n\t\tgl.attachShader(shaderProgram, fragmentShader);\r\n\t\tgl.linkProgram(shaderProgram);\r\n\r\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n\t\t\tconsole.error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn shaderProgram;\r\n\t}\r\n\r\n\tloadShader(gl, type, name, source, key) {\r\n\t\tvar fullSource = \"#version 300 es\\n\\n\";\r\n\t\t// TODO would be nice to be able to access the constants generically, or use some sort of enum?\r\n\t\tif (key & OBJECT_COLORS) {\r\n\t\t\tfullSource += `#define WITH_USEOBJECTCOLORS\\n`;\r\n\t\t}\r\n\t\tif (key & VERTEX_QUANTIZATION) {\r\n\t\t\tfullSource += `#define WITH_QUANTIZEVERTICES\\n`;\r\n\t\t}\r\n\t\tif (key & NORMAL_QUANTIZATION) {\r\n\t\t\tfullSource += `#define WITH_QUANTIZENORMALS\\n`;\r\n\t\t}\r\n\t\tif (key & COLOR_QUANTIZATION) {\r\n\t\t\tfullSource += `#define WITH_QUANTIZECOLORS\\n`;\r\n\t\t}\r\n\t\tif (key & REUSE) {\r\n\t\t\tfullSource += `#define WITH_INSTANCING\\n`;\r\n\t\t}\r\n\t\tif (key & PICKING) {\r\n\t\t\tfullSource += `#define WITH_PICKING\\n`;\r\n\t\t}\r\n\t\tif (key & LINE_PRIMITIVES) {\r\n\t\t\tfullSource += `#define WITH_LINEPRIMITIVES\\n`;\r\n\t\t}\r\n\t\t\r\n\t\tfullSource += \"\\n\" + source;\r\n\t\tconst shader = gl.createShader(type);\r\n\t\tgl.shaderSource(shader, fullSource);\r\n\t\tgl.compileShader(shader);\r\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n\t\t\tconsole.error(name);\r\n\t\t\tconsole.error(fullSource);\r\n\t\t\tconsole.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n\t\t\tgl.deleteShader(shader);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn shader;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/programmanager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 714,
    "kind": "variable",
    "name": "OBJECT_COLORS",
    "memberof": "viewer/programmanager.js",
    "static": true,
    "longname": "viewer/programmanager.js~OBJECT_COLORS",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/programmanager.js",
    "importStyle": "{OBJECT_COLORS}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 715,
    "kind": "variable",
    "name": "VERTEX_QUANTIZATION",
    "memberof": "viewer/programmanager.js",
    "static": true,
    "longname": "viewer/programmanager.js~VERTEX_QUANTIZATION",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/programmanager.js",
    "importStyle": "{VERTEX_QUANTIZATION}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "variable",
    "name": "NORMAL_QUANTIZATION",
    "memberof": "viewer/programmanager.js",
    "static": true,
    "longname": "viewer/programmanager.js~NORMAL_QUANTIZATION",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/programmanager.js",
    "importStyle": "{NORMAL_QUANTIZATION}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 717,
    "kind": "variable",
    "name": "COLOR_QUANTIZATION",
    "memberof": "viewer/programmanager.js",
    "static": true,
    "longname": "viewer/programmanager.js~COLOR_QUANTIZATION",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/programmanager.js",
    "importStyle": "{COLOR_QUANTIZATION}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 718,
    "kind": "variable",
    "name": "REUSE",
    "memberof": "viewer/programmanager.js",
    "static": true,
    "longname": "viewer/programmanager.js~REUSE",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/programmanager.js",
    "importStyle": "{REUSE}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 719,
    "kind": "variable",
    "name": "PICKING",
    "memberof": "viewer/programmanager.js",
    "static": true,
    "longname": "viewer/programmanager.js~PICKING",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/programmanager.js",
    "importStyle": "{PICKING}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 720,
    "kind": "variable",
    "name": "LINE_PRIMITIVES",
    "memberof": "viewer/programmanager.js",
    "static": true,
    "longname": "viewer/programmanager.js~LINE_PRIMITIVES",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/programmanager.js",
    "importStyle": "{LINE_PRIMITIVES}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 721,
    "kind": "class",
    "name": "ProgramManager",
    "memberof": "viewer/programmanager.js",
    "static": true,
    "longname": "viewer/programmanager.js~ProgramManager",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/programmanager.js",
    "importStyle": "{ProgramManager}",
    "description": "Keeps track of shader programs, glsl, uniform positions and vertex attributes",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 722,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 723,
    "kind": "member",
    "name": "gl",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#gl",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 724,
    "kind": "member",
    "name": "viewerBasePath",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#viewerBasePath",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#settings",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "member",
    "name": "loadedFiles",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#loadedFiles",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 727,
    "kind": "member",
    "name": "programs",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#programs",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 728,
    "kind": "member",
    "name": "promises",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#promises",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "generateSetup",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#generateSetup",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#load",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "generateShaders",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#generateShaders",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "defaultSetup",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "getVertexShaderName",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#getVertexShaderName",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "createKey",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#createKey",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "reuse",
        "types": [
          "*"
        ]
      },
      {
        "name": "picking",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "keyToJson",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#keyToJson",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"useObjectColors\": *, \"quantizeVertices\": *, \"quantizeNormals\": *, \"quantizeColors\": *, \"reuse\": *, \"picking\": *, \"linePrimitives\": *}"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "getProgram",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#getProgram",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "setProgram",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#setProgram",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "program",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "setupProgram",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#setupProgram",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "params": [
      {
        "name": "vertexShader",
        "types": [
          "*"
        ]
      },
      {
        "name": "fragmentShader",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultSetup",
        "types": [
          "*"
        ]
      },
      {
        "name": "specificSetup",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "loadShaderFile",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#loadShaderFile",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [
      {
        "name": "filename",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "initShaderProgram",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#initShaderProgram",
    "access": "public",
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "vsName",
        "types": [
          "*"
        ]
      },
      {
        "name": "vsSource",
        "types": [
          "*"
        ]
      },
      {
        "name": "fsName",
        "types": [
          "*"
        ]
      },
      {
        "name": "fsSource",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "loadShader",
    "memberof": "viewer/programmanager.js~ProgramManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/programmanager.js~ProgramManager#loadShader",
    "access": "public",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 741,
    "kind": "file",
    "name": "viewer/projecttreemodel.js",
    "content": "import {TreeModel} from './treemodel.js'\r\n\r\n/**\r\n * A quick and dirty tree model, this is used in both the dev.js and interactive.js apps\r\n */\r\nexport class ProjectTreeModel extends TreeModel{\r\n\tconstructor(bimServerApi, view) {\r\n\t\tsuper(view);\r\n\t\tthis.subDiv = view.rootElement;\r\n\t\twhile (this.subDiv.firstChild) {\r\n\t\t\tthis.subDiv.removeChild(this.subDiv.firstChild);\r\n\t\t}\r\n\t\tthis.bimServerApi = bimServerApi;\r\n\t\tthis.poidToProject = new Map();\r\n\t}\r\n\r\n\tload(clickFn) {\r\n\t\tthis.bimServerApi.call(\"ServiceInterface\", \"getAllProjects\", {\r\n\t\t\tonlyTopLevel: false,\r\n\t\t\tonlyActive: true\r\n\t\t}, (projects) => {\r\n\t\t\tif (projects.length == 0) {\r\n\t\t\t\tvar node = this.add(\"No projects\");\r\n\t\t\t\tnode.show();\r\n\t\t\t}\r\n\t\t\tfor (var p of projects) {\r\n\t\t\t\tthis.poidToProject.set(p.oid, p);\r\n\t\t\t\tp.subProjects = [];\r\n\t\t\t}\r\n\t\t\tfor (var p of projects) {\r\n\t\t\t\tif (p.parentId != -1) {\r\n\t\t\t\t\tthis.poidToProject.get(p.parentId).subProjects.push(p);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (var p of projects) {\r\n\t\t\t\tif (p.parentId == -1) {\r\n\t\t\t\t\tthis.addProject(null, p, clickFn);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\taddProject(parentNode, project, clickFn) {\r\n\t\tif (project.lastRevisionId == -1 && project.subProjects.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (parentNode == null) {\r\n\t\t\tvar node = this.add(project.name);\r\n\t\t} else {\r\n\t\t\tvar node = parentNode.add(project.name);\r\n\t\t}\r\n\t\tif (project.lastRevisionId != -1) {\r\n\t\t\tnode.click(clickFn);\r\n\t\t}\r\n\t\tnode.project = project;\r\n\t\tnode.show();\r\n\r\n\t\tvar mainProject = this.poidToProject.get(project.oid);\r\n\t\tif (mainProject != null) {\r\n\t\t\tfor (var subProject of mainProject.subProjects) {\r\n\t\t\t\tthis.addProject(node, subProject, clickFn);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/projecttreemodel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 742,
    "kind": "class",
    "name": "ProjectTreeModel",
    "memberof": "viewer/projecttreemodel.js",
    "static": true,
    "longname": "viewer/projecttreemodel.js~ProjectTreeModel",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/projecttreemodel.js",
    "importStyle": "{ProjectTreeModel}",
    "description": "A quick and dirty tree model, this is used in both the dev.js and interactive.js apps",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "viewer/treemodel.js~TreeModel"
    ]
  },
  {
    "__docId__": 743,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/projecttreemodel.js~ProjectTreeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/projecttreemodel.js~ProjectTreeModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 744,
    "kind": "member",
    "name": "subDiv",
    "memberof": "viewer/projecttreemodel.js~ProjectTreeModel",
    "static": false,
    "longname": "viewer/projecttreemodel.js~ProjectTreeModel#subDiv",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "member",
    "name": "bimServerApi",
    "memberof": "viewer/projecttreemodel.js~ProjectTreeModel",
    "static": false,
    "longname": "viewer/projecttreemodel.js~ProjectTreeModel#bimServerApi",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "member",
    "name": "poidToProject",
    "memberof": "viewer/projecttreemodel.js~ProjectTreeModel",
    "static": false,
    "longname": "viewer/projecttreemodel.js~ProjectTreeModel#poidToProject",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/projecttreemodel.js~ProjectTreeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/projecttreemodel.js~ProjectTreeModel#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "clickFn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "addProject",
    "memberof": "viewer/projecttreemodel.js~ProjectTreeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/projecttreemodel.js~ProjectTreeModel#addProject",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "parentNode",
        "types": [
          "*"
        ]
      },
      {
        "name": "project",
        "types": [
          "*"
        ]
      },
      {
        "name": "clickFn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 749,
    "kind": "file",
    "name": "viewer/renderbuffer.js",
    "content": "export const COLOR_FLOAT_DEPTH_NORMAL = 0xff01;\nexport const COLOR_ALPHA_DEPTH = 0xff02;\n\n/**\n *\n * @ignore\n * @export\n * @class RenderBuffer\n */\nexport class RenderBuffer {\n\n    constructor(canvas, gl, purpose, supersample) {\n        this.gl = gl;\n        this.allocated = false;\n        this.canvas = canvas;\n        this.buffer = null;\n        this.bound = false;\n        this.purpose = purpose;\n        this.supersample = supersample || 1;\n    }\n\n    bind() {\n        this._touch();\n        /* if (this.bound) {\n            return;\n        } */\n        var gl = this.gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.buffer.framebuf);\n        gl.drawBuffers(this.attachments);\n        gl.viewport(0, 0, this.buffer.width, this.buffer.height);\n        this.bound = true;\n    }\n\n    _touch() { // Lazy-creates buffer if needed, resizes to canvas if needed\n        var gl = this.gl;\n        var width = this.canvas.clientWidth * this.supersample;\n        var height = this.canvas.clientHeight * this.supersample;\n        if (this.buffer) {\n            if (this.buffer.width === width && this.buffer.height === height) {\n                return;\n            } else {\n                gl.deleteTexture(this.buffer.texture);\n                gl.deleteFramebuffer(this.buffer.framebuf);\n                gl.deleteRenderbuffer(this.buffer.renderbuf);\n            }\n        }\n\n        // var ext = gl.getExtension('WEBGL_draw_buffers');\n        var ext = gl.getExtension('EXT_color_buffer_float');\n        if (!ext) {\n            throw \"EXT_color_buffer_float is required\";\n        }\n\n        var framebuf = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n\n        let attachments = this.attachments = [gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1];\n        let i = 0;\n        \n        let createTexture = (format) => {\n            let t = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, t);\n            gl.texStorage2D(gl.TEXTURE_2D, 1, format, width, height);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.supersample !== 1 ? gl.LINEAR : gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.supersample !== 1 ? gl.LINEAR : gl.NEAREST);\n    \n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, attachments[i++], gl.TEXTURE_2D, t, 0);\n            return t;\n        }\n\n        if (this.purpose === COLOR_FLOAT_DEPTH_NORMAL) {\n            this.attachments.push(gl.COLOR_ATTACHMENT2);\n\n            this.colorBuffer = createTexture(gl.RGBA8UI);\n            this.depthFloat = createTexture(gl.R32F);\n            // @todo, just have depth in normalBuffer.w?\n            this.normalBuffer = createTexture(gl.RGBA32F);            \n        } else if (this.purpose === COLOR_ALPHA_DEPTH) {\n            this.colorBuffer = createTexture(gl.RGBA16F);\n            this.alphaBuffer = createTexture(gl.R16F);\n        } else {\n            throw \"Unknown purpose\";\n        }\n\n        this.depthBuffer = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthBuffer);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        // Verify framebuffer is OK\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n        if (!gl.isFramebuffer(framebuf)) {\n            throw \"Invalid framebuffer\";\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n        switch (status) {\n            case gl.FRAMEBUFFER_COMPLETE:\n                break;\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\n            case gl.FRAMEBUFFER_UNSUPPORTED:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED\";\n            default:\n                throw \"Incomplete framebuffer: \" + status;\n        }\n        this.buffer = {framebuf: framebuf, depthBuffer: this.depthBuffer, colorBuffer: this.colorBuffer, width: width, height: height};\n        this.bound = false;\n    }\n\n    clear(depth) {\n        if (!this.bound) {\n            throw \"Render buffer not bound\";\n        }\n        var gl = this.gl;\n        gl.clear(gl.COLOR_BUFFER_BIT | ((depth === false) ? 0 : gl.DEPTH_BUFFER_BIT));\n    }\n\n    read(pickX, pickY) {\n        var x = pickX;\n        var y = this.canvas.height - pickY;\n        var pix = new Uint8Array(4);\n        var gl = this.gl;\n        gl.readBuffer(gl.COLOR_ATTACHMENT0);\n        gl.readPixels(x, y, 1, 1, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, pix);\n        return pix;\n    }\n\n    depth(pickX, pickY) {\n        var x = pickX;\n        var y = this.canvas.height - pickY;\n        var pix = new Float32Array(1);\n        var gl = this.gl;\n        gl.readBuffer(gl.COLOR_ATTACHMENT1);\n        gl.readPixels(x, y, 1, 1, gl.RED, gl.FLOAT, pix);\n        return pix;\n    }\n\n    normal(pickX, pickY) {\n        var x = pickX;\n        var y = this.canvas.height - pickY;\n        var pix = new Float32Array(4);\n        var gl = this.gl;\n        gl.readBuffer(gl.COLOR_ATTACHMENT2);\n        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.FLOAT, pix);\n        return pix;\n    }\n\n    unbind() {\n        var gl = this.gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        this.bound = false;\n    }\n\n    destroy() {\n        if (this.allocated) {\n            var gl = this.gl;\n            gl.deleteTexture(this.buffer.texture);\n            gl.deleteFramebuffer(this.buffer.framebuf);\n            gl.deleteRenderbuffer(this.buffer.renderbuf);\n            this.allocated = false;\n            this.buffer = null;\n            this.bound = false;\n        }\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/renderbuffer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 750,
    "kind": "variable",
    "name": "COLOR_FLOAT_DEPTH_NORMAL",
    "memberof": "viewer/renderbuffer.js",
    "static": true,
    "longname": "viewer/renderbuffer.js~COLOR_FLOAT_DEPTH_NORMAL",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/renderbuffer.js",
    "importStyle": "{COLOR_FLOAT_DEPTH_NORMAL}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 751,
    "kind": "variable",
    "name": "COLOR_ALPHA_DEPTH",
    "memberof": "viewer/renderbuffer.js",
    "static": true,
    "longname": "viewer/renderbuffer.js~COLOR_ALPHA_DEPTH",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/renderbuffer.js",
    "importStyle": "{COLOR_ALPHA_DEPTH}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 752,
    "kind": "class",
    "name": "RenderBuffer",
    "memberof": "viewer/renderbuffer.js",
    "static": true,
    "longname": "viewer/renderbuffer.js~RenderBuffer",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/renderbuffer.js",
    "importStyle": "{RenderBuffer}",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "RenderBuffer"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 753,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 754,
    "kind": "member",
    "name": "gl",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#gl",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "member",
    "name": "allocated",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#allocated",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 756,
    "kind": "member",
    "name": "canvas",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 757,
    "kind": "member",
    "name": "buffer",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#buffer",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 758,
    "kind": "member",
    "name": "bound",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#bound",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 759,
    "kind": "member",
    "name": "purpose",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#purpose",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 760,
    "kind": "member",
    "name": "supersample",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#supersample",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "method",
    "name": "bind",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#bind",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 763,
    "kind": "method",
    "name": "_touch",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#_touch",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 764,
    "kind": "member",
    "name": "colorBuffer",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#colorBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 765,
    "kind": "member",
    "name": "depthFloat",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#depthFloat",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "normalBuffer",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#normalBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "member",
    "name": "alphaBuffer",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#alphaBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 769,
    "kind": "member",
    "name": "depthBuffer",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#depthBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "method",
    "name": "clear",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#clear",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "depth",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "read",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#read",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "pickX",
        "types": [
          "*"
        ]
      },
      {
        "name": "pickY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "depth",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#depth",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "pickX",
        "types": [
          "*"
        ]
      },
      {
        "name": "pickY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "normal",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#normal",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "pickX",
        "types": [
          "*"
        ]
      },
      {
        "name": "pickY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 776,
    "kind": "method",
    "name": "unbind",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#unbind",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 778,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/renderbuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderbuffer.js~RenderBuffer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 782,
    "kind": "file",
    "name": "viewer/renderlayer.js",
    "content": "import {BufferTransformer} from './buffertransformer.js'\r\nimport {Utils} from './utils.js'\r\nimport {GeometryCache} from './geometrycache.js'\r\nimport {FrozenBufferSet} from './frozenbufferset.js';\r\n\r\nconst selectionOutlineMatrix = mat4.create();\r\nconst outlineColor = new Float32Array([1.0, 0.5, 0.0, 1.0]);\r\nconst false_true = [false, true];\r\nconst UINT32_MAX = (new Uint32Array((new Int32Array([-1])).buffer))[0];\r\n\r\n/**\r\n * Abstract base class for managing and rendering buffers pertaining\r\n * to a render layer, ie. the base geometries always visible vs. the\r\n * dynamically visible tiles based on camera orientation.\r\n * \r\n * @export\r\n * @class RenderLayer\r\n */\r\nexport class RenderLayer {\r\n\t\r\n\tconstructor(viewer, geometryDataToReuse) {\r\n\t\tthis.settings = viewer.settings;\r\n\t\tthis.viewer = viewer;\r\n\t\tthis.gl = viewer.gl;\r\n\t\tthis.geometryDataToReuse = geometryDataToReuse;\r\n\t\tthis.geometryCache = new GeometryCache(this);\r\n\t\tthis.instanceSelectionData = new Uint32Array(128);\r\n\t\tthis.previousInstanceVisibilityState = null;\r\n\r\n\t\tthis.loaders = new Map();\r\n\t\tthis.bufferTransformer = new BufferTransformer(this.settings, viewer.vertexQuantization);\r\n\t}\r\n\r\n\tcreateGeometry(loaderId, roid, croid, geometryId, positions, normals, colors, color, indices, hasTransparency, reused) {\r\n\t\tvar bytesUsed = RenderLayer.calculateBytesUsed(this.settings, positions.length, colors.length, indices.length, normals.length);\r\n\t\tvar geometry = {\r\n\t\t\t\tid: geometryId,\r\n\t\t\t\troid: roid,\r\n\t\t\t\tcroid: croid,\r\n\t\t\t\tpositions: positions,\r\n\t\t\t\tnormals: normals,\r\n\t\t\t\tcolors: colors,\r\n\t\t\t\tcolor: color,\r\n\t\t\t\tindices: indices,\r\n\t\t\t\thasTransparency: hasTransparency,\r\n\t\t\t\treused: reused, // How many times this geometry is reused, this does not necessarily mean the viewer is going to utilize this reuse\r\n\t\t\t\treuseMaterialized: 0, // How many times this geometry has been reused in the viewer, when this number reaches \"reused\" we can flush the buffer fo' sho'\r\n\t\t\t\tbytes: bytesUsed,\r\n\t\t\t\tmatrices: [],\r\n\t\t\t\tobjects: []\r\n\t\t};\r\n\t\t\r\n\t\tvar loader = this.getLoader(loaderId);\r\n\r\n\t\tloader.geometries.set(geometryId, geometry);\r\n\t\tgeometry.isReused = geometry.reused > 1 && this.geometryDataToReuse != null && this.geometryDataToReuse.has(geometry.id);\r\n\t\tif (geometry.isReused) {\r\n\t\t\tthis.viewer.stats.inc(\"Models\", \"Geometries reused\");\r\n\t\t} else {\r\n\t\t\tthis.viewer.stats.inc(\"Models\", \"Geometries\");\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\t}\r\n\t\r\n\tstatic calculateBytesUsed(settings, nrVertices, nrColors, nrIndices, nrNormals) {\r\n\t\tvar bytes = 0;\r\n\t\tif (settings.quantizeVertices) {\r\n\t\t\tbytes += nrVertices * 2;\r\n\t\t} else {\r\n\t\t\tbytes += nrVertices * 4;\r\n\t\t}\r\n\t\tif (nrColors != null) {\r\n\t\t\tif (settings.quantizeColors) {\r\n\t\t\t\tbytes += nrColors;\r\n\t\t\t} else {\r\n\t\t\t\tbytes += nrColors * 4;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Pick buffers\r\n\t\tbytes += (nrVertices / 3) * 4;\r\n\t\tif (nrIndices < 65536 && settings.useSmallIndicesIfPossible) {\r\n\t\t\tbytes += nrIndices * 2;\r\n\t\t} else {\r\n\t\t\tbytes += nrIndices * 4;\r\n\t\t}\r\n\t\tif (settings.quantizeNormals) {\r\n\t\t\tbytes += nrNormals;\r\n\t\t} else {\r\n\t\t\tbytes += nrNormals * 4;\r\n\t\t}\r\n\t\treturn bytes;\r\n\t}\r\n\r\n\tcreateObject(loaderId, roid, oid, objectId, geometryIds, matrix, normalMatrix, scaleMatrix, hasTransparency, type, aabb, gpuBufferManager, node) {\r\n\t\tvar loader = this.getLoader(loaderId);\r\n\t\tvar object = {\r\n\t\t\tid: objectId,\r\n\t\t\tvisible: type != \"IfcOpeningElement\" && type != \"IfcSpace\",\r\n\t\t\thasTransparency: hasTransparency,\r\n\t\t\tmatrix: matrix,\r\n            normalMatrix: normalMatrix,\r\n\t\t\tscaleMatrix: scaleMatrix,\r\n\t\t\tgeometry: [],\r\n\t\t\troid: roid,\r\n//\t\t\t\tobject: this.viewer.model.objects[oid],\r\n\t\t\tadd: (geometryId, objectId) => {\r\n\t\t\t\tthis.addGeometryToObject(geometryId, objectId, loader, gpuBufferManager);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tloader.objects.set(oid, object);\r\n\r\n\t\tvar viewObject = {\r\n            type: type,\r\n\t\t\taabb: aabb,\r\n\t\t\tobjectId: objectId,\r\n\t\t\toid: oid,\r\n\t\t\tnode: node\r\n\t\t};\r\n\t\tthis.viewer.addViewObject(objectId, viewObject);\r\n\r\n\t\tgeometryIds.forEach((id) => {\r\n\t\t\tthis.addGeometryToObject(id, object.id, loader, gpuBufferManager);\r\n\t\t});\r\n\r\n\t\tthis.viewer.stats.inc(\"Models\", \"Objects\");\r\n\r\n\t\treturn object;\r\n\t}\r\n\r\n\taddGeometry(loaderId, geometry, object, buffer, sizes) {\r\n\t\tvar loaderQuantizeNormals = this.settings.loaderSettings.quantizeNormals;\r\n\t\tvar quantizeNormals = this.settings.quantizeNormals;\r\n\r\n\t\tvar startIndex = buffer.positionsIndex / 3;\r\n\r\n\t\ttry {\r\n\t\t\tvar vertex = vec3.create();\r\n\t\t\tfor (var i=0; i<geometry.positions.length; i+=3) {\r\n\t\t\t\t// When quantizeVertices is on and we use the buffers in a combined buffer (which is what this method, addGeometry does),\r\n\t\t\t\t// we need to un-quantize the vertices, transform them, then quantize them again (so the shaders can again unquantize them).\r\n\t\t\t\t// This because order does matter (object transformation sometimes even mirror stuff)\r\n\t\t\t\t// Obviously quantization slows down both CPU (only initially) and GPU (all the time)\r\n\t\t\t\tvertex[0] = geometry.positions[i + 0];\r\n\t\t\t\tvertex[1] = geometry.positions[i + 1];\r\n\t\t\t\tvertex[2] = geometry.positions[i + 2];\r\n\t\t\t\t\r\n\t\t\t\t// If the geometry loader loads quantized data we need to unquantize first\r\n\t\t\t\t// TODO there is a possible performance improvement possible for all modelset where the totalBounds of the modelSet are the same as for each individual submodel (for example all projects without subprojects).\r\n\t\t\t\t// In that case we won't have to unquantize + quantize again\r\n\t\t\t\t\r\n\t\t\t\tif (this.settings.loaderSettings.quantizeVertices) {\r\n\t\t\t\t\tvec3.transformMat4(vertex, vertex, this.viewer.vertexQuantization.getUntransformedInverseVertexQuantizationMatrixForCroid(geometry.croid));\r\n\t\t\t\t}\r\n\t\t\t\tvec3.transformMat4(vertex, vertex, object.matrix);\r\n\t\t\t\tif (this.settings.quantizeVertices) {\r\n\t\t\t\t\tvec3.transformMat4(vertex, vertex, this.viewer.vertexQuantization.getTransformedVertexQuantizationMatrix());\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbuffer.positions.set(vertex, buffer.positionsIndex);\r\n\t\t\t\tbuffer.positionsIndex += 3;\r\n\t\t\t}\r\n\t\t\tvar floatNormal = vec3.create();\r\n\t\t\tvar intNormal = new Int8Array(3);\r\n\t\t\tfor (var i = 0; i < geometry.normals.length; i += 3) {\r\n\r\n\t\t\t\tif (loaderQuantizeNormals) {\r\n\r\n\t\t\t\t\tfloatNormal[0] = geometry.normals[i] / 127;\r\n\t\t\t\t\tfloatNormal[1] = geometry.normals[i + 1] / 127;\r\n\t\t\t\t\tfloatNormal[2] = geometry.normals[i + 2] / 127;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfloatNormal[0] = geometry.normals[i];\r\n\t\t\t\t\tfloatNormal[1] = geometry.normals[i + 1];\r\n\t\t\t\t\tfloatNormal[2] = geometry.normals[i + 2];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvec3.transformMat3(floatNormal, floatNormal, object.normalMatrix);\r\n\t\t\t\tvec3.normalize(floatNormal, floatNormal);\r\n\t\t\t\t// TODO this results in vectors with a negative magnitude... (at least on the unquantized data) We should probably do something with that information\r\n\t\t\t\t// Also the number becomes really small, resulting in all zeros when quantizing again, that can't be right\t\t\t\t\r\n\r\n\t\t\t\tif (quantizeNormals) {\r\n\r\n\t\t\t\t\tintNormal[0] = floatNormal[0] * 127;\r\n\t\t\t\t\tintNormal[1] = floatNormal[1] * 127;\r\n\t\t\t\t\tintNormal[2] = floatNormal[2] * 127;\r\n\r\n\t\t\t\t\tbuffer.normals.set(intNormal, buffer.normalsIndex);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbuffer.normals.set(floatNormal, buffer.normalsIndex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuffer.normalsIndex += 3;\r\n\t\t\t}\r\n\t\t\tlet originalColorIndex = buffer.colorsIndex;\r\n\t\t\tif (geometry.colors != null) {\r\n\t\t\t\tif (geometry.colors instanceof Uint8Array == this.settings.quantizeColors) {\r\n\t\t\t\t\t// The same, just copy\r\n\t\t\t\t\tbuffer.colors.set(geometry.colors, buffer.colorsIndex);\r\n\t\t\t\t\tbuffer.colorsIndex += geometry.colors.length;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Different, conversion required\r\n\t\t\t\t\tvar color = new Array(4);\r\n\t\t\t\t\tfor (var i=0; i<geometry.colors.length; i+=4) {\r\n\t\t\t\t\t\tcolor[0] = geometry.colors[i + 0];\r\n\t\t\t\t\t\tcolor[1] = geometry.colors[i + 1];\r\n\t\t\t\t\t\tcolor[2] = geometry.colors[i + 2];\r\n\t\t\t\t\t\tcolor[3] = geometry.colors[i + 3];\r\n\t\t\t\t\t\tif (this.settings.quantizeColors) {\r\n\t\t\t\t\t\t\t// Quantize\r\n\t\t\t\t\t\t\tcolor[0] = color[0] * 255;\r\n\t\t\t\t\t\t\tcolor[1] = color[1] * 255;\r\n\t\t\t\t\t\t\tcolor[2] = color[2] * 255;\r\n\t\t\t\t\t\t\tcolor[3] = color[3] * 255;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Unquantize\r\n\t\t\t\t\t\t\tcolor[0] = color[0] / 255;\r\n\t\t\t\t\t\t\tcolor[1] = color[1] / 255;\r\n\t\t\t\t\t\t\tcolor[2] = color[2] / 255;\r\n\t\t\t\t\t\t\tcolor[3] = color[3] / 255;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbuffer.colors.set(color, buffer.colorsIndex);\r\n\t\t\t\t\t\tbuffer.colorsIndex += 4;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar pickColor = this.viewer.getPickColor(object.id);\r\n\t\t\tvar lenObjectPickColors = (geometry.positions.length / 3);\r\n\t\t\tfor (var i=0; i<lenObjectPickColors; i++) {\r\n\t\t\t\tbuffer.pickColors.set(pickColor, buffer.pickColorsIndex);\r\n\t\t\t\tbuffer.pickColorsIndex += 4;\r\n\t\t\t}\r\n\r\n\t\t\t{var li = (buffer.geometryIdToIndex.get(object.id) || []);\r\n\t\t\t\tli.push({\r\n\t\t\t\t\tstart: buffer.indicesIndex, \r\n\t\t\t\t\tlength: geometry.indices.length,\r\n\t\t\t\t\tcolor: originalColorIndex,\r\n\t\t\t\t\tcolorLength: geometry.colors.length\r\n\t\t\t\t});\r\n\t\t\t\tbuffer.geometryIdToIndex.set(object.id, li);}\r\n\t\t\t\r\n\t\t\tif (startIndex == 0) {\r\n\t\t\t\t// Small optimization, if this is the first object in the buffer, no need to add the startIndex to each index\r\n\t\t\t\tbuffer.indices.set(geometry.indices, 0);\r\n\t\t\t\tbuffer.indicesIndex = geometry.indices.length;\r\n\t\t\t} else {\r\n\t\t\t\tvar index = Array(3);\r\n\t\t\t\tfor (var i=0; i<geometry.indices.length; i+=3) {\r\n\t\t\t\t\tindex[0] = geometry.indices[i + 0] + startIndex;\r\n\t\t\t\t\tindex[1] = geometry.indices[i + 1] + startIndex;\r\n\t\t\t\t\tindex[2] = geometry.indices[i + 2] + startIndex;\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuffer.indices.set(index, buffer.indicesIndex);\r\n\t\t\t\t\tbuffer.indicesIndex += 3;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t\tconsole.log(sizes);\r\n\t\t\tconsole.log(buffer);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\r\n\t\tbuffer.nrIndices += geometry.indices.length;\r\n\t\tbuffer.bytes += geometry.bytes;\r\n\t\t\r\n\t\tif (buffer.needsToFlush) {\r\n\t\t\tthis.flushBuffer(buffer);\r\n\t\t}\r\n\t}\r\n\t\r\n\tstoreMissingGeometry(geometryLoader, map) {\r\n\t\tvar node = this.loaderToNode[geometryLoader.loaderId];\r\n\t\tfor (var geometryDataId of map.keys()) {\r\n\t\t\tvar geometryInfoIds = map.get(geometryDataId);\r\n\t\t\tthis.geometryCache.integrate2(geometryDataId, this.getLoader(geometryLoader.loaderId), node.gpuBufferManager, geometryInfoIds, geometryLoader);\r\n\t\t}\r\n\t\t\r\n\t\t// We need to start loading some GeometryData at some point, and add the missing pieces\r\n\t\tif (!this.geometryCache.isEmpty()) {\r\n\t\t\tthis.reuseLoader.load(this.geometryCache.pullToLoad());\r\n\t\t}\r\n\t}\r\n\t\r\n\taddGeometryToObject(geometryId, objectId, loader, gpuBufferManager) {\r\n\t\tvar geometry = loader.geometries.get(geometryId);\r\n\t\tif (geometry == null) {\r\n\t\t\tif (this.geometryCache.has(geometryId)) {\r\n\t\t\t\tgeometry = this.geometryCache.get(geometryId);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(\"Missing geometry id\", geometryId);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar object = loader.objects.get(objectId);\r\n\t\tif (object.visible) {\r\n\t\t\tthis.addGeometry(loader.loaderId, geometry, object);\r\n\t\t\tobject.geometry.push(geometryId);\r\n\t\t} else {\r\n\t\t\tthis.viewer.stats.inc(\"Primitives\", \"Nr primitives hidden\", geometry.indices.length / 3);\r\n\t\t\tif (this.progressListener != null) {\r\n\t\t\t\tthis.progressListener(this.viewer.stats.get(\"Primitives\", \"Nr primitives loaded\") + this.viewer.stats.get(\"Primitives\", \"Nr primitives hidden\"));\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (geometry.isReused) {\r\n\t\t\tgeometry.reuseMaterialized++;\r\n\t\t\tif (geometry.reuseMaterialized == geometry.reused) {\r\n\t\t\t\tthis.addGeometryReusable(geometry, loader, gpuBufferManager);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\taddGeometryReusable(geometry, loader, gpuBufferManager) {\r\n\t\tvar programInfo = this.viewer.programManager.getProgram(this.viewer.programManager.createKey(true, false));\r\n        var pickProgramInfo = this.viewer.programManager.getProgram(this.viewer.programManager.createKey(true, true));\r\n\r\n\t\tconst numInstances = geometry.objects.length;\r\n\r\n\t\tconst positionBuffer = Utils.createBuffer(this.gl, this.bufferTransformer.convertVertices(geometry.croid, geometry.positions));\r\n\t\tconst normalBuffer = Utils.createBuffer(this.gl, this.bufferTransformer.convertNormals(geometry.normals));\r\n\t\tconst colorBuffer = geometry.colors != null\r\n\t\t\t? Utils.createBuffer(this.gl, geometry.colors, null, this.gl.ARRAY_BUFFER, 4)\r\n\t\t\t: null;\r\n\t\tconst indexBuffer = Utils.createIndexBuffer(this.gl, this.bufferTransformer.convertIndices(geometry.indices, geometry.positions.length));\r\n\t\t\r\n\t\tlet color, colorHash;\r\n\r\n\t\tif (this.settings.useObjectColors) {\r\n\t\t\tcolor = [geometry.color.r, geometry.color.g, geometry.color.b, geometry.color.a];\r\n\t\t\tcolorHash = Utils.hash(JSON.stringify(buffer.color));\r\n\t\t}\r\n\r\n\t\tlet buffer = new FrozenBufferSet(\r\n\t\t\tthis.viewer,\r\n\t\t\tnull,\r\n\t\t\t\r\n\t\t\tpositionBuffer,\r\n\t\t\tnormalBuffer,\r\n\t\t\tcolorBuffer,\r\n\t\t\tnull,\r\n\t\t\tindexBuffer,\r\n\t\t\t\r\n\t\t\tcolor,\r\n\t\t\tcolorHash,\r\n\t\t\t\r\n\t\t\tgeometry.indices.length,\r\n\t\t\tnormalBuffer.N,\r\n\t\t\tpositionBuffer.N,\r\n\t\t\tcolorBuffer.N,\r\n\t\t\t\r\n\t\t\tnull,\r\n\t\t\tnull,\r\n\r\n\t\t\tgeometry.hasTransparency,\r\n\t\t\ttrue,\r\n\t\t\tthis,\r\n\t\t\tgpuBufferManager,\r\n\r\n\t\t\tgeometry.roid,\r\n\t\t\tgeometry.croid\r\n\t\t);\r\n\r\n\t\tbuffer.numInstances = numInstances;\r\n\t\tbuffer.nrTrianglesToDraw = (buffer.nrIndices / 3) * geometry.matrices.length;\r\n\t\t\r\n\t\tbuffer.setObjects(this.gl, geometry.objects);\r\n\t\tbuffer.buildVao(this.gl, this.settings, programInfo, pickProgramInfo);\r\n\r\n\t\tgeometry.objects.forEach((obj) => {\r\n\t\t\tthis.viewer.geometryIdToBufferSet.set(obj.id, [buffer]);\r\n\t\t});\r\n\r\n\t\tloader.geometries.delete(geometry.id);\r\n\t\tgpuBufferManager.pushBuffer(buffer);\r\n\r\n\t\tthis.viewer.stats.inc(\"Primitives\", \"Nr primitives loaded\", (buffer.nrIndices / 3) * geometry.matrices.length);\r\n\t\tif (this.progressListener != null) {\r\n\t\t\tthis.progressListener(this.viewer.stats.get(\"Primitives\", \"Nr primitives loaded\") + this.viewer.stats.get(\"Primitives\", \"Nr primitives hidden\"));\r\n\t\t}\r\n\r\n\t\tvar toadd = \r\n\t\t\tgeometry.bytes + \r\n\t\t\tgeometry.matrices.length * 16 * 4 + // vertex matrices\r\n\t\t\tgeometry.matrices.length * 9 * 4; // normal matrices\r\n\t\tthis.viewer.stats.inc(\"Data\", \"GPU bytes reuse\", toadd);\r\n\t\tthis.viewer.stats.inc(\"Data\", \"GPU bytes total\", toadd);\r\n\r\n\t\tgeometry.buffer = buffer;\r\n\t}\r\n\t\r\n\tgetLoader(loaderId) {\r\n\t\treturn this.loaders.get(loaderId);\r\n\t}\r\n\t\r\n\tremoveLoader(loaderId) {\r\n\t\tthis.loaders.delete(loaderId);\r\n\t}\r\n\t\r\n\tgetObject(loaderId, identifier) {\r\n\t\treturn this.getLoader(loaderId).objects.get(identifier);\r\n\t}\r\n\t\r\n\tregisterLoader(loaderId) {\r\n\t\tthis.loaders.set(loaderId, {\r\n\t\t\tloaderId: loaderId,\r\n\t\t\t// ObjectID -> Object\r\n\t\t\tobjects: new Map(),\r\n\t\t\tgeometries: new Map()\r\n\t\t});\r\n\t}\r\n\t\r\n\trenderBuffers(transparency, reuse) {\r\n\t\tconsole.log(\"Not implemented in this layer\");\r\n\t}\r\n\t\r\n\t/*\r\n\t * Prepare the rendering pass, this is called only once for each frame\r\n\t */\t\r\n\tprepareRender() {\r\n\t\t\r\n\t}\r\n\t\r\n\trender(transparency, visibleElements) {\r\n\t\tthis.renderBuffers(transparency, false, visibleElements);\r\n\t\tif (this.settings.gpuReuse) {\r\n\t\t\tthis.renderBuffers(transparency, true, visibleElements);\r\n\t\t}\r\n\t}\r\n\t\r\n\trenderFinalBuffers(buffers, programInfo, visibleElements) {\r\n\t\tif (buffers != null && buffers.length > 0) {\r\n\t\t\tlet picking = visibleElements.pass === 'pick';\r\n\t\t\tvar lastUsedColorHash = null;\r\n\t\t\t\r\n\t\t\tfor (let buffer of buffers) {\r\n\t\t\t\tif (!picking && this.settings.useObjectColors) {\r\n\t\t\t\t\tif (lastUsedColorHash == null || lastUsedColorHash != buffer.colorHash) {\r\n\t\t\t\t\t\tthis.gl.uniform4fv(programInfo.uniformLocations.vertexColor, buffer.color);\r\n\t\t\t\t\t\tlastUsedColorHash = buffer.colorHash;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (buffer.unquantizationMatrix != null) {\r\n\t\t\t\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.vertexQuantizationMatrix, false, buffer.unquantizationMatrix);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthis.renderBuffer(buffer, programInfo, visibleElements);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\trenderBuffer(buffer, programInfo, visibleElements) {\r\n\t\tconst gl = this.gl;\r\n\t\t\r\n\t\t// console.log(programInfo.uniformLocations);\r\n\r\n\t\tlet picking = visibleElements.pass === 'pick';\r\n\t\tgl.bindVertexArray(picking ? buffer.vaoPick : buffer.vao);\r\n\t\tif (buffer.reuse) {\r\n\t\t\t// TODO we only need to bind this again for every new roid, maybe sort by buffer.roid before iterating through the buffers?\r\n\t\t\tif (this.viewer.settings.quantizeVertices) {\r\n\t\t\t\tgl.uniformMatrix4fv(programInfo.uniformLocations.vertexQuantizationMatrix, false, this.viewer.vertexQuantization.getUntransformedInverseVertexQuantizationMatrixForCroid(buffer.croid));\r\n\t\t\t}\r\n\r\n\t\t\tlet subset = buffer.computeVisibleInstances(visibleElements, this.gl);\r\n\t\t\tif (subset.somethingVisible) {\r\n\t\t\t\tif (subset.instanceIds.length > this.instanceSelectionData.length) {\r\n\t\t\t\t\tconsole.error(\"Too many instances of a geometry are activated.\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.instanceSelectionData.fill(UINT32_MAX);\r\n\t\t\t\t\tthis.instanceSelectionData.set(subset.instanceIds);\r\n\r\n\t\t\t\t\tconst instanceVisibilityState = [visibleElements.pass, subset.hidden].concat(subset.instanceIds).join(\",\");\r\n\r\n\t\t\t\t\tif (instanceVisibilityState !== this.previousInstanceVisibilityState) {\r\n\t\t\t\t\t\t// console.log(\"selection\", visibleElements.pass, subset.hidden ? \"hide\" : \"show\", ...this.instanceSelectionData.subarray(0, subset.instanceIds.length));\r\n\t\t\t\t\t\tgl.uniform1uiv(programInfo.uniformLocations.containedInstances, this.instanceSelectionData);\r\n\t\t\t\t\t\tgl.uniform1ui(programInfo.uniformLocations.numContainedInstances, subset.instanceIds.length);\r\n\t\t\t\t\t\tgl.uniform1ui(programInfo.uniformLocations.containedMeansHidden, subset.hidden ? 1 : 0);\r\n\t\t\t\t\t\tthis.previousInstanceVisibilityState = instanceVisibilityState;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgl.drawElementsInstanced(this.gl.TRIANGLES, buffer.nrTrianglesToDraw * 3, buffer.indexType, 0, buffer.nrProcessedMatrices);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (buffer.objectId) {\r\n\t\t\t\t// This is a buffer for one specific element, probably created when\r\n\t\t\t\t// a call to setColor() changed the transparency state of an element.\r\n\t\t\t\tlet include = true;\r\n\t\t\t\tif (visibleElements.with && !visibleElements.with.has(buffer.objectId)) {\r\n\t\t\t\t\tinclude = false;\r\n\t\t\t\t} else if (visibleElements.without && visibleElements.without.has(buffer.objectId)) {\r\n\t\t\t\t\tinclude = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (include) {\r\n\t\t\t\t\tthis.gl.drawElements(this.gl.TRIANGLES, buffer.nrTrianglesToDraw * 3, this.gl.UNSIGNED_INT, 0);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\t// These are the conventional buffersets\r\n\t\t\t\tfor (var range of buffer.computeVisibleRanges(visibleElements, this.gl)) {\r\n\t\t\t\t\tthis.gl.drawElements(this.gl.TRIANGLES, Math.min(range[1] - range[0], buffer.nrTrianglesToDraw * 3), this.gl.UNSIGNED_INT, range[0] * 4);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Enabled, this kind of doubles the amount of GPU calls during rendering, but disabled resulted in errors, somehow some old buffers keep being used if we don't do this\r\n\t\tthis.gl.bindVertexArray(null);\r\n\t}\t\r\n\r\n\t/**\r\n\t * Add a buffer that is already prepared\r\n\t */\r\n\taddCompleteBuffer(buffer, gpuBufferManager) {\r\n\t\tvar newBuffer = null;\r\n\r\n\t\tif (buffer == null) {\r\n\t\t\treturn newBuffer;\r\n\t\t}\r\n\t\tif (buffer.nrIndices == 0) {\r\n\t\t\treturn newBuffer;\r\n\t\t}\r\n\t\t\r\n\t\tvar programInfo = this.viewer.programManager.getProgram(this.viewer.programManager.createKey(false, false));\r\n        var pickProgramInfo = this.viewer.programManager.getProgram(this.viewer.programManager.createKey(false, true));\r\n\r\n\t\tif (!this.settings.fakeLoading) {\r\n\t\t\tconst positionBuffer = buffer.vertices;\r\n\t\t\tconst normalBuffer = buffer.normals;\r\n\t\t\tconst pickColorBuffer = buffer.pickColors;\r\n\t\t\tconst indexBuffer = buffer.indices;\r\n\t\t\tconst colorBuffer = buffer.colors;\r\n\r\n\t\t\tnewBuffer = new FrozenBufferSet(\r\n\t\t\t\tthis.viewer,\r\n\t\t\t\tbuffer,\r\n\t\t\t\t\r\n\t\t\t\tpositionBuffer,\r\n\t\t\t\tnormalBuffer,\r\n\t\t\t\tcolorBuffer,\r\n\t\t\t\tpickColorBuffer,\r\n\t\t\t\tindexBuffer,\r\n\t\t\t\t\r\n\t\t\t\tnull,\r\n\t\t\t\t0,\r\n\t\t\t\t\r\n\t\t\t\tbuffer.nrIndices,\r\n\t\t\t\tbuffer.normalsIndex,\r\n\t\t\t\tbuffer.positionsIndex,\r\n\t\t\t\tbuffer.colorsIndex,\r\n\t\t\t\t\r\n\t\t\t\tnull,\r\n\t\t\t\tnull,\r\n\r\n\t\t\t\tbuffer.hasTransparency,\r\n\t\t\t\tfalse,\r\n\t\t\t\tthis,\r\n\t\t\t\tgpuBufferManager\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tnewBuffer.nrTrianglesToDraw = buffer.nrIndices / 3;\r\n\t\t\t\r\n\t\t\tnewBuffer.unquantizationMatrix = buffer.unquantizationMatrix;\r\n\r\n\t\t\tnewBuffer.geometryIdToIndex = buffer.geometryIdToMeta;\r\n\t\t\t\r\n\t\t\tnewBuffer.buildVao(this.gl, this.settings, programInfo, pickProgramInfo);\r\n\t\t\t\r\n\t\t\tif (buffer.geometryIdToIndex) {\r\n\t\t\t\tfor (var key of buffer.geometryIdToIndex.keys()) {\r\n\t\t\t\t\tvar li = (this.viewer.geometryIdToBufferSet.get(key) || []);\r\n\t\t\t\t\tli.push(newBuffer);\r\n\t\t\t\t\tthis.viewer.geometryIdToBufferSet.set(key, li);\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\tgpuBufferManager.pushBuffer(newBuffer);\r\n\t\t\tthis.viewer.dirty = true;\r\n\t\t}\r\n\t\t\r\n\t\tthis.viewer.stats.inc(\"Primitives\", \"Nr primitives loaded\", buffer.nrIndices / 3);\r\n\t\tif (this.progressListener != null) {\r\n\t\t\tthis.progressListener(this.viewer.stats.get(\"Primitives\", \"Nr primitives loaded\") + this.viewer.stats.get(\"Primitives\", \"Nr primitives hidden\"));\r\n\t\t}\r\n\t\tthis.viewer.stats.inc(\"Data\", \"GPU bytes\", buffer.bytes);\r\n\t\tthis.viewer.stats.inc(\"Data\", \"GPU bytes total\", buffer.bytes);\r\n\r\n\t\tthis.viewer.stats.inc(\"Models\", \"Geometries\", buffer.nrObjects);\r\n\r\n\t\treturn newBuffer;\r\n\t}\r\n\t\r\n\tflushBuffer(buffer, gpuBufferManager) {\r\n\t\tvar newBuffer = null;\r\n\t\tif (buffer == null) {\r\n\t\t\treturn newBuffer;\r\n\t\t}\r\n\t\tif (buffer.nrIndices == 0) {\r\n\t\t\treturn newBuffer;\r\n\t\t}\r\n\t\t\r\n\t\tvar programInfo = this.viewer.programManager.getProgram(this.viewer.programManager.createKey(false, false));\r\n\t\tvar pickProgramInfo = this.viewer.programManager.getProgram(this.viewer.programManager.createKey(false, true));\r\n\r\n\t\tif (!this.settings.fakeLoading) {\r\n\t\t\tconst positionBuffer = Utils.createBuffer(this.gl, buffer.positions, buffer.positionsIndex);\r\n\t\t\tconst normalBuffer = Utils.createBuffer(this.gl, buffer.normals, buffer.normalsIndex);\r\n\t\t\tvar colorBuffer = buffer.colors\r\n\t\t\t\t? Utils.createBuffer(this.gl, buffer.colors, buffer.colorsIndex, this.gl.ARRAY_BUFFER, 4)\r\n\t\t\t\t: null;\r\n\t\t\t// Per-object pick vertex colors\r\n\t\t\tvar pickColorBuffer = buffer.pickColors\r\n\t\t\t\t? Utils.createBuffer(this.gl, buffer.pickColors, buffer.pickColorsIndex, this.gl.ARRAY_BUFFER, 4)\r\n\t\t\t\t: null;\r\n\t\t\tconst indexBuffer = Utils.createIndexBuffer(this.gl, buffer.indices, buffer.indicesIndex);\r\n\r\n\t\t\tlet color, colorHash;\r\n\r\n\t\t\tif (this.settings.useObjectColors) {\r\n\t\t\t\tcolor = [buffer.color.r, buffer.color.g, buffer.color.b, buffer.color.a];\r\n\t\t\t\tcolorHash = Utils.hash(JSON.stringify(buffer.color));\r\n\t\t\t}\r\n\r\n\t\t\tnewBuffer = new FrozenBufferSet(\r\n\t\t\t\tthis.viewer,\r\n\t\t\t\tbuffer,\r\n\r\n\t\t\t\tpositionBuffer,\r\n\t\t\t\tnormalBuffer,\r\n\t\t\t\tcolorBuffer,\r\n\t\t\t\tpickColorBuffer,\r\n\t\t\t\tindexBuffer,\r\n\t\t\t\t\r\n\t\t\t\tcolor,\r\n\t\t\t\tcolorHash,\r\n\t\t\t\t\r\n\t\t\t\tbuffer.nrIndices,\r\n\t\t\t\tbuffer.normalsIndex,\r\n\t\t\t\tbuffer.positionsIndex,\r\n\t\t\t\tbuffer.colorsIndex,\r\n\t\t\t\t\r\n\t\t\t\tnull,\r\n\t\t\t\tnull,\r\n\r\n\t\t\t\tbuffer.hasTransparency,\r\n\t\t\t\tfalse,\r\n\t\t\t\tthis,\r\n\t\t\t\tgpuBufferManager\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tnewBuffer.nrTrianglesToDraw = buffer.nrIndices / 3;\r\n\t\t\t\r\n\t\t\tnewBuffer.buildVao(this.gl, this.settings, programInfo, pickProgramInfo);\r\n\r\n\t\t\tif (buffer.geometryIdToIndex) {\r\n\t\t\t\tfor (var key of buffer.geometryIdToIndex.keys()) {\r\n\t\t\t\t\tvar li = (this.viewer.geometryIdToBufferSet.get(key) || []);\r\n\t\t\t\t\tli.push(newBuffer);\r\n\t\t\t\t\tthis.viewer.geometryIdToBufferSet.set(key, li);\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\tgpuBufferManager.pushBuffer(newBuffer);\r\n\t\t\tthis.viewer.dirty = true;\r\n\t\t}\r\n\t\t\r\n\t\tthis.viewer.stats.inc(\"Primitives\", \"Nr primitives loaded\", buffer.nrIndices / 3);\r\n\t\tif (this.progressListener != null) {\r\n\t\t\tthis.progressListener(this.viewer.stats.get(\"Primitives\", \"Nr primitives loaded\") + this.viewer.stats.get(\"Primitives\", \"Nr primitives hidden\"));\r\n\t\t}\r\n\t\tthis.viewer.stats.inc(\"Data\", \"GPU bytes\", buffer.bytes);\r\n\t\tthis.viewer.stats.inc(\"Data\", \"GPU bytes total\", buffer.bytes);\r\n\t\tthis.viewer.stats.inc(\"Buffers\", \"Buffer groups\");\r\n\r\n\t\treturn newBuffer;\r\n\t}\r\n\r\n\trenderSelectionOutlines(ids, width, node) {\r\n\t\tlet bufferManager = (node || this).gpuBufferManager;\r\n\r\n\t\tif (!bufferManager) {\r\n\t\t\t// probably a tile that has not been loaded yet\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet viewer = bufferManager.viewer;\r\n\r\n\t\tfor (let transparency of false_true) { \r\n\t\t\tfor (let reuse of false_true) {\r\n\t\t\t\tvar buffers = (node || this).gpuBufferManager.getBuffers(transparency, reuse);\r\n\t\t\t\tfor (let buffer of buffers) {\r\n\t\t\t\t\tfor (var id of ids) {\r\n\t\t\t\t\t\tif (buffer.lineIndexBuffers) {\r\n\t\t\t\t\t\t\tlet lines = buffer.lineIndexBuffers.get(id);\r\n\t\t\t\t\t\t\tif (lines) {\r\n\t\t\t\t\t\t\t\t// TODO Ruben: renderStart is doing a lot of redundant stuff\r\n\t\t\t\t\t\t\t\tlines.renderStart(viewer);\r\n\t\t\t\t\t\t\t\tlines.render(outlineColor, lines.matrixMap.get(id) || selectionOutlineMatrix, width || 0.005);\r\n\t\t\t\t\t\t\t\tlines.renderStop();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/renderlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 783,
    "kind": "variable",
    "name": "selectionOutlineMatrix",
    "memberof": "viewer/renderlayer.js",
    "static": true,
    "longname": "viewer/renderlayer.js~selectionOutlineMatrix",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/renderlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 784,
    "kind": "variable",
    "name": "outlineColor",
    "memberof": "viewer/renderlayer.js",
    "static": true,
    "longname": "viewer/renderlayer.js~outlineColor",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/renderlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 785,
    "kind": "variable",
    "name": "false_true",
    "memberof": "viewer/renderlayer.js",
    "static": true,
    "longname": "viewer/renderlayer.js~false_true",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/renderlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "boolean[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 786,
    "kind": "variable",
    "name": "UINT32_MAX",
    "memberof": "viewer/renderlayer.js",
    "static": true,
    "longname": "viewer/renderlayer.js~UINT32_MAX",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/renderlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 787,
    "kind": "class",
    "name": "RenderLayer",
    "memberof": "viewer/renderlayer.js",
    "static": true,
    "longname": "viewer/renderlayer.js~RenderLayer",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/renderlayer.js",
    "importStyle": "{RenderLayer}",
    "description": "Abstract base class for managing and rendering buffers pertaining\nto a render layer, ie. the base geometries always visible vs. the\ndynamically visible tiles based on camera orientation.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "RenderLayer"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 788,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 789,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#settings",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 790,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 791,
    "kind": "member",
    "name": "gl",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#gl",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 792,
    "kind": "member",
    "name": "geometryDataToReuse",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#geometryDataToReuse",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 793,
    "kind": "member",
    "name": "geometryCache",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#geometryCache",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 794,
    "kind": "member",
    "name": "instanceSelectionData",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#instanceSelectionData",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 795,
    "kind": "member",
    "name": "previousInstanceVisibilityState",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#previousInstanceVisibilityState",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 796,
    "kind": "member",
    "name": "loaders",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#loaders",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 797,
    "kind": "member",
    "name": "bufferTransformer",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#bufferTransformer",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "createGeometry",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#createGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      },
      {
        "name": "roid",
        "types": [
          "*"
        ]
      },
      {
        "name": "croid",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryId",
        "types": [
          "*"
        ]
      },
      {
        "name": "positions",
        "types": [
          "*"
        ]
      },
      {
        "name": "normals",
        "types": [
          "*"
        ]
      },
      {
        "name": "colors",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "indices",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "reused",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "calculateBytesUsed",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/renderlayer.js~RenderLayer.calculateBytesUsed",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "settings",
        "types": [
          "*"
        ]
      },
      {
        "name": "nrVertices",
        "types": [
          "*"
        ]
      },
      {
        "name": "nrColors",
        "types": [
          "*"
        ]
      },
      {
        "name": "nrIndices",
        "types": [
          "*"
        ]
      },
      {
        "name": "nrNormals",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 800,
    "kind": "method",
    "name": "createObject",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#createObject",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      },
      {
        "name": "roid",
        "types": [
          "*"
        ]
      },
      {
        "name": "oid",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "normalMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaleMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "aabb",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "addGeometry",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#addGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "sizes",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 802,
    "kind": "method",
    "name": "storeMissingGeometry",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#storeMissingGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [
      {
        "name": "geometryLoader",
        "types": [
          "*"
        ]
      },
      {
        "name": "map",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 803,
    "kind": "method",
    "name": "addGeometryToObject",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#addGeometryToObject",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [
      {
        "name": "geometryId",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "loader",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 804,
    "kind": "method",
    "name": "addGeometryReusable",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#addGeometryReusable",
    "access": "public",
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      },
      {
        "name": "loader",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 805,
    "kind": "method",
    "name": "getLoader",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#getLoader",
    "access": "public",
    "description": null,
    "lineNumber": 398,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 806,
    "kind": "method",
    "name": "removeLoader",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#removeLoader",
    "access": "public",
    "description": null,
    "lineNumber": 402,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 807,
    "kind": "method",
    "name": "getObject",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#getObject",
    "access": "public",
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      },
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 808,
    "kind": "method",
    "name": "registerLoader",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#registerLoader",
    "access": "public",
    "description": null,
    "lineNumber": 410,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 809,
    "kind": "method",
    "name": "renderBuffers",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#renderBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 419,
    "undocument": true,
    "params": [
      {
        "name": "transparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "reuse",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 810,
    "kind": "method",
    "name": "prepareRender",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#prepareRender",
    "access": "public",
    "description": null,
    "lineNumber": 426,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 811,
    "kind": "method",
    "name": "render",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#render",
    "access": "public",
    "description": null,
    "lineNumber": 430,
    "undocument": true,
    "params": [
      {
        "name": "transparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "visibleElements",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 812,
    "kind": "method",
    "name": "renderFinalBuffers",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#renderFinalBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 437,
    "undocument": true,
    "params": [
      {
        "name": "buffers",
        "types": [
          "*"
        ]
      },
      {
        "name": "programInfo",
        "types": [
          "*"
        ]
      },
      {
        "name": "visibleElements",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 813,
    "kind": "method",
    "name": "renderBuffer",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#renderBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 459,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "programInfo",
        "types": [
          "*"
        ]
      },
      {
        "name": "visibleElements",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 815,
    "kind": "method",
    "name": "addCompleteBuffer",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#addCompleteBuffer",
    "access": "public",
    "description": "Add a buffer that is already prepared",
    "lineNumber": 519,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 816,
    "kind": "method",
    "name": "flushBuffer",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#flushBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 598,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "renderSelectionOutlines",
    "memberof": "viewer/renderlayer.js~RenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/renderlayer.js~RenderLayer#renderSelectionOutlines",
    "access": "public",
    "description": null,
    "lineNumber": 683,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 818,
    "kind": "file",
    "name": "viewer/reuseloader.js",
    "content": "import {GeometryLoader} from './geometryloader.js'\r\nimport {RenderLayer} from './renderlayer.js'\r\n\r\n/**\r\n * When loading Tiles, there is sometimes geometry (GeometryData) that is reused in other Tiles as well, in that case it is omitted in the stream, to be loaded later.\r\n * This class is called whenever there is a batch of GeometryData that needs to be loaded.\r\n */\r\nexport class ReuseLoader {\r\n\tconstructor(viewer, reuseLowerThreshold, bimServerApi, fieldsToInclude, roids, quantizationMap, geometryCache, geometryDataToReuse) {\r\n\t\tthis.settings = viewer.settings;\r\n\t\tthis.viewer = viewer;\r\n\t\tthis.reuseLowerThreshold = reuseLowerThreshold;\r\n\t\tthis.bimServerApi = bimServerApi;\r\n\t\tthis.fieldsToInclude = fieldsToInclude;\r\n\t\tthis.roids = roids;\r\n\t\tthis.quantizationMap = quantizationMap;\r\n\t\tthis.geometryCache = geometryCache;\r\n\t\tthis.geometryDataToReuse = geometryDataToReuse;\r\n\t\tthis.nrReused = 0;\r\n\t\tthis.bytesReused = 0;\r\n\t\tthis.loaderCounter = 0;\r\n\t}\r\n\t\r\n\t/*\r\n\t * Load an array of geometry data ids\r\n\t */\r\n\tload(geometryDataIds) {\r\n\t\tif (geometryDataIds.length == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar start = performance.now();\r\n\t\tvar query = {\r\n\t\t\toids: geometryDataIds,\r\n\t\t\tinclude: {\r\n\t\t\t\ttype: \"GeometryData\",\r\n\t\t\t\tfieldsDirect: this.fieldsToInclude\r\n\t\t\t},\r\n\t\t\tloaderSettings: JSON.parse(JSON.stringify(this.settings.loaderSettings))\r\n\t\t};\r\n\t\t\r\n\t\t// The returned data (GeometryData) objects should be processed as normal, not as a preparedBuffer\r\n\t\tquery.loaderSettings.prepareBuffers = false;\r\n\r\n\t\tvar geometryLoader = new GeometryLoader(this.loaderCounter++, this.bimServerApi, this, this.roids, this.settings.loaderSettings, this.quantizationMap, this.viewer.stats, this.settings, query, null);\r\n\t\tvar p = geometryLoader.start();\r\n\t\tp.then(() => {\r\n\t\t\tvar end = performance.now();\r\n\t\t});\r\n\t\treturn p;\r\n\t}\r\n\t\r\n\t/*\r\n\t * This class acts as if it's a RenderLayer, the createGeometry is called} from the GeometryLoader\r\n\t * We just store the incoming geometry in the (global) GeometryCache\r\n\t */\r\n\tcreateGeometry(loaderId, roid, croid, geometryId, positions, normals, colors, color, indices, hasTransparency, reused) {\r\n\t\tthis.nrReused++;\r\n\t\tvar bytes = RenderLayer.calculateBytesUsed(this.settings, positions.length, colors.length, indices.length, normals.length);\r\n\t\tthis.bytesReused += bytes;\r\n\t\tvar geometry = {\r\n\t\t\t\tid: geometryId,\r\n\t\t\t\troid: roid,\r\n\t\t\t\tcroid: croid,\r\n\t\t\t\tpositions: positions,\r\n\t\t\t\tnormals: normals,\r\n\t\t\t\tcolors: colors,\r\n\t\t\t\tcolor: color,\r\n\t\t\t\tindices: indices,\r\n\t\t\t\thasTransparency: hasTransparency,\r\n\t\t\t\treused: reused, // How many times this geometry is reused, this does not necessarily mean the viewer is going to utilize this reuse\r\n\t\t\t\treuseMaterialized: 0, // How many times this geometry has been reused in the viewer, when this number reaches \"reused\" we can flush the buffer fo' sho'\r\n\t\t\t\tbytes: bytes,\r\n\t\t\t\tmatrices: [],\r\n\t\t\t\tobjects: []\r\n\t\t};\r\n\t\t\r\n\t\tgeometry.isReused = this.settings.gpuReuse;\r\n\t\t\r\n\t\tthis.geometryCache.set(geometryId, geometry);\r\n\t\t\r\n\t\tgeometry.isReused = geometry.reused > 1 && this.geometryDataToReuse != null && this.geometryDataToReuse.has(geometry.id);\r\n\t\tif (geometry.isReused) {\r\n\t\t\tthis.viewer.stats.inc(\"Models\", \"Geometries reused\");\r\n\t\t} else {\r\n\t\t\tthis.viewer.stats.inc(\"Models\", \"Geometries\");\r\n\t\t}\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/reuseloader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 819,
    "kind": "class",
    "name": "ReuseLoader",
    "memberof": "viewer/reuseloader.js",
    "static": true,
    "longname": "viewer/reuseloader.js~ReuseLoader",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/reuseloader.js",
    "importStyle": "{ReuseLoader}",
    "description": "When loading Tiles, there is sometimes geometry (GeometryData) that is reused in other Tiles as well, in that case it is omitted in the stream, to be loaded later.\nThis class is called whenever there is a batch of GeometryData that needs to be loaded.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 820,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 821,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#settings",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 822,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 823,
    "kind": "member",
    "name": "reuseLowerThreshold",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#reuseLowerThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 824,
    "kind": "member",
    "name": "bimServerApi",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#bimServerApi",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 825,
    "kind": "member",
    "name": "fieldsToInclude",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#fieldsToInclude",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 826,
    "kind": "member",
    "name": "roids",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#roids",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 827,
    "kind": "member",
    "name": "quantizationMap",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#quantizationMap",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 828,
    "kind": "member",
    "name": "geometryCache",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#geometryCache",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 829,
    "kind": "member",
    "name": "geometryDataToReuse",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#geometryDataToReuse",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 830,
    "kind": "member",
    "name": "nrReused",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#nrReused",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 831,
    "kind": "member",
    "name": "bytesReused",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#bytesReused",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 832,
    "kind": "member",
    "name": "loaderCounter",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#loaderCounter",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 833,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#load",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "geometryDataIds",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 834,
    "kind": "method",
    "name": "createGeometry",
    "memberof": "viewer/reuseloader.js~ReuseLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/reuseloader.js~ReuseLoader#createGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      },
      {
        "name": "roid",
        "types": [
          "*"
        ]
      },
      {
        "name": "croid",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryId",
        "types": [
          "*"
        ]
      },
      {
        "name": "positions",
        "types": [
          "*"
        ]
      },
      {
        "name": "normals",
        "types": [
          "*"
        ]
      },
      {
        "name": "colors",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "indices",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "reused",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 836,
    "kind": "file",
    "name": "viewer/settings.js",
    "content": "/**\r\n * This class builds a quick UI for changing basic settings and stores the settings in localStorage.\r\n * Changing any of these settings requires a reload of the model, or browser\r\n * \r\n * @todo This class was quickly hacked together, should not be built upon\r\n */\r\nexport class Settings {\r\n\tconstructor(element) {\r\n\t\tvar settingsDefinition = {\r\n\t\t\tquantizeNormals: \"boolean\",\r\n\t\t\tquantizeVertices: \"boolean\",\r\n\t\t\tquantizeColors: \"boolean\",\r\n\t\t\tgpuReuse: \"boolean\",\r\n\t\t\tuseObjectColors: \"boolean\",\r\n\t\t\tuseSmallIndicesIfPossible: \"boolean\",\r\n\t\t\tdefaultLayerEnabled: \"boolean\",\r\n\t\t\ttriangleThresholdDefaultLayer: \"number\",\r\n\t\t\ttilingLayerEnabled: \"boolean\",\r\n\t\t\tmaxOctreeDepth: \"number\",\r\n\t\t\tloaderSettings: {\r\n\t\t\t\tquantizeNormals: \"boolean\",\r\n\t\t\t\tquantizeVertices: \"boolean\", \r\n\t\t\t\tquantizeColors: \"boolean\",\r\n\t\t\t\tuseObjectColors: \"boolean\",\r\n\t\t\t\ttilingLayerReuse: \"boolean\",\r\n\t\t\t\tprepareBuffers: \"boolean\"\r\n\t\t\t},\r\n\t\t\trealtimeSettings: {\r\n\t\t\t\tdrawTileBorders: \"boolean\",\r\n\t\t\t\torderIndependentTransparency: \"boolean\",\r\n\t\t\t\tloadAllTiles: \"button\"\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tvar settingsObject = localStorage.getItem(\"settings\") == null ? null : localStorage.getItem(\"settings\");\r\n\t\tthis.settings = settingsObject == null ? {\r\n\t\t\tquantizeNormals: true,\r\n\t\t\tquantizeVertices: true,\r\n\t\t\tquantizeColors: true,\r\n\t\t\tuseObjectColors: false,\r\n\t\t\tgpuReuse: true,\r\n\t\t\tuseSmallIndicesIfPossible: true,\r\n\t\t\tdefaultLayerEnabled: true,\r\n\t\t\ttriangleThresholdDefaultLayer: 100000,\r\n\t\t\ttilingLayerEnabled: true,\r\n\t\t\tmaxOctreeDepth: 3,\r\n\t\t\tloaderSettings: {\r\n\t\t\t\tquantizeNormals: true,\r\n\t\t\t\tquantizeVertices: true,\r\n\t\t\t\tquantizeColors: true,\r\n\t\t\t\tuseObjectColors: false,\r\n\t\t\t\ttilingLayerReuse: true,\r\n\t\t\t\tprepareBuffer: false\r\n\t\t\t},\r\n\t\t\trealtimeSettings: {\r\n\t\t\t\tdrawTileBorders: true,\r\n\t\t\t\torderIndependentTransparency: true\r\n\t\t\t}\r\n\t\t} : JSON.parse(settingsObject);\r\n\r\n\t\telement.innerHTML = \"<span>Settings</span>\";\r\n\r\n\t\tthis.processSettings(element, settingsDefinition, null, this.settings);\r\n\t}\r\n\t\r\n\tsaveSettings() {\r\n\t\tlocalStorage.setItem(\"settings\", JSON.stringify(this.settings));\r\n\t}\r\n\t\r\n\tprocessSettings(parent, settingsDefinition, keyPrefix, settings) {\r\n\t\tfor (var key in settingsDefinition) {\r\n\t\t\tvar value = settingsDefinition[key];\r\n\t\t\tif (typeof value == \"string\") {\r\n\t\t\t\tvar div = document.createElement(\"div\");\r\n\t\t\t\tdiv.classList.add(\"link\");\r\n\t\t\t\t\r\n\t\t\t\tvar label = document.createElement(\"label\");\r\n\t\t\t\tlabel.innerHTML = key;\r\n\t\t\t\tif (key in {quantizeNormals: 1, quantizeVertices: 1}) {\r\n\t\t\t\t\tlabel.innerHTML += \" (required for instancing)\";\r\n\t\t\t\t}\r\n\t\t\t\tif (key == \"tilingLayerReuse\") {\r\n\t\t\t\t\tlabel.innerHTML += \" (requires gpuReuse)\";\r\n\t\t\t\t}\r\n\t\t\t\tparent.appendChild(label);\r\n\t\t\t\tvar id = (keyPrefix == null ? \"\" : (keyPrefix + \".\")) + key;\r\n\t\t\t\tlabel.setAttribute(\"for\", id);\r\n\t\t\t\t\r\n\t\t\t\tif (value == \"button\") {\r\n\t\t\t\t\tvar input = document.createElement(\"button\");\r\n\t\t\t\t\tlabel.hidden = true;\r\n\t\t\t\t\tinput.innerHTML = key;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar input = document.createElement(\"input\");\r\n\t\t\t\t}\r\n\t\t\t\tif (value == \"boolean\") {\r\n\t\t\t\t\tinput.setAttribute(\"type\", \"checkbox\");\r\n\t\t\t\t}\r\n\t\t\t\tvar settings = this.settings;\r\n\t\t\t\tif (id.indexOf(\".\") != -1) {\r\n\t\t\t\t\tsettings = settings[id.substring(0, id.indexOf(\".\"))];\r\n\t\t\t\t}\r\n\t\t\t\tif (settings != null) {\r\n\t\t\t\t\tif (settings[key] != null) {\r\n\t\t\t\t\t\tif (value == \"boolean\") {\r\n\t\t\t\t\t\t\tif (settings[key] == true) {\r\n\t\t\t\t\t\t\t\tinput.setAttribute(\"checked\", \"checked\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinput.value = settings[key];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsettings[key] = false;\r\n\t\t\t\t}\r\n\t\t\t\tinput.id = id;\r\n\t\t\t\tinput.setAttribute(\"key\", key);\r\n\t\t\t\tinput.setAttribute(\"valuetype\", value);\r\n\t\t\t\tif (value == \"button\") {\r\n\t\t\t\t\tinput.addEventListener(\"click\", () => {\r\n\t\t\t\t\t\tif (this[key] != null) {\r\n\t\t\t\t\t\t\tthis[key]();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tinput.addEventListener(\"change\", (event) => {\r\n\t\t\t\t\tvar el = event.target;\r\n\t\t\t\t\tvar key = el.getAttribute(\"key\");\r\n\t\t\t\t\tvar settings = this.settings;\r\n\t\t\t\t\tif (el.id.indexOf(\".\") != -1) {\r\n\t\t\t\t\t\tsettings = settings[el.id.substring(0, el.id.indexOf(\".\"))];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar valueType = el.getAttribute(\"valuetype\");\r\n\t\t\t\t\tif (valueType == \"boolean\") {\r\n\t\t\t\t\t\tsettings[key] = el.checked;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsettings[key] = parseInt(el.value);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.saveSettings();\r\n\t\t\t\t\tif (this[key] != null) {\r\n\t\t\t\t\t\tthis[key](el.checked);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tdiv.appendChild(input);\r\n\t\t\t\tdiv.appendChild(label);\r\n\t\t\t\t\r\n\t\t\t\tparent.appendChild(div);\r\n\t\t\t} else if (typeof value == \"object\") {\r\n\t\t\t\tvar newParent = document.createElement(\"div\");\r\n\t\t\t\t\r\n\t\t\t\tvar title = document.createElement(\"span\");\r\n\t\t\t\ttitle.innerHTML = key.charAt(0).toUpperCase() + key.substr(1).replace(/([A-Z])/g, \" $1\")\r\n\t\t\t\t\r\n\t\t\t\tnewParent.appendChild(title);\r\n\t\t\t\t\r\n\t\t\t\tvar container = document.createElement(\"div\");\r\n\t\t\t\tcontainer.style[\"padding-left\"] = \"20px\";\r\n\t\t\t\tnewParent.appendChild(container);\r\n\t\t\t\t\r\n\t\t\t\tparent.appendChild(document.createElement(\"hr\"));\r\n\t\t\t\tparent.appendChild(newParent);\r\n\t\t\t\t\r\n\t\t\t\tif (settings[key] == null) {\r\n\t\t\t\t\tsettings[key] = {};\r\n\t\t\t\t}\r\n\t\t\t\tthis.processSettings(container, value, (keyPrefix == null ? \"\" : (keyPrefix + \".\")) + key, settings);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tloadAllTiles() {\r\n\t\tif (window.tilingRenderLayer != null) {\r\n\t\t\twindow.tilingRenderLayer.tileLoader.loadAll();\r\n\t\t} else {\r\n\t\t\talert(\"No tiling layer\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tdrawTileBorders(value) {\r\n\t\tif (window.tilingRenderLayer != null) {\r\n\t\t\twindow.tilingRenderLayer.drawTileBorders = value;\r\n\t\t\twindow.bimServerViewer.viewer.dirty = true;\r\n\t\t} else {\r\n\t\t\talert(\"No tiling layer\");\r\n\t\t}\r\n\t}\r\n\r\n\torderIndependentTransparency(value) {\r\n\t\twindow.bimServerViewer.viewer.useOrderIndependentTransparency = value;\r\n\t\twindow.bimServerViewer.viewer.dirty = true;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 837,
    "kind": "class",
    "name": "Settings",
    "memberof": "viewer/settings.js",
    "static": true,
    "longname": "viewer/settings.js~Settings",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/settings.js",
    "importStyle": "{Settings}",
    "description": "This class builds a quick UI for changing basic settings and stores the settings in localStorage.\nChanging any of these settings requires a reload of the model, or browser",
    "lineNumber": 7,
    "todo": [
      "This class was quickly hacked together, should not be built upon"
    ],
    "interface": false
  },
  {
    "__docId__": 838,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/settings.js~Settings#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 839,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/settings.js~Settings",
    "static": false,
    "longname": "viewer/settings.js~Settings#settings",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 840,
    "kind": "method",
    "name": "saveSettings",
    "memberof": "viewer/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/settings.js~Settings#saveSettings",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 841,
    "kind": "method",
    "name": "processSettings",
    "memberof": "viewer/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/settings.js~Settings#processSettings",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "settingsDefinition",
        "types": [
          "*"
        ]
      },
      {
        "name": "keyPrefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "settings",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 842,
    "kind": "method",
    "name": "loadAllTiles",
    "memberof": "viewer/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/settings.js~Settings#loadAllTiles",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 843,
    "kind": "method",
    "name": "drawTileBorders",
    "memberof": "viewer/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/settings.js~Settings#drawTileBorders",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 844,
    "kind": "method",
    "name": "orderIndependentTransparency",
    "memberof": "viewer/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/settings.js~Settings#orderIndependentTransparency",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 845,
    "kind": "file",
    "name": "viewer/ssquad.js",
    "content": "/**\n * A Screen-space quadrangle used for deferred rendering. Currently only used for\n * Order Independent Transparency which is hard-coded here in the constructor.\n *\n * @export\n * @class SSQuad\n */\nexport class SSQuad {\n\n    constructor(gl) {\n        this.gl = gl;\n\n        let vao = this.vao = gl.createVertexArray();\n        gl.bindVertexArray(vao);\n\n        let positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n            -1., +1.,   -1., -1.,   +1., -1.,\n            -1., +1.,   +1., -1.,   +1., +1.\n        ]), gl.STATIC_DRAW);\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(0);\n\n        let vs_source = `#version 300 es\n        layout(location=0) in vec4 vertexPosition;\n        out vec2 uv;\n        void main() {\n            gl_Position = vertexPosition;\n            uv = (vertexPosition.xy + 1.) / 2.;\n        }`;\n\n        let fs_source = `#version 300 es\n        precision highp float;\n        uniform sampler2D colorAccumulate;\n        uniform sampler2D alphaAccumulate;\n        in vec2 uv;\n        out vec4 fragColor;\n        void main() {\n            float a = texture(alphaAccumulate, uv).r;\n            vec4 accum = texture(colorAccumulate, uv);\n            // pssst I'm just doing random stuff here\n            fragColor = vec4(pow(accum.rgb / a, vec3(0.75, 0.75, 0.75)), clamp(accum.a, 0., 1.));\n        }`;\n\n        let vs = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vs, vs_source);\n        gl.compileShader(vs);\n        if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(vs));\n        }\n        let fs = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fs, fs_source);\n        gl.compileShader(fs);\n        if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(fs));\n        }\n        let p = this.program = gl.createProgram();\n        gl.attachShader(p, vs);\n        gl.attachShader(p, fs);\n        gl.linkProgram(p);\n        if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {\n            console.error(gl.getProgramInfoLog(p));\n        }\n\n        this.colorLocation = gl.getUniformLocation(p, \"colorAccumulate\");\n        this.alphaLocation = gl.getUniformLocation(p, \"alphaAccumulate\");\n    }\n\n    draw(...args) {\n        let gl = this.gl;\n\n        gl.disable(gl.DEPTH_TEST);\n\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, args[0]);\n        gl.activeTexture(gl.TEXTURE2);\n        gl.bindTexture(gl.TEXTURE_2D, args[1]);\n\n        gl.useProgram(this.program);\n        gl.uniform1i(this.colorLocation, 1);\n        gl.uniform1i(this.alphaLocation, 2);\n\n        gl.bindVertexArray(this.vao);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/ssquad.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 846,
    "kind": "class",
    "name": "SSQuad",
    "memberof": "viewer/ssquad.js",
    "static": true,
    "longname": "viewer/ssquad.js~SSQuad",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/ssquad.js",
    "importStyle": "{SSQuad}",
    "description": "A Screen-space quadrangle used for deferred rendering. Currently only used for\nOrder Independent Transparency which is hard-coded here in the constructor.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SSQuad"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 847,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/ssquad.js~SSQuad",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ssquad.js~SSQuad#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 848,
    "kind": "member",
    "name": "gl",
    "memberof": "viewer/ssquad.js~SSQuad",
    "static": false,
    "longname": "viewer/ssquad.js~SSQuad#gl",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 849,
    "kind": "member",
    "name": "colorLocation",
    "memberof": "viewer/ssquad.js~SSQuad",
    "static": false,
    "longname": "viewer/ssquad.js~SSQuad#colorLocation",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 850,
    "kind": "member",
    "name": "alphaLocation",
    "memberof": "viewer/ssquad.js~SSQuad",
    "static": false,
    "longname": "viewer/ssquad.js~SSQuad#alphaLocation",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 851,
    "kind": "method",
    "name": "draw",
    "memberof": "viewer/ssquad.js~SSQuad",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ssquad.js~SSQuad#draw",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 852,
    "kind": "file",
    "name": "viewer/stats.js",
    "content": "/**\r\n * Keeps track of statistics. Initially only a UI, but can also be used \"headless\" by given a false value for the `active` constructor argument\r\n */\r\nexport class Stats {\r\n\tconstructor(active = true) {\r\n\t\tthis.active = active;\r\n\t\tthis.parameters = {};\r\n\t\tthis.dirty = true;\r\n\t\tthis.updateRequested = true;\r\n\t\t\r\n\t\tthis.groups = {\r\n\t\t\t\"Tiling\": [\r\n\t\t\t\t\"Rendering\",\r\n\t\t\t\t\"Empty\",\r\n\t\t\t\t\"Full\",\r\n\t\t\t\t\"Loading\",\r\n\t\t\t\t\"Loaded\"\r\n\t\t\t],\r\n\t\t\t\"Loading time\": [\r\n\t\t\t\t\"Layer 1\",\r\n\t\t\t\t\"Layer 2\",\r\n\t\t\t\t\"Total\"\r\n\t\t\t], \"Rendering\": [\r\n\t\t\t\t\"FPS\"\r\n\t\t\t], \"Stats\": [\r\n\t\t\t\t\"Updates\"\r\n\t\t\t], \"Models\": [\r\n\t\t\t\t\"Name\",\r\n\t\t\t\t\"Models to load\",\r\n\t\t\t\t\"Models loaded\",\r\n\t\t\t\t\"Objects\",\r\n\t\t\t\t\"Geometries\",\r\n\t\t\t\t\"Geometries reused\",\r\n\t\t\t], \"Primitives\": [\r\n\t\t\t\t\"Primitives to load (L1)\",\r\n\t\t\t\t\"Primitives to load (L2)\",\r\n\t\t\t\t\"Nr primitives loaded\",\r\n\t\t\t\t\"Nr primitives hidden\"\r\n\t\t\t], \"Data\": [\r\n\t\t\t\t\"GPU bytes\",\r\n\t\t\t\t\"GPU bytes reuse\",\r\n\t\t\t\t\"GPU bytes total\"\r\n\t\t\t], \"Drawing\": [\r\n\t\t\t\t\"Triangles to draw (L1)\",\r\n\t\t\t\t\"Triangles to draw (L2)\",\r\n\t\t\t\t\"Draw calls per frame (L1)\",\r\n\t\t\t\t\"Draw calls per frame (L2)\"\r\n\t\t\t], \"Network\": [\r\n\t\t\t\t\"Bytes OTL\"\r\n\t\t\t], \"Buffers\": [\r\n\t\t\t\t\"Buffer groups\",\r\n\t\t\t], \"BufferSet pool\": [\r\n\t\t\t\t\"Used\",\r\n\t\t\t\t\"Available\",\r\n\t\t\t\t\"Total memory\"\r\n\t\t\t], \"Renderer settings\": [\r\n\t\t\t\t\"Object colors\",\r\n\t\t\t\t\"Small indices if possible\",\r\n\t\t\t\t\"Quantize normals\",\r\n\t\t\t\t\"Quantize vertices\"\r\n\t\t\t], \"Loader settings\": [\r\n\t\t\t\t\"Object colors\",\r\n\t\t\t\t\"Quantize normals\",\r\n\t\t\t\t\"Quantize vertices\",\r\n\t\t\t]\r\n\t\t};\r\n\t\t\r\n\t\tfor (var groupName in this.groups) {\r\n\t\t\tvar group = this.groups[groupName];\r\n\t\t\tvar groupObject = {};\r\n\t\t\tthis.parameters[groupName] = groupObject;\r\n\t\t\tfor (var key of group) {\r\n\t\t\t\tgroupObject[key] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget(group, key) {\r\n\t\treturn this.parameters[group][key];\r\n\t}\r\n\r\n\tsetParameter(group, key, value) {\r\n\t\tvar group = this.parameters[group];\r\n\t\tif (group[key] == value) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tgroup[key] = value;\r\n\t\tthis.dirty = true;\r\n\t}\r\n\r\n\tinc(groupName, key, value) {\r\n\t\tvar group = this.parameters[groupName];\r\n\t\tif (group[key] == null) {\r\n\t\t\tgroup[key] = 0;\r\n\t\t}\r\n\t\tif (value == null) {\r\n\t\t\tgroup[key] = group[key] + 1;\r\n\t\t} else {\r\n\t\t\tgroup[key] = group[key] + value;\r\n\t\t}\r\n\t\tthis.dirty = true;\r\n\t}\r\n\r\n\tdec(groupName, key, value) {\r\n\t\tvar group = this.parameters[groupName];\r\n\t\tif (group[key] == null) {\r\n\t\t\tgroup[key] = 0;\r\n\t\t}\r\n\t\tif (value == null) {\r\n\t\t\tgroup[key] = group[key] - 1;\r\n\t\t} else {\r\n\t\t\tgroup[key] = group[key] - value;\r\n\t\t}\r\n\t\tthis.dirty = true;\r\n\t}\r\n\r\n\tnumberWithCommas(x) {\r\n\t\treturn Number(x).toLocaleString();\r\n\t}\r\n\r\n\trequestUpdate() {\r\n\t\tthis.updateRequested = true;\r\n\t}\r\n\t\r\n\tupdate() {\r\n\t\tif (this.active && document.getElementById(\"stats\")) {\r\n\t\t\tif (!this.updateRequested) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.inc(\"Stats\", \"Updates\");\r\n\t\t\tthis.updates++;\r\n\t\t\tfor (var groupName in this.groups) {\r\n\t\t\t\tvar group = this.groups[groupName];\r\n\t\t\t\tvar groupElement = document.getElementById(groupName + \"-group\");\r\n\t\t\t\tif (groupElement == null) {\r\n\t\t\t\t\tgroupElement = document.createElement(\"div\");\r\n\t\t\t\t\tgroupElement.id = groupName + \"-group\";\r\n\t\t\t\t\tdocument.getElementById(\"stats\").appendChild(groupElement);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar groupTitle = document.createElement(\"h3\");\r\n\t\t\t\t\tgroupTitle.innerHTML = groupName;\r\n\t\t\t\t\tgroupElement.appendChild(groupTitle);\r\n\t\t\t\t}\r\n\t\t\t\tfor (var key of group) {\r\n\t\t\t\t\tvar fullKey = groupName + \"_\" + key;\r\n\t\t\t\t\tvar value = this.parameters[groupName][key];\r\n\t\t\t\t\tvar element = document.getElementById(fullKey);\r\n\t\t\t\t\tif (element == null) {\r\n\t\t\t\t\t\telement = document.createElement(\"div\");\r\n\t\t\t\t\t\telement.id = fullKey;\r\n\t\t\t\t\t\tgroupElement.appendChild(element);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar newStringValue = value;\r\n\t\t\t\t\tif (value == null) {\r\n\t\t\t\t\t\tnewStringValue = key + \": 0\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (typeof value == \"number\") {\r\n\t\t\t\t\t\t\tnewStringValue = key + \": \" + this.numberWithCommas(value);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnewStringValue = key + \": \" + value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (newStringValue != element.textContent) {\r\n\t\t\t\t\t\telement.textContent  = newStringValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.updateRequested = false;\r\n\t\t\tthis.dirty = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tcleanup() {\r\n\t\tvar stats = document.getElementById(\"stats\");\r\n\t\twhile (stats.firstChild) {\r\n\t\t\tstats.removeChild(stats.firstChild);\r\n\t\t}\r\n\t\tthis.dirty = true;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/stats.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 853,
    "kind": "class",
    "name": "Stats",
    "memberof": "viewer/stats.js",
    "static": true,
    "longname": "viewer/stats.js~Stats",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/stats.js",
    "importStyle": "{Stats}",
    "description": "Keeps track of statistics. Initially only a UI, but can also be used \"headless\" by given a false value for the `active` constructor argument",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 854,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/stats.js~Stats#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 855,
    "kind": "member",
    "name": "active",
    "memberof": "viewer/stats.js~Stats",
    "static": false,
    "longname": "viewer/stats.js~Stats#active",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 856,
    "kind": "member",
    "name": "parameters",
    "memberof": "viewer/stats.js~Stats",
    "static": false,
    "longname": "viewer/stats.js~Stats#parameters",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 857,
    "kind": "member",
    "name": "dirty",
    "memberof": "viewer/stats.js~Stats",
    "static": false,
    "longname": "viewer/stats.js~Stats#dirty",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 858,
    "kind": "member",
    "name": "updateRequested",
    "memberof": "viewer/stats.js~Stats",
    "static": false,
    "longname": "viewer/stats.js~Stats#updateRequested",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 859,
    "kind": "member",
    "name": "groups",
    "memberof": "viewer/stats.js~Stats",
    "static": false,
    "longname": "viewer/stats.js~Stats#groups",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"Tiling\": *, \"Loading time\": *, \"Rendering\": *, \"Stats\": *, \"Models\": *, \"Primitives\": *, \"Data\": *, \"Drawing\": *, \"Network\": *, \"Buffers\": *, \"BufferSet pool\": *, \"Renderer settings\": *, \"Loader settings\": *}"
      ]
    }
  },
  {
    "__docId__": 860,
    "kind": "method",
    "name": "get",
    "memberof": "viewer/stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/stats.js~Stats#get",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "group",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "setParameter",
    "memberof": "viewer/stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/stats.js~Stats#setParameter",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "group",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 863,
    "kind": "method",
    "name": "inc",
    "memberof": "viewer/stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/stats.js~Stats#inc",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "groupName",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 865,
    "kind": "method",
    "name": "dec",
    "memberof": "viewer/stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/stats.js~Stats#dec",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "groupName",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "numberWithCommas",
    "memberof": "viewer/stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/stats.js~Stats#numberWithCommas",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 868,
    "kind": "method",
    "name": "requestUpdate",
    "memberof": "viewer/stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/stats.js~Stats#requestUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 870,
    "kind": "method",
    "name": "update",
    "memberof": "viewer/stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/stats.js~Stats#update",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 873,
    "kind": "method",
    "name": "cleanup",
    "memberof": "viewer/stats.js~Stats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/stats.js~Stats#cleanup",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 875,
    "kind": "file",
    "name": "viewer/svgoverlay.js",
    "content": "let tmp = vec3.create();\n\n/**\n * A SVG overlay that is synced with the WebGL viewport for efficiently rendering\n * two-dimensional elements such as text, that are not easily rendered using WebGL.\n *\n * @export\n * @class SvgOverlay\n */\nexport class SvgOverlay {\n\tconstructor(domNode, camera) {\n        this.track = domNode;\n        this.camera = camera;\n\n        let svg = this.svg = this.create(\"svg\", {id:\"viewerOverlay\"}, {\n            padding: 0,\n            margin: 0,\n            position: \"absolute\",\n            zIndex: 10000,\n            display: \"block\"\n        });\n\n        document.body.appendChild(svg);\n\n        this.resize();\n        this.camera.listeners.push(this.update.bind(this));\n        this._orbitCenter = this.create(\"circle\", {\n            visibility: \"hidden\",\n            r: 6\n        });\n\n        window.addEventListener(\"resize\", this.resize.bind(this), false);\n    }\n\n    update() {\n    \tif (this.camera.orbitting != this.lastOrbitting) {\n    \t\tthis._orbitCenter.setAttribute(\"visibility\", this.camera.orbitting ? \"visible\" : \"hidden\");\n    \t\tthis.lastOrbitting = this.camera.orbitting\n    \t}\n        if (this.camera.orbitting) {\n            vec3.transformMat4(tmp, this.camera.center, this.camera.viewProjMatrix);\n            this._orbitCenter.setAttribute(\"cx\", +tmp[0] * this.w + this.w);\n            this._orbitCenter.setAttribute(\"cy\", -tmp[1] * this.h + this.h);\n        }\n    }\n\n    create(tag, attrs, style) {\n        let elem = document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n        for (let [k, v] of Object.entries(attrs || {})) {\n            elem.setAttribute(k, v);\n        }\n        let s = elem.style;\n        for (let [k, v] of Object.entries(style || {})) {\n            s[k] = v;\n        }        \n        if (this.svg) {\n            this.svg.appendChild(elem);\n        }\n        return elem;\n    }\n\n    resize() {\n        function getElementXY(e) {\n            var x = 0, y = 0;\n            while (e) {\n                x += (e.offsetLeft-e.scrollLeft);\n                y += (e.offsetTop-e.scrollTop);\n                e = e.offsetParent;\n            }\n\n            var bodyRect = document.body.getBoundingClientRect();\n            return {\n                x: (x - bodyRect.left),\n                y: (y - bodyRect.top)\n            };\n        }\n        \n        let svgStyle = this.svg.style;\n        var xy = getElementXY(this.track);\n        svgStyle.left = xy.x + \"px\";\n        svgStyle.top = xy.y + \"px\";\n        svgStyle.width = (this.w = this.track.clientWidth) + \"px\";\n        svgStyle.height = (this.h = this.track.clientHeight) + \"px\";\n        this.svg.setAttribute(\"width\", this.w);\n        this.svg.setAttribute(\"height\", this.h);\n        this.svg.setAttribute(\"viewBox\", \"0 0 \" + this.w + \" \" + this.h);\n        this.w /= 2.;\n        this.h /= 2.;\n        \n        this.aspect = this.w / this.h;\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/svgoverlay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 876,
    "kind": "variable",
    "name": "tmp",
    "memberof": "viewer/svgoverlay.js",
    "static": true,
    "longname": "viewer/svgoverlay.js~tmp",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/svgoverlay.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 877,
    "kind": "class",
    "name": "SvgOverlay",
    "memberof": "viewer/svgoverlay.js",
    "static": true,
    "longname": "viewer/svgoverlay.js~SvgOverlay",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/svgoverlay.js",
    "importStyle": "{SvgOverlay}",
    "description": "A SVG overlay that is synced with the WebGL viewport for efficiently rendering\ntwo-dimensional elements such as text, that are not easily rendered using WebGL.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SvgOverlay"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 878,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 879,
    "kind": "member",
    "name": "track",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#track",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 880,
    "kind": "member",
    "name": "camera",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#camera",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 881,
    "kind": "member",
    "name": "_orbitCenter",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#_orbitCenter",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 882,
    "kind": "method",
    "name": "update",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#update",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 883,
    "kind": "member",
    "name": "lastOrbitting",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#lastOrbitting",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 884,
    "kind": "method",
    "name": "create",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#create",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "tag",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrs",
        "types": [
          "*"
        ]
      },
      {
        "name": "style",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "resize",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#resize",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 886,
    "kind": "member",
    "name": "w",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#w",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 887,
    "kind": "member",
    "name": "h",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#h",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 888,
    "kind": "member",
    "name": "aspect",
    "memberof": "viewer/svgoverlay.js~SvgOverlay",
    "static": false,
    "longname": "viewer/svgoverlay.js~SvgOverlay#aspect",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 889,
    "kind": "file",
    "name": "viewer/tileloader.js",
    "content": "import {Executor} from './executor.js'\r\nimport {Utils} from './utils.js'\r\nimport {GpuBufferManager} from './gpubuffermanager.js'\r\nimport {GeometryLoader} from \"./geometryloader.js\"\r\n\r\n/**\r\n * Loads tiles. Needs to be initialized first (initialize method).\r\n */\r\nexport class TileLoader {\r\n\tconstructor(tilingRenderLayer, viewer, bimServerApi, densityThreshold, reuseLowerThreshold, geometryDataToReuse, roids, fieldsToInclude) {\r\n\t\tthis.tilingRenderLayer = tilingRenderLayer;\r\n\t\tthis.viewer = viewer;\r\n\t\tthis.settings = viewer.settings;\r\n\t\tthis.bimServerApi = bimServerApi;\r\n\t\tthis.densityThreshold = densityThreshold;\r\n\t\tthis.reuseLowerThreshold = reuseLowerThreshold;\r\n\t\tthis.geometryDataToReuse = Array.from(geometryDataToReuse);\r\n\t\tthis.roids = roids;\r\n\t\tthis.fieldsToInclude = fieldsToInclude;\r\n\t\r\n\t\tthis.excludedTypes = [\"IfcSpace\", \"IfcOpeningElement\", \"IfcAnnotation\"];\r\n\t\tthis.executor = new Executor(64);\r\n\t\t\r\n//\t\tif (this.viewer.vertexQuantization) {\r\n//\t\t\tthis.quantizationMap = {};\r\n//\t\t\tfor (var roid of this.roids) {\r\n//\t\t\t\tthis.quantizationMap[roid] = this.viewer.vertexQuantization.getUntransformedVertexQuantizationMatrixForRoid(roid);\r\n//\t\t\t}\r\n//\t\t}\r\n\t\t\r\n\t\tthis.loaderCounter = 0;\r\n\t}\r\n\t\r\n\t/*\r\n\t * Initialize the tile loader. This needs to be called only once, and it's async, so make sure to use the returned Promise\r\n\t */\r\n\tinitialize() {\r\n\t\tvar promise = new Promise((resolve, reject) => {\r\n\t\t\tthis.bimServerApi.call(\"ServiceInterface\", \"getTileCounts\", {\r\n\t\t\t\troids: this.roids,\r\n\t\t\t\texcludedTypes: this.excludedTypes,\r\n\t\t\t\tgeometryIdsToReuse: this.geometryDataToReuse,\r\n\t\t\t\tminimumThreshold: this.densityThreshold,\r\n\t\t\t\tmaximumThreshold: -1,\r\n\t\t\t\tdepth: this.settings.maxOctreeDepth\r\n\t\t\t}, (list) => {\r\n\t\t\t\tfor (var i=0; i<list.length; i+=2) {\r\n\t\t\t\t\tvar tileId = list[i];\r\n\t\t\t\t\tvar nrObjects = list[i + 1];\r\n\t\t\t\t\tif (nrObjects == 0) {\r\n\t\t\t\t\t\t// Should not happen\r\n\t\t\t\t\t\tdebugger;\r\n\t\t\t\t\t\tthis.viewer.stats.inc(\"Tiling\", \"Empty\");\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.viewer.stats.inc(\"Tiling\", \"Full\");\r\n\t\t\t\t\tvar node = this.tilingRenderLayer.octree.getNodeById(tileId);\r\n\t\t\t\t\t\r\n\t\t\t\t\tnode.loadingStatus = 0;\r\n\t\t\t\t\tnode.nrObjects = nrObjects;\r\n\t\t\t\t\tnode.stats = {\r\n\t\t\t\t\t\ttriangles: 0,\r\n\t\t\t\t\t\tdrawCallsPerFrame: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tthis.tilingRenderLayer.octree.prepareLevelLists();\r\n\r\n\t\t\t\tresolve();\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn promise;\r\n\t}\r\n\t\r\n\t/*\r\n\t * Starts loading a specific tile\r\n\t */\r\n\tloadTile(node, executor) {\r\n\t\tif (!this.tilingRenderLayer.enabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (node.loadingStatus != 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tnode.loadingStatus = 1;\r\n\t\tif (executor == null) {\r\n\t\t\texecutor = this.executor;\r\n\t\t}\r\n\t\tif (node.nrObjects == 0) {\r\n\t\t\tnode.loadingStatus = 2;\r\n\t\t\t// This happens for parent nodes that don't contain any objects, but have children that do have objects\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tnode.gpuBufferManager = new GpuBufferManager(this.viewer);\r\n\t\t\r\n\t\tconst loaderSettings = JSON.parse(JSON.stringify(this.settings.loaderSettings));\r\n\t\t\r\n\t\tloaderSettings.globalTransformation = Utils.toArray(this.viewer.globalTransformation);\r\n\t\t\r\n\t\tvar query = {\r\n\t\t\ttype: {\r\n\t\t\t\tname: \"IfcProduct\",\r\n\t\t\t\tincludeAllSubTypes: true,\r\n\t\t\t\texclude: this.excludedTypes\r\n\t\t\t},\r\n\t\t\ttiles: {\r\n\t\t\t\tids: [node.id],\r\n\t\t\t\tdensityUpperThreshold: this.densityThreshold,\r\n\t\t\t\tdensityLowerThreshold: -1,\r\n\t\t\t\treuseLowerThreshold: this.reuseLowerThreshold,\r\n\t\t\t\tgeometryDataToReuse: this.geometryDataToReuse,\r\n\t\t\t\tmaxDepth: this.settings.maxOctreeDepth\r\n\t\t\t},\r\n\t\t\tinclude: {\r\n\t\t\t\ttype: \"IfcProduct\",\r\n\t\t\t\tfield: \"geometry\",\r\n\t\t\t\tinclude: {\r\n\t\t\t\t\ttype: \"GeometryInfo\",\r\n\t\t\t\t\tfield: \"data\",\r\n\t\t\t\t\tinclude: {\r\n\t\t\t\t\t\ttype: \"GeometryData\",\r\n\t\t\t\t\t\tfieldsDirect: this.fieldsToInclude\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tloaderSettings: loaderSettings\r\n\t\t};\r\n\t\t\r\n\t\tif (this.tilingRenderLayer.viewer.vertexQuantization) {\r\n\t\t\tquery.loaderSettings.vertexQuantizationMatrix = this.tilingRenderLayer.viewer.vertexQuantization.vertexQuantizationMatrixWithGlobalTransformation;\r\n\t\t}\r\n\t\tvar geometryLoader = new GeometryLoader(this.loaderCounter++, this.bimServerApi, this.tilingRenderLayer, this.roids, this.settings.loaderSettings, this.quantizationMap, this.viewer.stats, this.settings, query, this.tilingRenderLayer.reusedGeometryCache, node.gpuBufferManager);\r\n\t\t\r\n\t\t// We now use the total model bounds for the quantization since the prebuilt buffers already applied the transformation, thus no problems are expected for strange bounds\r\n\t\tgeometryLoader.unquantizationMatrix = this.tilingRenderLayer.viewer.vertexQuantization.inverseVertexQuantizationMatrixWithGlobalTransformation;\r\n\t\t\r\n\t\tthis.tilingRenderLayer.registerLoader(geometryLoader.loaderId);\r\n\t\tthis.tilingRenderLayer.loaderToNode[geometryLoader.loaderId] = node;\r\n\t\tgeometryLoader.onStart = () => {\r\n\t\t\tnode.loadingStatus = 2;\r\n\t\t\tthis.viewer.stats.inc(\"Tiling\", \"Loading\");\r\n\t\t\tthis.viewer.dirty = true;\r\n\t\t};\r\n\t\texecutor.add(geometryLoader).then(() => {\r\n\t\t\tthis.viewer.stats.dec(\"Tiling\", \"Loading\");\r\n\t\t\tthis.viewer.stats.inc(\"Tiling\", \"Loaded\");\r\n\t\t\tif (node.gpuBufferManager.isEmpty() && \r\n\t\t\t\t\t(node.bufferManager == null || node.bufferManager.bufferSets.size == 0)) {\r\n\t\t\t\tnode.loadingStatus = 5;\r\n\t\t\t} else {\r\n\t\t\t\tnode.loadingStatus = 3;\r\n\t\t\t}\r\n\t\t\tthis.tilingRenderLayer.done(geometryLoader.loaderId);\r\n\t\t});\r\n\t}\r\n\t\r\n\tgeometryLoaderDone(geometryLoader) {\r\n\t\t\r\n\t}\r\n\t\r\n\t/*\r\n\t * Can for example be called} from the Console for debugging purposes\r\n\t * In real life you'd never call this, since it kind of defeats the purpose of tiling\r\n\t */\r\n\tloadAll(progressListener) {\r\n\t\tvar executor = new Executor(64);\r\n\t\texecutor.setProgressListener(progressListener);\r\n\t\t\t\r\n\t\t\t// TODO load per level, so first level 0, then 1 etc... These calls should be submitted to the executor only after the previous layer has been submitted\r\n\t\t\t// Maybe we could load 2 levels at a time, to improve performance... So 0 and 1, as soon as 0 has loaded, start loading 2 etc...\r\n\t\t\t\r\n\t\t\t// Traversing breath-first so the big chucks are loaded first\r\n//\t\t\tfor (var l=0; l<=this.octree.deepestLevel; l++) {\r\n//\t\t\t\t\r\n//\t\t\t}\r\n\t\t\t\r\n\t\tthis.tilingRenderLayer.octree.traverseBreathFirst((node) => {\r\n\t\t\tthis.loadTile(node, executor);\r\n\t\t});\r\n\t\r\n\t\texecutor.awaitTermination().then(() => {\r\n\t\t\tthis.tilingRenderLayer.completelyDone();\r\n//\t\t\tthis.tilingRenderLayer.octree.prepareBreathFirst((node) => {\r\n//\t\t\t\treturn true;\r\n//\t\t\t});\r\n\t\t\tthis.viewer.stats.requestUpdate();\r\n\t\t\tdocument.getElementById(\"progress\").style.display = \"none\";\r\n\t\t});\t\r\n\t\treturn executor.awaitTermination();\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/tileloader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 890,
    "kind": "class",
    "name": "TileLoader",
    "memberof": "viewer/tileloader.js",
    "static": true,
    "longname": "viewer/tileloader.js~TileLoader",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/tileloader.js",
    "importStyle": "{TileLoader}",
    "description": "Loads tiles. Needs to be initialized first (initialize method).",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 891,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/tileloader.js~TileLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 892,
    "kind": "member",
    "name": "tilingRenderLayer",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#tilingRenderLayer",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 893,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 894,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#settings",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 895,
    "kind": "member",
    "name": "bimServerApi",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#bimServerApi",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 896,
    "kind": "member",
    "name": "densityThreshold",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#densityThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 897,
    "kind": "member",
    "name": "reuseLowerThreshold",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#reuseLowerThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 898,
    "kind": "member",
    "name": "geometryDataToReuse",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#geometryDataToReuse",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 899,
    "kind": "member",
    "name": "roids",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#roids",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 900,
    "kind": "member",
    "name": "fieldsToInclude",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#fieldsToInclude",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 901,
    "kind": "member",
    "name": "excludedTypes",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#excludedTypes",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 902,
    "kind": "member",
    "name": "executor",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#executor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 903,
    "kind": "member",
    "name": "loaderCounter",
    "memberof": "viewer/tileloader.js~TileLoader",
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#loaderCounter",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 904,
    "kind": "method",
    "name": "initialize",
    "memberof": "viewer/tileloader.js~TileLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#initialize",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 905,
    "kind": "method",
    "name": "loadTile",
    "memberof": "viewer/tileloader.js~TileLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#loadTile",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "executor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 906,
    "kind": "method",
    "name": "geometryLoaderDone",
    "memberof": "viewer/tileloader.js~TileLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#geometryLoaderDone",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "geometryLoader",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 907,
    "kind": "method",
    "name": "loadAll",
    "memberof": "viewer/tileloader.js~TileLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tileloader.js~TileLoader#loadAll",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [
      {
        "name": "progressListener",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 908,
    "kind": "file",
    "name": "viewer/tilingrenderlayer.js",
    "content": "import {RenderLayer} from './renderlayer.js'\r\nimport {Octree} from './octree.js'\r\nimport {Frustum} from './frustum.js'\r\nimport {LineBoxGeometry} from './lineboxgeometry.js'\r\nimport {BufferManagerTransparencyOnly} from './buffermanagertransparencyonly.js'\r\nimport {BufferManagerPerColor} from './buffermanagerpercolor.js'\r\nimport {Utils} from './utils.js'\r\nimport {TileLoader} from './tileloader.js'\r\nimport {ReuseLoader} from './reuseloader.js'\r\n\r\n/**\r\n * A specific type of RenderLayer, which uses Tiling to achieve better render performance, but also minimizes the amount of data that needs to be loaded of the line.\r\n * \r\n */\r\nexport class TilingRenderLayer extends RenderLayer {\r\n\tconstructor(viewer, geometryDataToReuse, bounds) {\r\n\t\tsuper(viewer, geometryDataToReuse);\r\n\r\n\t\tthis.octree = new Octree(viewer, bounds, viewer.globalTransformation, viewer.settings.maxOctreeDepth);\r\n\t\tthis.lineBoxGeometry = new LineBoxGeometry(viewer, viewer.gl);\r\n\r\n\t\tthis.loaderToNode = {};\r\n\r\n\t\tthis.drawTileBorders = this.viewer.settings.realtimeSettings.drawTileBorders;\r\n\r\n\t\tthis._frustum = new Frustum();\r\n\t\t\r\n\t\twindow.tilingRenderLayer = this;\r\n\t\t\r\n\t\tthis.enabled = false;\r\n\t\t\r\n\t\tthis.show = \"none\";\r\n\t\tthis.initialLoad = \"none\";\r\n\t}\r\n\t\r\n\tshowAll() {\r\n\t\tthis.show = \"all\";\r\n\t\tthis.viewer.dirty = true;\r\n\t}\r\n\r\n\tload(bimServerApi, densityThreshold, roids, fieldsToInclude, progressListener) {\r\n\t\tvar reuseLowerThreshold = this.settings.loaderSettings.reuseThreshold;\r\n\t\tif (!this.settings.loaderSettings.tilingLayerReuse) {\r\n\t\t\treuseLowerThreshold = -1;\r\n\t\t}\r\n\t\tthis.tileLoader = new TileLoader(this, this.viewer, bimServerApi, densityThreshold, reuseLowerThreshold, this.geometryDataToReuse, roids, fieldsToInclude);\r\n\t\tif (this.settings.loaderSettings.tilingLayerReuse) {\r\n\t\t\tthis.reuseLoader = new ReuseLoader(this.viewer, reuseLowerThreshold, bimServerApi, fieldsToInclude, roids, this.tileLoader.quantizationMap, this.geometryCache, this.geometryDataToReuse);\r\n\t\t}\r\n\r\n\t\tvar promise = new Promise((resolve, reject) => {\r\n\t\t\tvar init = this.tileLoader.initialize().then(() => {\r\n\t\t\t\tthis.enabled = true;\r\n\t\t\t\t// Ugly way of triggering an octree-visibility update\r\n\t\t\t\tthis.lastViewMatrix = null;\r\n\t\t\t\tif (this.initialLoad == \"all\") {\r\n\t\t\t\t\treturn this.tileLoader.loadAll(progressListener);\r\n\t\t\t\t}\r\n\t\t\t\tresolve();\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn promise;\r\n\t}\r\n\r\n\tcull(node) {\r\n\t\t// 1. Are we always showing all objects?\r\n\t\tif (this.show == \"all\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// 2. Is the complete Tile outside of the view frustum?\r\n\t\tvar isect = this._frustum.intersectsWorldAABB(node.normalizedBoundsVectors);\r\n\r\n\t\tif (isect === Frustum.OUTSIDE_FRUSTUM) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\t// 3. In the tile too far away?\r\n\t\tvar cameraEye = this.viewer.camera.eye;\r\n\t\tvar tileCenter = node.normalizedCenter;\r\n\t\tvar sizeFactor = 1 / Math.pow(2, node.level);\r\n\t\tvar closestPotentialDistanceMm = Math.abs(vec3.distance(cameraEye, tileCenter) - node.radius);\r\n\t\t\r\n//\t\tconsole.log(closestPotentialDistanceMm);\r\n\t\t\r\n\t\tconst vFOV = this.viewer.camera.perspective.fov * Math.PI / 180;\r\n\t\tconst pixelWidth = 2 * Math.tan(vFOV / 2) * Math.abs(closestPotentialDistanceMm);\r\n\r\n\t\tif (node.gpuBufferManager != null) {\r\n\t\t\tnode.stats.trianglesDrawing = 0;\r\n\t\t\tvar totalTriangles = 0;\r\n\t\t\tfor (var transparent of [false, true]) {\r\n\t\t\t\tvar buffers = node.gpuBufferManager.getBuffers(transparent, false);\r\n\t\t\t\tfor (var buffer of buffers) {\r\n\t\t\t\t\tbuffer.nrTrianglesToDraw = Math.floor(Math.min(buffer.nrIndices, Math.floor(buffer.nrIndices * (200000 / closestPotentialDistanceMm))) / 3);\r\n\t\t\t\t\ttotalTriangles += buffer.nrIndices / 3;\r\n\t\t\t\t\tnode.stats.trianglesDrawing += buffer.nrTrianglesToDraw;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (var transparent of [false, true]) {\r\n\t\t\t\tvar buffers = node.gpuBufferManager.getBuffers(transparent, true);\r\n\t\t\t\tfor (var buffer of buffers) {\r\n\t\t\t\t\tbuffer.nrTrianglesToDraw = Math.floor(Math.min(buffer.nrIndices, Math.floor(buffer.nrIndices * (200000 / closestPotentialDistanceMm))) / 3);\r\n//\t\t\t\t\tbuffer.nrTrianglesToDraw = (buffer.nrIndices / 3) * buffer.numInstances;\r\n\t\t\t\t\ttotalTriangles += (buffer.nrIndices / 3) * buffer.numInstances;\r\n\t\t\t\t\tnode.stats.trianglesDrawing += buffer.nrTrianglesToDraw;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnode.normalizedDistanceFactor = node.stats.trianglesDrawing / totalTriangles;\r\n\t\t\tif (node.stats.trianglesDrawing == 0) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (closestPotentialDistanceMm < 800000) {\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\tnode.normalizedDistanceFactor = 0;\r\n\t\t\t\tif (node.stats != null) {\r\n\t\t\t\t\tnode.stats.trianglesDrawing = 0;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Default response\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tprepareRender() {\r\n\t\t// This only needs to be recalculated if the camera has changed, so we keep track of the last view matrix\r\n\t\tif (this.lastViewMatrix == null || this.octree.size != this.lastOctreeSize || !mat4.equals(this.lastViewMatrix, this.viewer.camera.viewMatrix)) {\r\n\t\t\tthis.lastViewMatrix = mat4.clone(this.viewer.camera.viewMatrix);\r\n\r\n\t\t\tthis._frustum.init(this.viewer.camera.viewMatrix, this.viewer.camera.projMatrix);\r\n\r\n\t\t\tvar renderingTiles = 0;\r\n\t\t\tvar renderingTriangles = 0;\r\n\t\t\tvar drawCalls = 0;\r\n\t\t\t\r\n\t\t\tthis.octree.traverseBreathFirst((node) => {\r\n\t\t\t\tif (node.parent != null && node.parent.visibilityStatus == 0) {\r\n\t\t\t\t\tnode.visibilityStatus = 0;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.cull(node)) {\r\n\t\t\t\t\tnode.visibilityStatus = 0;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode.visibilityStatus = 1;\r\n\t\t\t\t\tif (node.loadingStatus == 0) {\r\n\t\t\t\t\t\tthis.tileLoader.loadTile(node);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (node.stats != null) {\r\n\t\t\t\t\t\t\trenderingTiles++;\r\n\t\t\t\t\t\t\trenderingTriangles += (node.stats.trianglesDrawing ? node.stats.trianglesDrawing : 0);\r\n\t\t\t\t\t\t\tdrawCalls += node.stats.drawCallsPerFrame;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tthis.viewer.stats.setParameter(\"Drawing\", \"Draw calls per frame (L2)\", drawCalls);\r\n\t\t\tthis.viewer.stats.setParameter(\"Drawing\", \"Triangles to draw (L2)\", renderingTriangles);\r\n\t\t\tthis.viewer.stats.setParameter(\"Tiling\", \"Rendering\", renderingTiles);\r\n\t\t}\r\n\t}\r\n\t\r\n\trenderBuffers(transparency, reuse, visibleElements) {\r\n\t\t// TODO when navigation is active (rotating, panning etc...), this would be the place to decide to for example not-render anything in this layer, or maybe apply more aggressive culling\r\n\t\t// if (this.viewer.navigationActive) {\r\n\t\t// \treturn;\r\n\t\t// }\r\n\t\t\r\n\t\t// TODO would be nicer if this was passed as an integer argument, indicating the iteration count of this frame\r\n\t\tlet picking = visibleElements.pass === 'pick';\r\n\r\n\t\tvar programInfo = this.viewer.programManager.getProgram(this.viewer.programManager.createKey(reuse, picking));\r\n\r\n\t\tthis.gl.useProgram(programInfo.program);\r\n\r\n\t\tif (!picking) {\r\n\t\t\t// TODO find out whether it's possible to do this binding before the program is used (possibly just once per frame, and better yet, a different location in the code)\r\n\t\t\tthis.viewer.lighting.render(programInfo.uniformBlocks.LightData);\r\n\t\t\tthis.gl.uniformMatrix3fv(programInfo.uniformLocations.viewNormalMatrix, false, this.viewer.camera.viewNormalMatrix);\r\n\t\t}\r\n\r\n\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, this.viewer.camera.projMatrix);\r\n\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.viewMatrix, false, this.viewer.camera.viewMatrix);\r\n\t\tif (this.settings.quantizeVertices) {\r\n\t\t\tthis.gl.uniformMatrix4fv(programInfo.uniformLocations.vertexQuantizationMatrix, false, this.viewer.vertexQuantization.getTransformedInverseVertexQuantizationMatrix());\r\n\t\t}\r\n\r\n\t\tthis.octree.traverse((node) => {\r\n\t\t\t// TODO at the moment a list (of non-empty tiles) is used to do traverseBreathFirst, but since a big optimization is possible by automatically culling \r\n\t\t\t// child nodes of parent nodes that are culled, we might have to reconsider this and go back to tree-traversal, where returning false would indicate to \r\n\t\t\t// skip the remaining child nodes\r\n\t\t\t\r\n\t\t\tif (node.visibilityStatus == 1) {\r\n\t\t\t\tif (node.gpuBufferManager == null) {\r\n\t\t\t\t\t// Not initialized yet\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar buffers = node.gpuBufferManager.getBuffers(transparency, reuse);\r\n\t\t\t\tthis.renderFinalBuffers(buffers, programInfo, visibleElements);\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\trenderTileBorders() {\r\n\t\tif (this.drawTileBorders) {\r\n\t\t\t// The lines are rendered in the transparency-phase only\r\n\t\t\tthis.lineBoxGeometry.renderStart(this.viewer);\r\n\t\t\tthis.octree.traverse((node, level) => {\r\n\t\t\t\tvar color = null;\r\n\t\t\t\tif (node.loadingStatus == 0) {\r\n\t\t\t\t\t// No visualisation, node is not empty (or parent node)\r\n\t\t\t\t} else if (node.loadingStatus == 1) {\r\n\t\t\t\t\t// Node is waiting to start loading\r\n\t\t\t\t\tcolor = [1, 0, 0, 1];\r\n\t\t\t\t} else if (node.loadingStatus == 2) {\r\n\t\t\t\t\t// Node is loading\r\n\t\t\t\t} else if (node.loadingStatus == 3) {\r\n\t\t\t\t\t// Node is loaded\r\n\t\t\t\t\tif (node.visibilityStatus == 0) {\r\n\t\t\t\t\t\tcolor = [0, 1, 0, 1];\r\n\t\t\t\t\t} else if (node.visibilityStatus == 1) {\r\n\t\t\t\t\t\tif (node.normalizedDistanceFactor == 1) {\r\n\t\t\t\t\t\t\tcolor = [0, 0, 0, 0];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcolor = [0, 0, 1, 1 - node.normalizedDistanceFactor];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (node.loadingStatus == 4) {\r\n\t\t\t\t\t// To be documented\r\n\t\t\t\t\tcolor = [0.5, 0.5, 0.5, 1];\r\n\t\t\t\t} else if (node.loadingStatus == 5) {\r\n\t\t\t\t\t// Node has been tried to load, but no objects were returned\r\n\t\t\t\t}\r\n\t\t\t\tif (color != null) {\r\n\t\t\t\t\tthis.lineBoxGeometry.render(color, node.normalizedMatrix, 0.001);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.lineBoxGeometry.renderStop();\r\n\t\t}\r\n\t}\r\n\r\n\taddGeometry(loaderId, geometry, object) {\r\n\t\tvar sizes = {\r\n\t\t\tvertices: geometry.positions.length,\r\n\t\t\tnormals: geometry.normals.length,\r\n\t\t\tindices: geometry.indices.length,\r\n\t\t\tcolors: (geometry.colors != null ? geometry.colors.length : 0),\r\n\t\t\tpickColors: geometry.positions.length\r\n\t\t};\r\n\r\n\t\t// TODO some of this is duplicate code, also in defaultrenderlayer.js\r\n\t\tif (geometry.reused > 1 && this.geometryDataToReuse != null && this.geometryDataToReuse.has(geometry.id)) {\r\n\t\t\tgeometry.matrices.push(object.matrix);\r\n\t\t\tgeometry.objects.push(object);\r\n\r\n\t\t\tthis.viewer.stats.inc(\"Drawing\", \"Triangles to draw\", geometry.indices.length / 3);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar node = this.loaderToNode[loaderId];\r\n\t\t\r\n\t\tif (node.bufferManager == null) {\r\n\t\t\tif (this.settings.useObjectColors) {\r\n\t\t\t\tnode.bufferManager = new BufferManagerPerColor(this.viewer, this.viewer.settings, this, this.viewer.bufferSetPool);\r\n\t\t\t} else {\r\n\t\t\t\tnode.bufferManager = new BufferManagerTransparencyOnly(this.viewer, this.viewer.settings, this, this.viewer.bufferSetPool);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar buffer = node.bufferManager.getBufferSet(geometry.hasTransparency, geometry.color, sizes);\r\n\t\tbuffer.node = node;\r\n\t\t\r\n\t\tsuper.addGeometry(loaderId, geometry, object, buffer, sizes);\r\n\t}\r\n\t\r\n\tdump() {\r\n\t\tconsole.log(this.tileLoader.executor);\r\n\t}\r\n\r\n\tcreateObject(loaderId, roid, oid, objectId, geometryIds, matrix, normalMatrix, scaleMatrix, hasTransparency, type, aabb) {\r\n\t\tvar loader = this.getLoader(loaderId);\r\n\t\tvar node = this.loaderToNode[loaderId];\r\n\t\treturn super.createObject(loaderId, roid, oid, objectId, geometryIds, matrix, normalMatrix, scaleMatrix, hasTransparency, type, aabb, node.gpuBufferManager, node);\r\n\t}\r\n\r\n\taddGeometryReusable(geometry, loader, gpuBufferManager) {\r\n\t\tsuper.addGeometryReusable(geometry, loader, gpuBufferManager);\r\n\t\tvar node = this.loaderToNode[loader.loaderId];\r\n\t\tnode.stats.triangles += ((geometry.indices.length / 3) * (geometry.matrices.length));\r\n\t\tnode.stats.drawCallsPerFrame++;\r\n\t\t\r\n\t\tthis.viewer.stats.inc(\"Drawing\", \"Draw calls per frame (L2)\");\r\n\t}\r\n\r\n\tdone(loaderId) {\r\n\t\tvar loader = this.getLoader(loaderId);\r\n\t\tvar node = this.loaderToNode[loaderId];\r\n\t\t\r\n\t\t// When a new tile has been loaded and the viewer is not moving, we need to force an update of the culling of the node\r\n\t\tif (this.cull(node)) {\r\n\t\t\tnode.visibilityStatus = 0;\r\n\t\t} else {\r\n\t\t\tnode.visibilityStatus = 1;\r\n\t\t}\r\n\t\t\r\n\t\tfor (var geometry of loader.geometries.values()) {\r\n\t\t\tif (geometry.isReused) {\r\n\t\t\t\tthis.addGeometryReusable(geometry, loader, node.gpuBufferManager);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar bufferManager = node.bufferManager;\r\n\t\tif (bufferManager != null) {\r\n\t\t\tfor (var buffer of bufferManager.getAllBuffers()) {\r\n\t\t\t\tthis.flushBuffer(buffer);\r\n\t\t\t}\r\n\t\t\tbufferManager.clear();\r\n\t\t\tnode.bufferManager = null;\r\n\t\t}\r\n\r\n\t\tfor (var object of loader.objects.values()) {\r\n\t\t\tobject.add = null;\r\n\t\t}\r\n\r\n\t\tif (this.settings.autoCombineGpuBuffers) {\r\n\t\t\tvar savedBuffers = node.gpuBufferManager.combineBuffers();\r\n\t\t\tthis.viewer.stats.dec(\"Drawing\", \"Draw calls per frame (L2)\", savedBuffers);\r\n\t\t\tthis.viewer.stats.dec(\"Buffers\", \"Buffer groups\", savedBuffers);\r\n\t\t\tnode.stats.drawCallsPerFrame -= savedBuffers;\r\n\t\t}\r\n\r\n\t\tthis.viewer.dirty = true;\r\n\t\t\r\n\t\tthis.removeLoader(loaderId);\r\n\t}\r\n\r\n\tflushAllBuffers() {\r\n\t\tthis.octree.traverse((node) => {\r\n\t\t\tvar bufferManager = node.bufferManager;\r\n\t\t\tif (bufferManager != null) {\r\n\t\t\t\tfor (var buffer of bufferManager.getAllBuffers()) {\r\n\t\t\t\t\tthis.flushBuffer(buffer);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.settings.useObjectColors) {\r\n\t\t\t\t\t// When using object colors, it makes sense to sort the buffers by color, so we can potentially skip a few uniform binds\r\n\t\t\t\t\t// It might be beneficiary to do this sorting on-the-lfy and not just when everything is loaded\r\n\r\n\t\t\t\t\t// TODO disabled for now since we are testing combining buffer, which makes this obsolete\r\n//\t\t\t\t\tthis.sortBuffers(node.liveBuffers);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, false);\r\n\t}\r\n\r\n\trenderSelectionOutlines(ids, width) {\r\n\t\tfor (var oid of ids) {\r\n\t\t\t// TODO this is already much more efficient than iterating over all octree nodes, but can be made more efficient for large selections by first \r\n\t\t\t// organizing the oid's per node\r\n\t\t\tvar viewObject = this.viewer.getViewObject(oid);\r\n\t\t\tsuper.renderSelectionOutlines(ids, width, viewObject.node);\r\n\t\t}\r\n\t}\r\n\t\r\n\taddCompleteBuffer(buffer, gpuBufferManager) {\r\n\t\tvar newBuffer = super.addCompleteBuffer(buffer, gpuBufferManager);\r\n\t\t\r\n\t\tvar node = this.loaderToNode[buffer.loaderId];\r\n\t\tnode.stats.triangles += buffer.nrIndices / 3;\r\n\t\tnode.stats.drawCallsPerFrame++;\r\n\t\t\r\n\t\treturn newBuffer;\r\n\t}\r\n\t\r\n\tflushBuffer(buffer) {\r\n\t\tvar node = buffer.node;\r\n\t\tlet gpuBuffer = super.flushBuffer(buffer, node.gpuBufferManager);\r\n\r\n\t\tif (gpuBuffer == null) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tgpuBuffer.node = node;\r\n\r\n\t\tnode.stats.triangles += buffer.nrIndices / 3;\r\n\t\tnode.stats.drawCallsPerFrame++;\r\n\r\n\t\tif (node.bufferManager) {\r\n\t\t\tnode.bufferManager.resetBuffer(buffer);\r\n\t\t}\r\n\t\tthis.viewer.dirty = true;\r\n\r\n\t\treturn gpuBuffer;\r\n\t}\r\n\r\n\tcompletelyDone() {\r\n\t\tthis.flushAllBuffers();\r\n\t\tthis.viewer.dirty = true;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/tilingrenderlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 909,
    "kind": "class",
    "name": "TilingRenderLayer",
    "memberof": "viewer/tilingrenderlayer.js",
    "static": true,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/tilingrenderlayer.js",
    "importStyle": "{TilingRenderLayer}",
    "description": "A specific type of RenderLayer, which uses Tiling to achieve better render performance, but also minimizes the amount of data that needs to be loaded of the line.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "viewer/renderlayer.js~RenderLayer"
    ]
  },
  {
    "__docId__": 910,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 911,
    "kind": "member",
    "name": "octree",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#octree",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 912,
    "kind": "member",
    "name": "lineBoxGeometry",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#lineBoxGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 913,
    "kind": "member",
    "name": "loaderToNode",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#loaderToNode",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 914,
    "kind": "member",
    "name": "drawTileBorders",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#drawTileBorders",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 915,
    "kind": "member",
    "name": "_frustum",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#_frustum",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 916,
    "kind": "member",
    "name": "enabled",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#enabled",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 917,
    "kind": "member",
    "name": "show",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#show",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 918,
    "kind": "member",
    "name": "initialLoad",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#initialLoad",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 919,
    "kind": "method",
    "name": "showAll",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#showAll",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 921,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#load",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "bimServerApi",
        "types": [
          "*"
        ]
      },
      {
        "name": "densityThreshold",
        "types": [
          "*"
        ]
      },
      {
        "name": "roids",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldsToInclude",
        "types": [
          "*"
        ]
      },
      {
        "name": "progressListener",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 922,
    "kind": "member",
    "name": "tileLoader",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#tileLoader",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 923,
    "kind": "member",
    "name": "reuseLoader",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#reuseLoader",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 925,
    "kind": "member",
    "name": "lastViewMatrix",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#lastViewMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 926,
    "kind": "method",
    "name": "cull",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#cull",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 927,
    "kind": "method",
    "name": "prepareRender",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#prepareRender",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 929,
    "kind": "method",
    "name": "renderBuffers",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#renderBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "transparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "reuse",
        "types": [
          "*"
        ]
      },
      {
        "name": "visibleElements",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 930,
    "kind": "method",
    "name": "renderTileBorders",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#renderTileBorders",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 931,
    "kind": "method",
    "name": "addGeometry",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#addGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 932,
    "kind": "method",
    "name": "dump",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#dump",
    "access": "public",
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 933,
    "kind": "method",
    "name": "createObject",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#createObject",
    "access": "public",
    "description": null,
    "lineNumber": 286,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      },
      {
        "name": "roid",
        "types": [
          "*"
        ]
      },
      {
        "name": "oid",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometryIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "normalMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaleMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTransparency",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "aabb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 934,
    "kind": "method",
    "name": "addGeometryReusable",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#addGeometryReusable",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      },
      {
        "name": "loader",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 935,
    "kind": "method",
    "name": "done",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#done",
    "access": "public",
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "params": [
      {
        "name": "loaderId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 936,
    "kind": "method",
    "name": "flushAllBuffers",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#flushAllBuffers",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 937,
    "kind": "method",
    "name": "renderSelectionOutlines",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#renderSelectionOutlines",
    "access": "public",
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "width",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 938,
    "kind": "method",
    "name": "addCompleteBuffer",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#addCompleteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 370,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "gpuBufferManager",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 939,
    "kind": "method",
    "name": "flushBuffer",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#flushBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 940,
    "kind": "method",
    "name": "completelyDone",
    "memberof": "viewer/tilingrenderlayer.js~TilingRenderLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/tilingrenderlayer.js~TilingRenderLayer#completelyDone",
    "access": "public",
    "description": null,
    "lineNumber": 400,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 941,
    "kind": "file",
    "name": "viewer/treemodel.js",
    "content": "/**\r\n * Basic tree model, used for the ProjectTree at the moment\r\n */\r\nclass TreeNode {\r\n\tconstructor(view) {\r\n\t\tthis.children = [];\r\n\t\tthis.view = view;\r\n\t\tthis.expanded = false;\r\n\t}\r\n\t\r\n\tadd(label) {\r\n\t\tvar newNode = new TreeNode(this.view);\r\n\t\tnewNode.label = label;\r\n\t\tnewNode.parent = this;\r\n\t\tthis.children.push(newNode);\r\n\t\tif (this.children.length == 1) {\r\n\t\t\tif (!(this instanceof TreeModel)) {\r\n\t\t\t\tthis.view.collapsed(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn newNode;\r\n\t}\r\n\t\r\n\tshow() {\r\n\t\tthis.view.show(this);\r\n\t}\r\n\t\r\n\ttoggle() {\r\n\t\tif (this.children.length > 0) {\r\n\t\t\tthis.expanded = !this.expanded;\r\n\t\t\tif (this.expanded) {\r\n\t\t\t\tthis.view.expanded(this);\r\n\t\t\t} else {\r\n\t\t\t\tthis.view.collapsed(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tclick(clickFn) {\r\n\t\tif (clickFn != null) {\r\n\t\t\tthis.clickFn = clickFn;\r\n\t\t} else {\r\n\t\t\tif (this.clickFn != null) {\r\n\t\t\t\tthis.clickFn(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class TreeModel extends TreeNode {\r\n\tconstructor(view) {\r\n\t\tsuper(view);\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/treemodel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 942,
    "kind": "class",
    "name": "TreeNode",
    "memberof": "viewer/treemodel.js",
    "static": true,
    "longname": "viewer/treemodel.js~TreeNode",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/treemodel.js",
    "importStyle": null,
    "description": "Basic tree model, used for the ProjectTree at the moment",
    "lineNumber": 4,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 943,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/treemodel.js~TreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treemodel.js~TreeNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 944,
    "kind": "member",
    "name": "children",
    "memberof": "viewer/treemodel.js~TreeNode",
    "static": false,
    "longname": "viewer/treemodel.js~TreeNode#children",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 945,
    "kind": "member",
    "name": "view",
    "memberof": "viewer/treemodel.js~TreeNode",
    "static": false,
    "longname": "viewer/treemodel.js~TreeNode#view",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 946,
    "kind": "member",
    "name": "expanded",
    "memberof": "viewer/treemodel.js~TreeNode",
    "static": false,
    "longname": "viewer/treemodel.js~TreeNode#expanded",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 947,
    "kind": "method",
    "name": "add",
    "memberof": "viewer/treemodel.js~TreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treemodel.js~TreeNode#add",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "label",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 948,
    "kind": "method",
    "name": "show",
    "memberof": "viewer/treemodel.js~TreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treemodel.js~TreeNode#show",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 949,
    "kind": "method",
    "name": "toggle",
    "memberof": "viewer/treemodel.js~TreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treemodel.js~TreeNode#toggle",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 951,
    "kind": "method",
    "name": "click",
    "memberof": "viewer/treemodel.js~TreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treemodel.js~TreeNode#click",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "clickFn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 952,
    "kind": "member",
    "name": "clickFn",
    "memberof": "viewer/treemodel.js~TreeNode",
    "static": false,
    "longname": "viewer/treemodel.js~TreeNode#clickFn",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 953,
    "kind": "class",
    "name": "TreeModel",
    "memberof": "viewer/treemodel.js",
    "static": true,
    "longname": "viewer/treemodel.js~TreeModel",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/treemodel.js",
    "importStyle": "{TreeModel}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "interface": false,
    "extends": [
      "TreeNode"
    ]
  },
  {
    "__docId__": 954,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/treemodel.js~TreeModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treemodel.js~TreeModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true
  },
  {
    "__docId__": 955,
    "kind": "file",
    "name": "viewer/treeview.js",
    "content": "/**\r\n * A basic tree view. Used for the ProjectTree at the moment.\r\n */\r\nexport class TreeView {\r\n\tconstructor(rootElement) {\r\n\t\tthis.rootElement = rootElement;\r\n\t}\r\n\t\r\n\tshow(node) {\r\n\t\tvar projectNode = document.createElement(\"div\");\r\n\t\t\r\n\t\tvar subDiv = document.createElement(\"div\");\r\n\t\tnode.img = document.createElement(\"img\");\r\n\t\tnode.img.classList.add(\"arrow\");\r\n\t\tnode.img.addEventListener(\"click\", (event) => {\r\n\t\t\tnode.toggle();\r\n\t\t});\r\n\t\tprojectNode.appendChild(node.img);\r\n\t\t\r\n\t\tnode.element = projectNode;\r\n\t\tvar a = document.createElement(\"a\");\r\n\t\tprojectNode.appendChild(a);\r\n\t\ta.addEventListener(\"click\", (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tnode.click();\r\n\t\t})\r\n\t\ta.innerHTML = node.label;\r\n\t\tif (node.parent == null) {\r\n\t\t\tthis.rootElement.appendChild(projectNode);\r\n\t\t} else {\r\n\t\t\tnode.parent.subDiv.appendChild(projectNode);\r\n\t\t}\r\n\t\t\r\n\t\tsubDiv.style[\"margin-left\"] = \"20px\";\r\n\t\tprojectNode.appendChild(subDiv);\r\n\t\tnode.subDiv = subDiv;\r\n\t\tnode.subDiv.hidden = true;\r\n\t}\r\n\t\r\n\texpanded(node) {\r\n\t\tnode.img.classList.remove(\"arrowclosed\");\r\n\t\tnode.img.classList.add(\"arrowopen\");\r\n\t\tnode.subDiv.hidden = false;\r\n\t}\r\n\t\r\n\tcollapsed(node) {\r\n\t\tnode.img.classList.remove(\"arrowopen\");\r\n\t\tnode.img.classList.add(\"arrowclosed\");\r\n\t\tnode.subDiv.hidden = true;\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/treeview.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 956,
    "kind": "class",
    "name": "TreeView",
    "memberof": "viewer/treeview.js",
    "static": true,
    "longname": "viewer/treeview.js~TreeView",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/treeview.js",
    "importStyle": "{TreeView}",
    "description": "A basic tree view. Used for the ProjectTree at the moment.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 957,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/treeview.js~TreeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treeview.js~TreeView#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 958,
    "kind": "member",
    "name": "rootElement",
    "memberof": "viewer/treeview.js~TreeView",
    "static": false,
    "longname": "viewer/treeview.js~TreeView#rootElement",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 959,
    "kind": "method",
    "name": "show",
    "memberof": "viewer/treeview.js~TreeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treeview.js~TreeView#show",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 960,
    "kind": "method",
    "name": "expanded",
    "memberof": "viewer/treeview.js~TreeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treeview.js~TreeView#expanded",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 961,
    "kind": "method",
    "name": "collapsed",
    "memberof": "viewer/treeview.js~TreeView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/treeview.js~TreeView#collapsed",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 962,
    "kind": "file",
    "name": "viewer/utils.js",
    "content": "const glTypeToTypedArrayMap = new Map([\r\n\t[WebGL2RenderingContext.BYTE, Int8Array],\r\n\t[WebGL2RenderingContext.SHORT, Int16Array],\r\n\t[WebGL2RenderingContext.INT, Int32Array],\r\n\t[WebGL2RenderingContext.UNSIGNED_BYTE, Uint8Array],\r\n\t[WebGL2RenderingContext.UNSIGNED_SHORT, Uint16Array],\r\n\t[WebGL2RenderingContext.UNSIGNED_INT, Uint32Array],\r\n\t[WebGL2RenderingContext.FLOAT, Float32Array]\r\n]);\r\n\r\nconst typedArrayToGlTypeMap = new Map([\r\n\t[\"Int8Array\", WebGL2RenderingContext.BYTE],\r\n\t[\"Int16Array\", WebGL2RenderingContext.SHORT],\r\n\t[\"Int32Array\", WebGL2RenderingContext.INT],\r\n\t[\"Uint8Array\", WebGL2RenderingContext.UNSIGNED_BYTE],\r\n\t[\"Uint16Array\", WebGL2RenderingContext.UNSIGNED_SHORT],\r\n\t[\"Uint32Array\", WebGL2RenderingContext.UNSIGNED_INT],\r\n\t[\"Float32Array\", WebGL2RenderingContext.FLOAT]\r\n]);\r\n\r\n/**\r\n * Generic utils\r\n *\r\n * @export\r\n * @class Utils\r\n */\r\nexport class Utils {\r\n\tstatic hash(input) {\r\n\t\t  var hash = 0, i, chr;\r\n\t\t  if (input.length === 0) return hash;\r\n\t\t  for (i = 0; i < input.length; i++) {\r\n\t\t    chr   = input.charCodeAt(i);\r\n\t\t    hash  = ((hash << 5) - hash) + chr;\r\n\t\t    hash |= 0; // Convert to 32bit integer\r\n\t\t  }\r\n\t\t  return hash;\r\n\t}\r\n\r\n\tstatic typedArrayToGlType(typedArrayType) {\r\n\t\treturn typedArrayToGlTypeMap.get(typedArrayType);\r\n\t}\r\n\r\n\tstatic glTypeToTypedArray(glType) {\r\n\t\treturn glTypeToTypedArrayMap.get(glType)\r\n\t}\r\n\t\r\n\t/**\r\n\t * Converts the given 4x4 mat4 to an array\r\n\t */\r\n\tstatic toArray(matrix) {\r\n\t\tvar result = new Array(16);\r\n\t\tfor (var i=0; i<16; i++) {\r\n\t\t\tresult[i] = matrix[i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new GPU buffer, keep in mind that some extra attributes are being set on the returned GLBuffer object\r\n\t */\r\n\tstatic createBuffer(gl, data, numElements, bufferType, components, srcStart, attribType, js_type) {\r\n\t\t// numElements -> Number of typed elements\r\n\t\tnumElements = numElements || data.length;\r\n\t\tbufferType = bufferType || gl.ARRAY_BUFFER;\r\n\t\tcomponents = components || 3;\r\n\t\tsrcStart = srcStart || 0;\r\n\r\n\t\tconst b = gl.createBuffer();\r\n\t\tgl.bindBuffer(bufferType, b);\r\n\t\tvar js_type = js_type ? js_type : data.constructor.name;\r\n\t\tconst byteCount = numElements * window[js_type].BYTES_PER_ELEMENT;\r\n\t\t\r\n\t\tgl.bufferData(bufferType, data, gl.STATIC_DRAW, srcStart, numElements);\r\n\t\t\r\n\t\tb.byteSize = byteCount;\r\n\t\tb.N = numElements;\r\n\t\tb.gl_type = bufferType;\r\n\t\tb.js_type = js_type;\r\n\t\tb.attrib_type = attribType ? attribType : Utils.typedArrayToGlType(b.js_type);\r\n\t\tb.components = components;\r\n\t\tb.normalize = false;\r\n\t\tb.stride = 0;\r\n\t\tb.offset = 0;\r\n\t\treturn b;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new GPU empty buffer, keep in mind that some extra attributes are being set on the returned GLBuffer object.\r\n\t * This method is usually used in order to create buffers that will be later be filled by calls to bufferSubData (via Utils.updateBuffer)\r\n\t */\r\n\tstatic createEmptyBuffer(gl, numElements, bufferType, components, attribType, js_type) {\r\n\t\tconst nrBytesRequired = numElements * window[js_type].BYTES_PER_ELEMENT;\r\n\r\n\t\tbufferType = bufferType || gl.ARRAY_BUFFER;\r\n\t\tcomponents = components || 3;\r\n\r\n\t\tconst b = gl.createBuffer();\r\n\t\tgl.bindBuffer(bufferType, b);\r\n\t\tvar js_type = js_type ? js_type : zeroDataView.constructor.name;\r\n\t\tconst byteCount = numElements * window[js_type].BYTES_PER_ELEMENT;\r\n\t\t\r\n\t\t// Read the WebGL documentation carefully on this, the interpretation of the size argument depends on the type of \"data\"\r\n\t\tgl.bufferData(bufferType, byteCount, gl.STATIC_DRAW);\r\n\t\t\r\n\t\tb.byteSize = byteCount;\r\n\t\tb.N = numElements;\r\n\t\tb.gl_type = bufferType;\r\n\t\tb.js_type = js_type;\r\n\t\tb.attrib_type = attribType ? attribType : Utils.typedArrayToGlType(b.js_type);\r\n\t\tb.components = components;\r\n\t\tb.normalize = false;\r\n\t\tb.stride = 0;\r\n\t\tb.offset = 0;\r\n\t\tb.writePosition = 0;\r\n\t\t\r\n\t\treturn b;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Update a GPU buffer\r\n\t */\t\r\n\tstatic updateBuffer(gl, targetGlBuffer, data, pos, numElements) {\r\n\t\tgl.bindBuffer(targetGlBuffer.gl_type, targetGlBuffer);\r\n\t\tconst byteCount = numElements * window[targetGlBuffer.js_type].BYTES_PER_ELEMENT;\r\n\t\t\r\n\t\t// Read the WebGL documentation carefully on this, the interpretation of the size argument depends on the type of \"data\"\r\n\t\tlet size = numElements; // Ok for non-typed arrays\r\n\t\tif (data.constructor.name == \"DataView\") {\r\n\t\t\tsize = byteCount;\r\n\t\t}\r\n\t\t\r\n\t\tgl.bufferSubData(targetGlBuffer.gl_type, targetGlBuffer.writePosition, data, pos, size);\r\n\t\ttargetGlBuffer.writePosition += byteCount;\r\n\t}\r\n\t\r\n\tstatic createIndexBuffer(gl, data, n) {\r\n\t\treturn Utils.createBuffer(gl, data, n, gl.ELEMENT_ARRAY_BUFFER);\r\n\t}\r\n\r\n\tstatic unionAabb(a, b) {\r\n\t\tlet r = new Float32Array(6);\r\n\t\tfor (let i = 0; i < 6; ++i) {\r\n\t\t\tlet fn = i < 3 ? Math.min : Math.max;\r\n\t\t\tr[i] = fn(a[i], b[i]);\r\n\t\t}\r\n\t\treturn r;\r\n\t}\r\n\r\n\tstatic emptyAabb() {\r\n\t\tlet i = Infinity;\r\n\t\treturn new Float32Array([i,i,i,-i,-i,-i]);\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 963,
    "kind": "variable",
    "name": "glTypeToTypedArrayMap",
    "memberof": "viewer/utils.js",
    "static": true,
    "longname": "viewer/utils.js~glTypeToTypedArrayMap",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 964,
    "kind": "variable",
    "name": "typedArrayToGlTypeMap",
    "memberof": "viewer/utils.js",
    "static": true,
    "longname": "viewer/utils.js~typedArrayToGlTypeMap",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 965,
    "kind": "class",
    "name": "Utils",
    "memberof": "viewer/utils.js",
    "static": true,
    "longname": "viewer/utils.js~Utils",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/utils.js",
    "importStyle": "{Utils}",
    "description": "Generic utils",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Utils"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 966,
    "kind": "method",
    "name": "hash",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.hash",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 967,
    "kind": "method",
    "name": "typedArrayToGlType",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.typedArrayToGlType",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "typedArrayType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 968,
    "kind": "method",
    "name": "glTypeToTypedArray",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.glTypeToTypedArray",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "glType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 969,
    "kind": "method",
    "name": "toArray",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.toArray",
    "access": "public",
    "description": "Converts the given 4x4 mat4 to an array",
    "lineNumber": 50,
    "params": [
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 970,
    "kind": "method",
    "name": "createBuffer",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.createBuffer",
    "access": "public",
    "description": "Create a new GPU buffer, keep in mind that some extra attributes are being set on the returned GLBuffer object",
    "lineNumber": 61,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "numElements",
        "types": [
          "*"
        ]
      },
      {
        "name": "bufferType",
        "types": [
          "*"
        ]
      },
      {
        "name": "components",
        "types": [
          "*"
        ]
      },
      {
        "name": "srcStart",
        "types": [
          "*"
        ]
      },
      {
        "name": "attribType",
        "types": [
          "*"
        ]
      },
      {
        "name": "js_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 971,
    "kind": "method",
    "name": "createEmptyBuffer",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.createEmptyBuffer",
    "access": "public",
    "description": "Create a new GPU empty buffer, keep in mind that some extra attributes are being set on the returned GLBuffer object.\nThis method is usually used in order to create buffers that will be later be filled by calls to bufferSubData (via Utils.updateBuffer)",
    "lineNumber": 91,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "numElements",
        "types": [
          "*"
        ]
      },
      {
        "name": "bufferType",
        "types": [
          "*"
        ]
      },
      {
        "name": "components",
        "types": [
          "*"
        ]
      },
      {
        "name": "attribType",
        "types": [
          "*"
        ]
      },
      {
        "name": "js_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 972,
    "kind": "method",
    "name": "updateBuffer",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.updateBuffer",
    "access": "public",
    "description": "Update a GPU buffer",
    "lineNumber": 122,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetGlBuffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "pos",
        "types": [
          "*"
        ]
      },
      {
        "name": "numElements",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 973,
    "kind": "method",
    "name": "createIndexBuffer",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.createIndexBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 974,
    "kind": "method",
    "name": "unionAabb",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.unionAabb",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 975,
    "kind": "method",
    "name": "emptyAabb",
    "memberof": "viewer/utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/utils.js~Utils.emptyAabb",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 976,
    "kind": "file",
    "name": "viewer/vertexquantization.js",
    "content": "import {Utils} from './utils.js'\r\n\r\n/**\r\n * This class is responsible for keeping track of the various matrices used for quantization/unquantization\r\n * \r\n * croid stands for: ConcreteRevision Object Identifier, it's a BIMserver object, you can see it as a unique identifier that identifies a revision.\r\n */\r\nexport class VertexQuantization {\r\n\tconstructor(settings) {\r\n\t\tthis.settings = settings;\r\n\t\t\r\n\t\t// croid -> untransformed quantization matrices (1 per model)\r\n\t\tthis.untransformedQuantizationMatrices = new Map();\r\n\r\n\t\t// croid -> untransformed inverse quantization matrices (1 per model)\r\n\t\tthis.untransformedInverseQuantizationMatrices = new Map();\r\n\t}\r\n\r\n\tgetUntransformedInverseVertexQuantizationMatrixForCroid(croid) {\r\n\t\tvar matrix = this.untransformedInverseQuantizationMatrices.get(croid);\r\n\t\tif (matrix == null) {\r\n\t\t\tthrow \"Not found for croid \" + croid;\r\n\t\t}\r\n\t\treturn matrix;\r\n\t}\r\n\t\r\n\tgetUntransformedVertexQuantizationMatrixForCroid(croid) {\r\n\t\tvar matrix = this.untransformedQuantizationMatrices.get(croid);\r\n\t\tif (matrix == null) {\r\n\t\t\tthrow \"Not found: \" + roid;\r\n\t\t}\r\n\t\treturn matrix;\r\n\t}\r\n\t\r\n\tgetTransformedVertexQuantizationMatrix() {\r\n\t\tif (this.vertexQuantizationMatrix == null) {\r\n\t\t\tthrow \"Not found: vertexQuantizationMatrix\";\r\n\t\t}\r\n\t\treturn this.vertexQuantizationMatrix;\r\n\t}\r\n\r\n\tgetUntransformedVertexQuantizationMatrix() {\r\n\t\tif (this.untransformedVertexQuantizationMatrix == null) {\r\n\t\t\tthrow \"Not found: untransformedVertexQuantizationMatrix\";\r\n\t\t}\r\n\t\treturn this.vertexQuantizationMatrix;\r\n\t}\r\n\r\n\tgetTransformedInverseVertexQuantizationMatrix() {\r\n\t\tif (this.inverseVertexQuantizationMatrix == null) {\r\n\t\t\tthrow \"Not found: inverseVertexQuantizationMatrix\";\r\n\t\t}\r\n\t\treturn this.inverseVertexQuantizationMatrix;\r\n\t}\r\n\t\r\n\tgenerateUntransformedMatrices(croid, boundsUntransformed) {\r\n\t\tvar matrix = mat4.create();\r\n\t\tvar scale = 32768;\r\n\t\t\r\n\t\t// Scale the model to make sure all values fit within a 2-byte signed short\r\n\t\tmat4.scale(matrix, matrix, vec3.fromValues(\r\n\t\t\t\tscale / (boundsUntransformed.max.x - boundsUntransformed.min.x),\r\n\t\t\t\tscale / (boundsUntransformed.max.y - boundsUntransformed.min.y),\r\n\t\t\t\tscale / (boundsUntransformed.max.z - boundsUntransformed.min.z)\r\n\t\t));\r\n\r\n\t\t// Move the model with its center to the origin\r\n\t\tmat4.translate(matrix, matrix, vec3.fromValues(\r\n\t\t\t\t-(boundsUntransformed.max.x + boundsUntransformed.min.x) / 2,\r\n\t\t\t\t-(boundsUntransformed.max.y + boundsUntransformed.min.y) / 2,\r\n\t\t\t\t-(boundsUntransformed.max.z + boundsUntransformed.min.z) / 2\r\n\t\t));\r\n\t\t\r\n\t\t// Store the untransformed quantization matrix\r\n\t\tthis.untransformedQuantizationMatrices.set(croid, Utils.toArray(matrix));\r\n\t\t\r\n\t\tvar inverse = mat4.create();\r\n\t\tmat4.invert(inverse, matrix);\r\n\t\t\r\n\t\t// Store the untransformed inverse quantization matrix\r\n\t\tthis.untransformedInverseQuantizationMatrices.set(croid, Utils.toArray(inverse));\r\n\t}\r\n\t\r\n\tgetTransformedQuantizationMatrix(boundsUntransformed) {\r\n\t\tvar matrix = mat4.create();\r\n\t\tvar scale = 32768;\r\n\t\t\r\n\t\t// Scale the model to make sure all values fit within a 2-byte signed short\r\n\t\tmat4.scale(matrix, matrix, vec3.fromValues(\r\n\t\t\tscale / boundsUntransformed[3],\r\n\t\t\tscale / boundsUntransformed[4],\r\n\t\t\tscale / boundsUntransformed[5]\r\n\t\t));\r\n\t\t\r\n\t\t// Move the model with its center to the origin\r\n\t\tmat4.translate(matrix, matrix, vec3.fromValues(\r\n\t\t\t-(boundsUntransformed[3] / 2 + boundsUntransformed[0]),\r\n\t\t\t-(boundsUntransformed[4] / 2 + boundsUntransformed[1]),\r\n\t\t\t-(boundsUntransformed[5] / 2 + boundsUntransformed[2])\r\n\t\t));\r\n\r\n\t\treturn matrix;\r\n\t}\r\n\t\r\n\tgetTransformedInverseQuantizationMatrix(boundsUntransformed) {\r\n\t\tvar matrix = this.getTransformedQuantizationMatrix(boundsUntransformed);\r\n\t\tvar inverse = mat4.create();\r\n\t\tmat4.invert(inverse, matrix);\r\n\t\t\r\n\t\treturn inverse;\r\n\t}\r\n\t\r\n\tgenerateMatrix(bounds, globalTransformation) {\r\n\t\tvar matrix = mat4.create();\r\n\t\tvar scale = 32768;\r\n\t\t\r\n\t\tvar min = vec3.fromValues(bounds.min.x, bounds.min.y, bounds.min.z);\r\n\t\tvar max = vec3.fromValues(bounds.max.x, bounds.max.y, bounds.max.z);\r\n\t\t\r\n\t\tvec3.transformMat4(min, min, globalTransformation);\r\n\t\tvec3.transformMat4(max, max, globalTransformation);\r\n\t\t\r\n\t\t// Scale the model to make sure all values fit within a 2-byte signed short\r\n\t\tmat4.scale(matrix, matrix, vec3.fromValues(\r\n\t\t\t\tscale / (max[0] - min[0]),\r\n\t\t\t\tscale / (max[1] - min[1]),\r\n\t\t\t\tscale / (max[2] - min[2])\r\n\t\t));\r\n\r\n\t\t// Move the model with its center to the origin\r\n\t\tmat4.translate(matrix, matrix, vec3.fromValues(\r\n\t\t\t\t-(max[0] + min[0]) / 2,\r\n\t\t\t\t-(max[1] + min[1]) / 2,\r\n\t\t\t\t-(max[2] + min[2]) / 2\r\n\t\t));\r\n\r\n\t\treturn matrix;\r\n\t}\r\n\t\r\n\tgenerateMatrices(totalBounds, totalBoundsUntransformed, globalTransformation) {\r\n\t\tvar matrix = this.generateMatrix(totalBounds, mat4.create());\r\n\t\tvar matrixWithGlobalTransformation = this.generateMatrix(totalBounds, globalTransformation);\r\n\t\t\r\n\t\tthis.vertexQuantizationMatrix = Utils.toArray(matrix);\r\n\t\tthis.vertexQuantizationMatrixWithGlobalTransformation = Utils.toArray(matrixWithGlobalTransformation);\r\n\r\n\t\tvar inverse = mat4.create();\r\n\t\tmat4.invert(inverse, matrix);\r\n\t\tthis.inverseVertexQuantizationMatrix = Utils.toArray(inverse);\r\n\r\n\t\tvar inverse = mat4.create();\r\n\t\tmat4.invert(inverse, matrixWithGlobalTransformation);\r\n\t\tthis.inverseVertexQuantizationMatrixWithGlobalTransformation = Utils.toArray(inverse);\r\n\r\n\t\tvar matrix = this.generateMatrix(totalBoundsUntransformed, mat4.create());\r\n\t\tthis.untransformedVertexQuantizationMatrix = Utils.toArray(matrix);\r\n\t}\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/vertexquantization.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 977,
    "kind": "class",
    "name": "VertexQuantization",
    "memberof": "viewer/vertexquantization.js",
    "static": true,
    "longname": "viewer/vertexquantization.js~VertexQuantization",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/vertexquantization.js",
    "importStyle": "{VertexQuantization}",
    "description": "This class is responsible for keeping track of the various matrices used for quantization/unquantization\n\ncroid stands for: ConcreteRevision Object Identifier, it's a BIMserver object, you can see it as a unique identifier that identifies a revision.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 978,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 979,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#settings",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 980,
    "kind": "member",
    "name": "untransformedQuantizationMatrices",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#untransformedQuantizationMatrices",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 981,
    "kind": "member",
    "name": "untransformedInverseQuantizationMatrices",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#untransformedInverseQuantizationMatrices",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 982,
    "kind": "method",
    "name": "getUntransformedInverseVertexQuantizationMatrixForCroid",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#getUntransformedInverseVertexQuantizationMatrixForCroid",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "croid",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 983,
    "kind": "method",
    "name": "getUntransformedVertexQuantizationMatrixForCroid",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#getUntransformedVertexQuantizationMatrixForCroid",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "croid",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 984,
    "kind": "method",
    "name": "getTransformedVertexQuantizationMatrix",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#getTransformedVertexQuantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 985,
    "kind": "method",
    "name": "getUntransformedVertexQuantizationMatrix",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#getUntransformedVertexQuantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 986,
    "kind": "method",
    "name": "getTransformedInverseVertexQuantizationMatrix",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#getTransformedInverseVertexQuantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 987,
    "kind": "method",
    "name": "generateUntransformedMatrices",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#generateUntransformedMatrices",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "croid",
        "types": [
          "*"
        ]
      },
      {
        "name": "boundsUntransformed",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 988,
    "kind": "method",
    "name": "getTransformedQuantizationMatrix",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#getTransformedQuantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "boundsUntransformed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 989,
    "kind": "method",
    "name": "getTransformedInverseQuantizationMatrix",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#getTransformedInverseQuantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "boundsUntransformed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 990,
    "kind": "method",
    "name": "generateMatrix",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#generateMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "bounds",
        "types": [
          "*"
        ]
      },
      {
        "name": "globalTransformation",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 991,
    "kind": "method",
    "name": "generateMatrices",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#generateMatrices",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "totalBounds",
        "types": [
          "*"
        ]
      },
      {
        "name": "totalBoundsUntransformed",
        "types": [
          "*"
        ]
      },
      {
        "name": "globalTransformation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 992,
    "kind": "member",
    "name": "vertexQuantizationMatrix",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#vertexQuantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 993,
    "kind": "member",
    "name": "vertexQuantizationMatrixWithGlobalTransformation",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#vertexQuantizationMatrixWithGlobalTransformation",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 994,
    "kind": "member",
    "name": "inverseVertexQuantizationMatrix",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#inverseVertexQuantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 995,
    "kind": "member",
    "name": "inverseVertexQuantizationMatrixWithGlobalTransformation",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#inverseVertexQuantizationMatrixWithGlobalTransformation",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 996,
    "kind": "member",
    "name": "untransformedVertexQuantizationMatrix",
    "memberof": "viewer/vertexquantization.js~VertexQuantization",
    "static": false,
    "longname": "viewer/vertexquantization.js~VertexQuantization#untransformedVertexQuantizationMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 997,
    "kind": "file",
    "name": "viewer/viewer.js",
    "content": "import {ProgramManager} from './programmanager.js'\r\nimport {Lighting} from './lighting.js'\r\nimport {BufferSetPool} from './buffersetpool.js'\r\nimport {Camera} from './camera.js'\r\nimport {CameraControl} from './cameracontrol.js'\r\nimport {RenderBuffer} from './renderbuffer.js'\r\nimport {SvgOverlay} from './svgoverlay.js'\r\nimport {FrozenBufferSet} from './frozenbufferset.js'\r\nimport {Utils} from './utils.js'\r\nimport {SSQuad} from './ssquad.js'\r\nimport {FreezableSet} from './freezableset.js';\r\n\r\nimport {COLOR_FLOAT_DEPTH_NORMAL, COLOR_ALPHA_DEPTH} from './renderbuffer.js';\r\nimport { WSQuad } from './wsquad.js';\r\n\r\nvar tmp_unproject = vec3.create();\r\n\r\n// When a change in color results in a different\r\n// transparency state, the objects needs to be hidden\r\n//} from the original buffer and recreate in a new buffer\r\n// to be rendered during the correct render pass. This\r\n// recreated object will have it's most significant bit\r\n// set to 1.\r\nconst OVERRIDE_FLAG = (1 << 31);\r\n\r\n/**\r\n *\r\n * Main viewer class, too many responsibilities:\r\n * - Keep track of width/height of viewport\r\n * - Keeps track of dirty scene\r\n * - Contains the basic render loop (and delegates to the render layers)\r\n *\r\n * @export\r\n * @class Viewer\r\n */\r\nexport class Viewer {\r\n\r\n    constructor(canvas, settings, stats, width, height) {\r\n        this.stats = stats;\r\n        this.settings = settings;\r\n        this.canvas = canvas;\r\n        this.camera = new Camera(this);\r\n        this.overlay = new SvgOverlay(this.canvas, this.camera);\r\n        \r\n        this.gl = this.canvas.getContext('webgl2', {stencil: true});\r\n\r\n        if (!this.gl) {\r\n            alert('Unable to initialize WebGL. Your browser or machine may not support it.');\r\n            return;\r\n        }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        if (!this.settings.loaderSettings.prepareBuffers) {\r\n        \tthis.bufferSetPool = new BufferSetPool(1000, this.stats);\r\n        }\r\n\r\n        this.pickIdCounter = 1;\r\n\r\n        this.sectionPlaneIsDisabled = true;\r\n\r\n        this.sectionPlaneValuesDisabled = new Float32Array(4);\r\n        this.sectionPlaneValuesDisabled.set([0,0,0,1]);\r\n\r\n        this.sectionPlaneValues = new Float32Array(4);\r\n        this.sectionPlaneValues2 = new Float32Array(4);\r\n        \r\n        this.sectionPlaneValues.set(this.sectionPlaneValuesDisabled);\r\n        // this.sectionPlaneValues.set([0,1,1,-5000]);\r\n        this.sectionPlaneValues2.set(this.sectionPlaneValues);\r\n\r\n        // Picking ID (unsigned int) -> ViewObject\r\n        // This is an array now since the picking ids form a continues array\r\n        this.pickIdToViewObject = [];\r\n        \r\n        this.renderLayers = [];\r\n        this.animationListeners = [];\r\n        this.colorRestore = [];\r\n        this.geometryIdToBufferSet = new Map();\r\n\r\n        // Object ID -> ViewObject\r\n        this.viewObjects = new Map();\r\n\r\n        // String -> ViewObject[]\r\n        this.viewObjectsByType = new Map();\r\n\r\n        // Null means everything visible, otherwise Set(..., ..., ...)\r\n        this.invisibleElements = new FreezableSet();\r\n\r\n        // Elements for which the color has been overriden and transparency has\r\n        // changed. These elements are hidden} from their original buffers and\r\n        // recreated in a new buffer during the correct render pass. When elements\r\n        // are unhidden, the overridden elements need to stay hidden.\r\n        this.hiddenDueToSetColor = new Map();\r\n        this.originalColors = new Map();\r\n\r\n        // For instances the logic is even different, as the element matrices\r\n        // are removed} from the buffer and added back to different (instanced)\r\n        // bufferset. When undoing colors on reused geometries, the product matrix\r\n        // simply needs to be added back to the original.\r\n        this.instancesWithChangedColor = new Map();\r\n\r\n        this.selectedElements = new FreezableSet();\r\n\r\n        this.useOrderIndependentTransparency = this.settings.realtimeSettings.orderIndependentTransparency;\r\n\r\n        var self = this;\r\n//        window._debugViewer = this;  // HACK for console debugging\r\n\r\n        document.addEventListener(\"keypress\", (evt) => {\r\n            if (evt.key === 'H') {\r\n                this.resetVisibility();\r\n            } else if (evt.key === 'h') {\r\n                this.setVisibility(this.selectedElements, false);\r\n                this.selectedElements.clear();\r\n            } else if (evt.key === 'C') {\r\n                this.resetColors();\r\n            } else if (evt.key === 'c' || evt.key === 'd') {\r\n                let R = Math.random;\r\n                let clr = [R(), R(), R(), evt.key === 'd' ? R() : 1.0];\r\n                this.setColor(this.selectedElements, clr);\r\n                this.selectedElements.clear();\r\n            } else {\r\n            \t// Don't do a drawScene for every key pressed\r\n            \treturn;\r\n            }\r\n            this.drawScene();\r\n        });\r\n    }\r\n\r\n    callByType(method, types, ...args) {\r\n        let elems = types.map((i) => this.viewObjectsByType.get(i) || [])\r\n            .reduce((a, b) => a.concat(b), [])\r\n            .map((o) => o.oid);\r\n        method.call(this, elems, ...args);\r\n    }\r\n\r\n    setVisibility(elems, visible) {\r\n        elems = Array.from(elems);\r\n        \r\n        let fn = (visible ? this.invisibleElements.delete : this.invisibleElements.add).bind(this.invisibleElements);\r\n        this.invisibleElements.batch(() => {\r\n        \r\n            elems.forEach((i) => {\r\n                fn(i);\r\n                // Show/hide transparently-adjusted counterpart (even though it might not exist)\r\n                fn(i | OVERRIDE_FLAG);\r\n            });\r\n\r\n            // Make sure elements hidden due to setColor() stay hidden\r\n            for (let i of this.hiddenDueToSetColor.keys()) {\r\n                this.invisibleElements.add(i);\r\n            };\r\n\r\n        });\r\n\r\n        this.dirty = true;\r\n    }\r\n\r\n    setSelectionState(elems, selected, clear) {\r\n        this.selectedElements.batch(() => {\r\n            if (clear) {\r\n                this.selectedElements.clear();\r\n            }\r\n\r\n            let fn = (selected ? this.selectedElements.add : this.selectedElements.delete).bind(this.selectedElements);\r\n            for (let e of elems) {\r\n                fn(e);\r\n            }\r\n        });\r\n\r\n        this.dirty = true;\r\n    }\r\n\r\n    getSelected() {\r\n        return Array.from(this.selectedElements)\r\n            .map(this.viewObjects.get.bind(this.viewObjects));\r\n    }\r\n\r\n    resetColor(elems) {\r\n        this.invisibleElements.batch(() => {\r\n            for (let objectId of elems) {\r\n                if (this.hiddenDueToSetColor.has(objectId)) {\r\n                    this.invisibleElements.delete(objectId);\r\n                    let buffer = this.hiddenDueToSetColor.get(objectId);\r\n                    buffer.manager.deleteBuffer(buffer);\r\n\r\n                    this.hiddenDueToSetColor.delete(objectId);\r\n                } else if (this.originalColors.has(objectId)) {\r\n                    this.geometryIdToBufferSet.get(objectId).forEach((bufferSet) => {\r\n                        bufferSet.setColor(this.gl, objectId, this.originalColors.get(objectId));\r\n                    });\r\n\r\n                    this.originalColors.delete(objectId);\r\n                } else if (this.instancesWithChangedColor.has(objectId)) {\r\n                    let entry = this.instancesWithChangedColor.get(objectId);\r\n                    entry.override.manager.deleteBuffer(entry.override);\r\n                    entry.original.setObjects(this.gl, entry.original.objects.concat([entry.object]));\r\n                    this.instancesWithChangedColor.delete(objectId);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    setColor(elems, clr) {\r\n        // Reset colors first to clear any potential transparency overrides.\r\n        this.resetColor(elems);\r\n        \r\n        for (let objectId of elems) {\r\n            this.geometryIdToBufferSet.get(objectId).forEach((bufferSet) => {\r\n                let originalColor = bufferSet.setColor(this.gl, objectId, clr);\r\n                if (originalColor === false) {\r\n                    let copiedBufferSet = bufferSet.copy(this.gl, objectId);\r\n                    let clrSameType, newClrBuffer;\r\n                    if (copiedBufferSet instanceof FrozenBufferSet) {\r\n                        clrSameType = new window[copiedBufferSet.colorBuffer.js_type](4);\r\n                        newClrBuffer = new window[copiedBufferSet.colorBuffer.js_type](copiedBufferSet.colorBuffer.N);\r\n                        copiedBufferSet.hasTransparency = clr[3] < 1.;\r\n                    } else {\r\n                        clrSameType = new copiedBufferSet.colors.constructor(4);\r\n                        newClrBuffer = copiedBufferSet.colors;\r\n                        copiedBufferSet.hasTransparency = !bufferSet.hasTransparency;\r\n                    }\r\n\r\n                    let factor = clrSameType.constructor.name === \"Uint8Array\" ? 255. : 1.;\r\n\r\n                    for (let i = 0; i < 4; ++i) {\r\n                        clrSameType[i] = clr[i] * factor;\r\n                    }\r\n\r\n                    for (let i = 0; i < newClrBuffer.length; i += 4) {\r\n                        newClrBuffer.set(clrSameType, i);\r\n                    }                     \r\n\r\n                    copiedBufferSet.node = bufferSet.node;\r\n\r\n                    let buffer;\r\n\r\n                    if (copiedBufferSet instanceof FrozenBufferSet) {\r\n            \t\t\tvar programInfo = this.programManager.getProgram(this.programManager.createKey(true, false));\r\n                        var pickProgramInfo = this.programManager.getProgram(this.programManager.createKey(true, true));\r\n\r\n                        copiedBufferSet.colorBuffer = Utils.createBuffer(this.gl, newClrBuffer, null, null, 4);\r\n\r\n                        let obj = bufferSet.objects.find(o => o.id === objectId);\r\n                        bufferSet.setObjects(this.gl, bufferSet.objects.filter(o => o.id !== objectId));\r\n                        copiedBufferSet.setObjects(this.gl, [obj]);\r\n\r\n                        copiedBufferSet.buildVao(this.gl, this.settings, programInfo, pickProgramInfo);\r\n                        copiedBufferSet.manager.pushBuffer(copiedBufferSet);\r\n                        buffer = copiedBufferSet;\r\n\r\n                        // NB: Single bufferset entry is assumed here, which is the case for now.\r\n                        this.geometryIdToBufferSet.get(objectId)[0] = buffer;\r\n\r\n                        this.instancesWithChangedColor.set(objectId, {\r\n                            object: obj,\r\n                            original: bufferSet, \r\n                            override: copiedBufferSet\r\n                        });\r\n                    } else {\r\n                        buffer = bufferSet.owner.flushBuffer(copiedBufferSet, false);\r\n\r\n                        // Note that this is an attribute on the bufferSet, but is\r\n                        // not applied to the actual webgl vertex data.\r\n                        buffer.objectId = objectId | OVERRIDE_FLAG;\r\n\r\n                        this.invisibleElements.add(objectId);\r\n                        this.hiddenDueToSetColor.set(objectId, buffer);\r\n                    }                    \r\n                } else {\r\n                    this.originalColors.set(objectId, originalColor);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.dirty = true;\r\n    }\r\n\r\n    init() {\r\n        var promise = new Promise((resolve, reject) => {\r\n            this.dirty = true;\r\n            this.then = 0;\r\n            this.running = true;\r\n            this.firstRun = true;\r\n\r\n            this.fps = 0;\r\n            this.timeLast = 0;\r\n\r\n            this.canvas.oncontextmenu = function (e) { // Allow right-click for camera panning\r\n                e.preventDefault();\r\n            };\r\n\r\n            this.cameraControl = new CameraControl(this);\r\n            this.lighting = new Lighting(this);\r\n            this.programManager = new ProgramManager(this.gl, this.settings);\r\n\r\n            this.programManager.load().then(() => {\r\n                // It would be really nice to get the BIMsurfer V1 like anti-aliasing, so far I understand this is definitely\r\n                // possible in WebGL2 but you need to do something with framebuffers/renderbuffers.\r\n\r\n//\t\t\t\tthis.colorFrameBuffer = this.gl.createRenderbuffer();\r\n//\t\t\t\tthis.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.colorFrameBuffer);\r\n//\t\t\t\tthis.gl.renderbufferStorageMultisample(this.gl.RENDERBUFFER, 4, this.gl.RGBA8, this.width, this.height);\r\n//\r\n//\t\t\t\tthis.renderFrameBuffer = this.gl.createFramebuffer();\r\n//\t\t\t\tthis.renderFrameBuffer = this.gl.createFramebuffer();\r\n//\t\t\t\t\r\n//\t\t\t\tthis.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.renderFrameBuffer);\r\n//\t\t\t\tthis.gl.framebufferRenderbuffer(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.RENDERBUFFER, this.colorFrameBuffer);\r\n//\t\t\t\tthis.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\r\n\r\n                resolve();\r\n                requestAnimationFrame((now) => {\r\n                    this.render(now);\r\n                });\r\n            });\r\n\r\n            this.pickBuffer = new RenderBuffer(this.canvas, this.gl, COLOR_FLOAT_DEPTH_NORMAL);\r\n            this.oitBuffer = new RenderBuffer(this.canvas, this.gl, COLOR_ALPHA_DEPTH);\r\n            this.quad = new SSQuad(this.gl);\r\n            this.quad2 = new WSQuad(this, this.gl);\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    setDimensions(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.camera.perspective._dirty = true;\r\n        this.updateViewport();\r\n    }\r\n\r\n    render(now) {\r\n        now *= 0.001;\r\n        const deltaTime = now - this.then;\r\n        this.then = now;\r\n\r\n        this.fps++;\r\n\r\n        var wasDirty = this.dirty;\r\n        if (this.dirty) {\r\n            this.dirty = false;\r\n            this.drawScene(this.buffers, deltaTime);\r\n        }\r\n\r\n        if (now - this.timeLast >= 1) {\r\n            if (wasDirty) {\r\n                this.stats.setParameter(\"Rendering\", \"FPS\", Number(this.fps / (now - this.timeLast)).toPrecision(5));\r\n            } else {\r\n                this.stats.setParameter(\"Rendering\", \"FPS\", \"Off\");\r\n            }\r\n            this.timeLast = now;\r\n            this.fps = 0;\r\n            this.stats.requestUpdate();\r\n            this.stats.update();\r\n        }\r\n\r\n        if (this.running) {\r\n            requestAnimationFrame((now) => {\r\n                this.render(now);\r\n            });\r\n        }\r\n        for (var animationListener of this.animationListeners) {\r\n            animationListener(deltaTime);\r\n        }\r\n    }\r\n\r\n    drawScene(buffers, deltaTime) {\r\n        // Locks the camera so that intermittent mouse events will not\r\n        // change the matrices until the camera is unlocked again.\r\n        // @todo This might need some work to make sure events are\r\n        // processed timely and smoothly.\r\n        this.camera.lock();\r\n\r\n        let gl = this.gl;\r\n\r\n        gl.depthMask(true);\r\n        gl.disable(gl.STENCIL_TEST);\r\n        gl.clearColor(1, 1, 1, 1.0);\r\n        gl.clearDepth(1);\r\n        gl.clearStencil(0);\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LEQUAL);\r\n        \r\n        gl.viewport(0, 0, this.width, this.height);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\r\n        gl.enable(gl.CULL_FACE);\r\n\r\n        this.sectionPlaneValues.set(this.sectionPlaneValues2);\r\n\r\n        for (var renderLayer of this.renderLayers) {\r\n            renderLayer.prepareRender();\r\n        }\r\n\r\n        let render = (elems, t) => {\r\n            for (var transparency of (t || [false, true])) {\r\n                for (var renderLayer of this.renderLayers) {\r\n                    renderLayer.render(transparency, elems);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.modelBounds) {\r\n            if (!this.cameraSet) { // HACK to look at model origin as soon as available\r\n                this.camera.target = [0, 0, 0];\r\n                this.camera.eye = [0, 1, 0];\r\n                this.camera.up = [0, 0, 1];\r\n                this.camera.worldAxis = [ // Set the +Z axis as World \"up\"\r\n                    1, 0, 0, // Right\r\n                    0, 0, 1, // Up\r\n                    0, -1, 0  // Forward\r\n                ];\r\n                this.camera.viewFit(this.modelBounds); // Position camera so that entire model bounds are in view\r\n                this.cameraSet = true;\r\n            }\r\n\r\n            if (!this.sectionPlaneIsDisabled) {\r\n                gl.stencilMask(0xff);\r\n                this.quad2.position(this.modelBounds, this.sectionPlaneValues);\r\n                gl.colorMask(false, false, false, false);\r\n                gl.disable(gl.CULL_FACE);\r\n                this.quad2.draw();\r\n                gl.enable(gl.CULL_FACE);\r\n                gl.depthMask(false);\r\n\r\n                gl.enable(gl.STENCIL_TEST);\r\n                gl.stencilFunc(gl.ALWAYS, 1, 0xff);\r\n\r\n                this.sectionPlaneValues.set(this.sectionPlaneValuesDisabled);\r\n\r\n                gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR); // increment on pass\r\n                gl.cullFace(gl.BACK);\r\n                render({without: this.invisibleElements}, [false]);\r\n\r\n                gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR); // decrement on pass\r\n                gl.cullFace(gl.FRONT);\r\n                render({without: this.invisibleElements}, [false]);\r\n\r\n                this.sectionPlaneValues.set(this.sectionPlaneValues2);\r\n                const eyePlaneDist = this.lastSectionPlaneAdjustment = Math.abs(vec3.dot(this.camera.eye, this.sectionPlaneValues2) - this.sectionPlaneValues2[3]);\r\n                this.sectionPlaneValues[3] -= 1.e-3 * eyePlaneDist;\r\n\r\n                gl.stencilFunc(gl.EQUAL, 1, 0xff);\r\n                gl.colorMask(true, true, true, true);\r\n                gl.depthMask(true);\r\n                gl.clear(gl.DEPTH_BUFFER_BIT);\r\n                gl.disable(gl.CULL_FACE);\r\n                this.quad2.draw();\r\n                gl.enable(gl.CULL_FACE);\r\n\r\n                gl.cullFace(gl.BACK);\r\n                gl.disable(gl.STENCIL_TEST);\r\n                gl.stencilFunc(gl.ALWAYS, 1, 0xff);\r\n            }\r\n        }        \r\n\r\n        if (this.useOrderIndependentTransparency) {\r\n        \t  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n              gl.disable(gl.BLEND);\r\n              render({without: this.invisibleElements}, [false]);\r\n\r\n              this.oitBuffer.bind();\r\n              gl.clearColor(0, 0, 0, 0);\r\n              this.oitBuffer.clear();\r\n              // @todo It should be possible to eliminate this step. It's necessary\r\n              // to repopulate the depth-buffer with opaque elements.\r\n              render({without: this.invisibleElements}, [false]);\r\n              this.oitBuffer.clear(false);\r\n              gl.enable(gl.BLEND);\r\n              gl.blendFunc(gl.ONE, gl.ONE);\r\n              gl.depthMask(false);\r\n      \r\n              render({without: this.invisibleElements}, [true]);\r\n      \r\n              gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n              gl.viewport(0, 0, this.width, this.height);\r\n              this.quad.draw(this.oitBuffer.colorBuffer, this.oitBuffer.alphaBuffer);\r\n        } else {\r\n            gl.disable(gl.BLEND);\r\n            render({without: this.invisibleElements}, [false]);\r\n            gl.enable(gl.BLEND);\r\n            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n            render({without: this.invisibleElements}, [true]);\r\n        }\r\n\r\n        // From now on section plane is disabled.\r\n        this.sectionPlaneValues.set(this.sectionPlaneValuesDisabled);\r\n\r\n        // Selection outlines require face culling to be disabled.\r\n        gl.disable(gl.CULL_FACE);\r\n\r\n        if (this.selectedElements.size > 0) {\r\n            gl.enable(gl.STENCIL_TEST);\r\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\r\n            gl.stencilFunc(gl.ALWAYS, 1, 0xff);\r\n            gl.stencilMask(0xff);\r\n            gl.depthMask(false);\r\n            gl.disable(gl.DEPTH_TEST);\r\n            gl.colorMask(false, false, false, false);\r\n            \r\n            render({with: this.selectedElements, pass: 'stencil'});\r\n\r\n            gl.stencilFunc(gl.NOTEQUAL, 1, 0xff);\r\n            gl.stencilMask(0x00);\r\n            gl.colorMask(true, true, true, true);\r\n\r\n            for (var renderLayer of this.renderLayers) {\r\n                renderLayer.renderSelectionOutlines(this.selectedElements);\r\n            }\r\n\r\n            gl.disable(gl.STENCIL_TEST);\r\n\r\n            for (var renderLayer of this.renderLayers) {\r\n                renderLayer.renderSelectionOutlines(this.selectedElements, 0.001);\r\n            }\r\n        }\r\n\r\n        for (var renderLayer of this.renderLayers) {\r\n            if (renderLayer.renderTileBorders) {\r\n                renderLayer.renderTileBorders();\r\n            }\r\n        }\r\n\r\n        this.camera.unlock();\r\n\r\n//\t\tthis.gl.bindFramebuffer(this.gl.READ_FRAMEBUFFER, this.renderFrameBuffer);\r\n//\t\tthis.gl.bindFramebuffer(this.gl.DRAW_FRAMEBUFFER, this.colorFrameBuffer);\r\n//\t\tthis.gl.clearBufferfv(this.gl.COLOR, 0, [0.0, 0.0, 0.0, 1.0]);\r\n//\t\tthis.gl.blitFramebuffer(\r\n//\t\t    0, 0, this.width, this.height,\r\n//\t\t    0, 0, this.width, this.height,\r\n//\t\t    this.gl.COLOR_BUFFER_BIT, this.gl.NEAREST\r\n//\t\t);\r\n    }\r\n\r\n    startSectionPlane(params) {\r\n        let p = this.pick({canvasPos: params.canvasPos, select: false});\r\n        if (p.normal && p.coordinates) {\r\n            this.sectionPlaneValues.set(p.normal.subarray(0,3));\r\n            this.sectionPlaneValues[3] = -vec3.dot(p.coordinates, p.normal) - 1000.;\r\n            this.sectionPlaneValues2.set(this.sectionPlaneValues);\r\n            this.sectionPlaneIsDisabled = false;\r\n            this.dirty = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     Attempts to pick an object at the given canvas coordinates.\r\n\r\n     @param {*} params\r\n     @param {Array} params.canvasPos Canvas coordinates\r\n     @return {*} Information about the object that was picked, if any.\r\n     */\r\n    pick(params) { // Returns info on the object at the given canvas coordinates\r\n\r\n        var canvasPos = params.canvasPos;\r\n        if (!canvasPos) {\r\n            throw \"param expected: canvasPos\";\r\n        }\r\n\r\n        this.sectionPlaneValues.set(this.sectionPlaneValues2);\r\n        this.sectionPlaneValues[3] -= 1.e-3 * this.lastSectionPlaneAdjustment;        \r\n\r\n        this.pickBuffer.bind();\r\n\r\n        this.gl.depthMask(true);\r\n        this.gl.clearBufferuiv(this.gl.COLOR, 0, new Uint8Array([0, 0, 0, 0]));\r\n        \r\n        /*\r\n         * @todo: clearing the 2nd attachment does not work? Not a big issue as long\r\n         * as one of the buffers is cleared to be able to detect clicks outside of the model.\r\n         */\r\n        // this.gl.clearBufferfv(this.gl.COLOR, 1, new Float32Array([1.]));\r\n\r\n        this.gl.clearBufferfv(this.gl.DEPTH, this.pickBuffer.depthBuffer, new Uint8Array([1, 0])); // TODO should be a Float16Array, which does not exists, need to find the 16bits that define the number 1 here\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        this.gl.depthFunc(this.gl.LEQUAL);\r\n        this.gl.disable(this.gl.BLEND);\r\n\r\n        for (var transparency of [false, true]) {\r\n        \tfor (var renderLayer of this.renderLayers) {\r\n                renderLayer.render(transparency, {without: this.invisibleElements, pass: 'pick'});\r\n        \t}\r\n        }\r\n        \r\n        let [x,y] = [Math.round(canvasPos[0]), Math.round(canvasPos[1])];\r\n        var pickColor = this.pickBuffer.read(x, y);\r\n        var pickId = pickColor[0] + pickColor[1] * 256 + pickColor[2] * 65536 + pickColor[3] * 16777216;\r\n        var viewObject = this.pickIdToViewObject[pickId];\r\n        let normal = this.pickBuffer.normal(x, y);\r\n\r\n        // Don't attempt to read depth if there is no object under the cursor\r\n        // Note that the default depth of 1. corresponds to the far plane, which\r\n        // can be quite far away but at least is something that is recognizable\r\n        // in most cases.\r\n        let z = viewObject ? this.pickBuffer.depth(x,y) : 1.;\r\n        vec3.set(tmp_unproject, x / this.width * 2 - 1, - y / this.height * 2 + 1, z);\r\n        vec3.transformMat4(tmp_unproject, tmp_unproject, this.camera.projection.projMatrixInverted);\r\n        vec3.transformMat4(tmp_unproject, tmp_unproject, this.camera.viewMatrixInverted);\r\n//        console.log(\"Picked @\", tmp_unproject[0], tmp_unproject[1], tmp_unproject[2], objectId, viewObject);\r\n\r\n        this.pickBuffer.unbind();\r\n        \r\n        if (viewObject) {\r\n        \tvar objectId = viewObject.objectId;\r\n            if (params.select !== false) {\r\n                if (!params.shiftKey) {\r\n                    this.selectedElements.clear();\r\n                }\r\n                if (this.selectedElements.has(objectId)) {\r\n                    this.selectedElements.delete(objectId);\r\n                } else {\r\n                    this.selectedElements.add(objectId);\r\n                }\r\n            }\r\n            return {object: viewObject, normal: normal, coordinates: tmp_unproject};\r\n        } else if (params.select !== false) {\r\n            this.selectedElements.clear();\r\n        }\r\n\r\n        return {object: null, coordinates: tmp_unproject};\r\n    }\r\n\r\n    getPickColor(objectId) { // Converts an integer to a pick color\r\n    \tvar viewObject = this.viewObjects.get(objectId);\r\n    \tif (viewObject == null) {\r\n    \t\tconsole.error(\"No viewObject found for \" + objectId);\r\n    \t}\r\n    \tvar pickId = viewObject.pickId;\r\n    \tvar pickColor = new Uint8Array([pickId & 0x000000FF, (pickId & 0x0000FF00) >> 8, (pickId & 0x00FF0000) >> 16, (pickId & 0xFF000000) > 24]);\r\n        return pickColor;\r\n    }\r\n\r\n    setModelBounds(modelBounds) {\r\n        this.modelBounds = modelBounds;\r\n        this.camera.setModelBounds(modelBounds);\r\n        this.updateViewport();\r\n    }\r\n\r\n    updateViewport() {\r\n        this.dirty = true;\r\n    }\r\n\r\n    loadingDone() {\r\n        this.dirty = true;\r\n    }\r\n\r\n    cleanup() {\r\n        this.running = false;\r\n        this.cameraControl.cleanup();\r\n//        this.gl.getExtension('WEBGL_lose_context').loseContext();\r\n        this.stats.cleanup();\r\n    }\r\n\r\n    addAnimationListener(fn) {\r\n        this.animationListeners.push(fn);\r\n    }\r\n    \r\n    getViewObject(objectId) {\r\n    \treturn this.viewObjects.get(objectId);\r\n    }\r\n    \r\n    addViewObject(objectId, viewObject) {\r\n    \tviewObject.pickId = this.pickIdCounter++;\r\n    \tthis.viewObjects.set(objectId, viewObject);\r\n        this.pickIdToViewObject[viewObject.pickId] = viewObject;\r\n\r\n        let byType = this.viewObjectsByType.get(viewObject.type) || [];\r\n        byType.push(viewObject);\r\n        this.viewObjectsByType.set(viewObject.type, byType);\r\n    }\r\n\r\n    viewFit(ids) {\r\n        let aabb = ids.map(this.viewObjects.get.bind(this.viewObjects))\r\n            .map((o) => o.aabb)\r\n            .reduce(Utils.unionAabb, Utils.emptyAabb());\r\n        this.camera.viewFit(aabb);\r\n        this.dirty = true;\r\n    }\r\n\r\n    resetCamera() {\r\n        this.cameraSet = false;\r\n        this.dirty = true;\r\n    }\r\n\r\n    resetColors() {\r\n        this.resetColor(\r\n            Array.from(this.hiddenDueToSetColor.keys()).concat(\r\n                Array.from(this.originalColors.keys())\r\n            ).concat(\r\n                Array.from(this.instancesWithChangedColor.keys())\r\n            )\r\n        );\r\n        this.dirty = true;\r\n    }\r\n\r\n    resetVisibility() {\r\n        this.setVisibility(this.invisibleElements.keys(), true);\r\n        this.dirty = true;\r\n    }\r\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/viewer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 998,
    "kind": "variable",
    "name": "tmp_unproject",
    "memberof": "viewer/viewer.js",
    "static": true,
    "longname": "viewer/viewer.js~tmp_unproject",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/viewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 999,
    "kind": "variable",
    "name": "OVERRIDE_FLAG",
    "memberof": "viewer/viewer.js",
    "static": true,
    "longname": "viewer/viewer.js~OVERRIDE_FLAG",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/viewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1000,
    "kind": "class",
    "name": "Viewer",
    "memberof": "viewer/viewer.js",
    "static": true,
    "longname": "viewer/viewer.js~Viewer",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/viewer.js",
    "importStyle": "{Viewer}",
    "description": "\nMain viewer class, too many responsibilities:\n- Keep track of width/height of viewport\n- Keeps track of dirty scene\n- Contains the basic render loop (and delegates to the render layers)",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Viewer"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1001,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 1002,
    "kind": "member",
    "name": "stats",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#stats",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1003,
    "kind": "member",
    "name": "settings",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#settings",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1004,
    "kind": "member",
    "name": "canvas",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1005,
    "kind": "member",
    "name": "camera",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#camera",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1006,
    "kind": "member",
    "name": "overlay",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#overlay",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1007,
    "kind": "member",
    "name": "gl",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#gl",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1008,
    "kind": "member",
    "name": "width",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#width",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1009,
    "kind": "member",
    "name": "height",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#height",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1010,
    "kind": "member",
    "name": "bufferSetPool",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#bufferSetPool",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1011,
    "kind": "member",
    "name": "pickIdCounter",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#pickIdCounter",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 1012,
    "kind": "member",
    "name": "sectionPlaneIsDisabled",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#sectionPlaneIsDisabled",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1013,
    "kind": "member",
    "name": "sectionPlaneValuesDisabled",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#sectionPlaneValuesDisabled",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1014,
    "kind": "member",
    "name": "sectionPlaneValues",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#sectionPlaneValues",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1015,
    "kind": "member",
    "name": "sectionPlaneValues2",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#sectionPlaneValues2",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1016,
    "kind": "member",
    "name": "pickIdToViewObject",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#pickIdToViewObject",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1017,
    "kind": "member",
    "name": "renderLayers",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#renderLayers",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1018,
    "kind": "member",
    "name": "animationListeners",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#animationListeners",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1019,
    "kind": "member",
    "name": "colorRestore",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#colorRestore",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1020,
    "kind": "member",
    "name": "geometryIdToBufferSet",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#geometryIdToBufferSet",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1021,
    "kind": "member",
    "name": "viewObjects",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#viewObjects",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1022,
    "kind": "member",
    "name": "viewObjectsByType",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#viewObjectsByType",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1023,
    "kind": "member",
    "name": "invisibleElements",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#invisibleElements",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1024,
    "kind": "member",
    "name": "hiddenDueToSetColor",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#hiddenDueToSetColor",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1025,
    "kind": "member",
    "name": "originalColors",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#originalColors",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1026,
    "kind": "member",
    "name": "instancesWithChangedColor",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#instancesWithChangedColor",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1027,
    "kind": "member",
    "name": "selectedElements",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#selectedElements",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1028,
    "kind": "member",
    "name": "useOrderIndependentTransparency",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#useOrderIndependentTransparency",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1029,
    "kind": "method",
    "name": "callByType",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#callByType",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "types",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 1030,
    "kind": "method",
    "name": "setVisibility",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#setVisibility",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "elems",
        "types": [
          "*"
        ]
      },
      {
        "name": "visible",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1031,
    "kind": "member",
    "name": "dirty",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#dirty",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1032,
    "kind": "method",
    "name": "setSelectionState",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#setSelectionState",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "elems",
        "types": [
          "*"
        ]
      },
      {
        "name": "selected",
        "types": [
          "*"
        ]
      },
      {
        "name": "clear",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1034,
    "kind": "method",
    "name": "getSelected",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#getSelected",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1035,
    "kind": "method",
    "name": "resetColor",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#resetColor",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "elems",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1036,
    "kind": "method",
    "name": "setColor",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#setColor",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "elems",
        "types": [
          "*"
        ]
      },
      {
        "name": "clr",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1038,
    "kind": "method",
    "name": "init",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#init",
    "access": "public",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1040,
    "kind": "member",
    "name": "then",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#then",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 1041,
    "kind": "member",
    "name": "running",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#running",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1042,
    "kind": "member",
    "name": "firstRun",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#firstRun",
    "access": "public",
    "description": null,
    "lineNumber": 286,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1043,
    "kind": "member",
    "name": "fps",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#fps",
    "access": "public",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 1044,
    "kind": "member",
    "name": "timeLast",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#timeLast",
    "access": "public",
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 1045,
    "kind": "member",
    "name": "cameraControl",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#cameraControl",
    "access": "public",
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1046,
    "kind": "member",
    "name": "lighting",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#lighting",
    "access": "public",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1047,
    "kind": "member",
    "name": "programManager",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#programManager",
    "access": "public",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1048,
    "kind": "member",
    "name": "pickBuffer",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#pickBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1049,
    "kind": "member",
    "name": "oitBuffer",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#oitBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1050,
    "kind": "member",
    "name": "quad",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#quad",
    "access": "public",
    "description": null,
    "lineNumber": 322,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1051,
    "kind": "member",
    "name": "quad2",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#quad2",
    "access": "public",
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1052,
    "kind": "method",
    "name": "setDimensions",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#setDimensions",
    "access": "public",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1055,
    "kind": "method",
    "name": "render",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#render",
    "access": "public",
    "description": null,
    "lineNumber": 335,
    "undocument": true,
    "params": [
      {
        "name": "now",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1060,
    "kind": "method",
    "name": "drawScene",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#drawScene",
    "access": "public",
    "description": null,
    "lineNumber": 370,
    "undocument": true,
    "params": [
      {
        "name": "buffers",
        "types": [
          "*"
        ]
      },
      {
        "name": "deltaTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1061,
    "kind": "member",
    "name": "cameraSet",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#cameraSet",
    "access": "public",
    "description": null,
    "lineNumber": 416,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1062,
    "kind": "method",
    "name": "startSectionPlane",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#startSectionPlane",
    "access": "public",
    "description": null,
    "lineNumber": 538,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1065,
    "kind": "method",
    "name": "pick",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#pick",
    "access": "public",
    "description": "Attempts to pick an object at the given canvas coordinates.",
    "lineNumber": 556,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.canvasPos",
        "description": "Canvas coordinates"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Information about the object that was picked, if any."
    }
  },
  {
    "__docId__": 1066,
    "kind": "method",
    "name": "getPickColor",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#getPickColor",
    "access": "public",
    "description": null,
    "lineNumber": 626,
    "undocument": true,
    "params": [
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1067,
    "kind": "method",
    "name": "setModelBounds",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#setModelBounds",
    "access": "public",
    "description": null,
    "lineNumber": 636,
    "undocument": true,
    "params": [
      {
        "name": "modelBounds",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1068,
    "kind": "member",
    "name": "modelBounds",
    "memberof": "viewer/viewer.js~Viewer",
    "static": false,
    "longname": "viewer/viewer.js~Viewer#modelBounds",
    "access": "public",
    "description": null,
    "lineNumber": 637,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1069,
    "kind": "method",
    "name": "updateViewport",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#updateViewport",
    "access": "public",
    "description": null,
    "lineNumber": 642,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1071,
    "kind": "method",
    "name": "loadingDone",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#loadingDone",
    "access": "public",
    "description": null,
    "lineNumber": 646,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1073,
    "kind": "method",
    "name": "cleanup",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#cleanup",
    "access": "public",
    "description": null,
    "lineNumber": 650,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1075,
    "kind": "method",
    "name": "addAnimationListener",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#addAnimationListener",
    "access": "public",
    "description": null,
    "lineNumber": 657,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1076,
    "kind": "method",
    "name": "getViewObject",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#getViewObject",
    "access": "public",
    "description": null,
    "lineNumber": 661,
    "undocument": true,
    "params": [
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1077,
    "kind": "method",
    "name": "addViewObject",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#addViewObject",
    "access": "public",
    "description": null,
    "lineNumber": 665,
    "undocument": true,
    "params": [
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      },
      {
        "name": "viewObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1078,
    "kind": "method",
    "name": "viewFit",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#viewFit",
    "access": "public",
    "description": null,
    "lineNumber": 675,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1080,
    "kind": "method",
    "name": "resetCamera",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#resetCamera",
    "access": "public",
    "description": null,
    "lineNumber": 683,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1083,
    "kind": "method",
    "name": "resetColors",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#resetColors",
    "access": "public",
    "description": null,
    "lineNumber": 688,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1085,
    "kind": "method",
    "name": "resetVisibility",
    "memberof": "viewer/viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/viewer.js~Viewer#resetVisibility",
    "access": "public",
    "description": null,
    "lineNumber": 699,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1087,
    "kind": "file",
    "name": "viewer/wsquad.js",
    "content": "/**\n * A World-space quadrangle used for rendering a capping polygon for the sectionplane.\n *\n * @export\n * @class WSQuad\n */\n\nlet temp = vec3.create();\n\nexport class WSQuad {\n\n    constructor(viewer, gl) {\n        this.gl = gl;\n        this.viewer = viewer;\n\n        let vao = this.vao = gl.createVertexArray();\n        gl.bindVertexArray(vao);\n\n        let positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n            -1., +1.,   -1., -1.,   +1., -1.,\n            -1., +1.,   +1., -1.,   +1., +1.\n        ]), gl.STATIC_DRAW);\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(0);\n\n        let vs_source = `#version 300 es\n        precision highp float;\n        uniform mat4 projectionMatrix;\n        uniform mat4 viewMatrix;\n        layout(location=0) in vec4 vertexPosition;\n        layout(std140) uniform Placement {\n            /* vec4 for alignment */\n            vec4 position;\n            vec4 axis1;\n            vec4 axis2;\n            /* float size; size is in the position.w */\n        } placement;\n        out vec2 uv;\n        void main() {\n            gl_Position = projectionMatrix * viewMatrix * vec4(placement.position.xyz + \n                vertexPosition.x * placement.axis1.xyz * placement.position.w + \n                vertexPosition.y * placement.axis2.xyz * placement.position.w, 1.);\n        }`;\n\n        let fs_source = `#version 300 es\n        precision highp float;\n        out vec4 fragColor;\n        void main() {\n            fragColor = vec4(0.1, 0.1, 0.1, 1.0);\n        }`;\n\n        let vs = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vs, vs_source);\n        gl.compileShader(vs);\n        if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(vs));\n        }\n        let fs = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fs, fs_source);\n        gl.compileShader(fs);\n        if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(fs));\n        }\n        let p = this.program = gl.createProgram();\n        gl.attachShader(p, vs);\n        gl.attachShader(p, fs);\n        gl.linkProgram(p);\n        if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {\n            console.error(gl.getProgramInfoLog(p));\n        }\n        \n        this.locations = {\n            placement: gl.getUniformBlockIndex(p, \"Placement\"),\n            viewMatrix: gl.getUniformLocation(p, \"viewMatrix\"),\n            projectionMatrix: gl.getUniformLocation(p, \"projectionMatrix\")\n        };\n\n        this.placementData = new Float32Array(12);\n    }\n\n    position(bounds, planeEq) {\n        const Z = vec3.fromValues(0,0,1);\n        \n        let l = vec3.len(planeEq);\n        for (var i = 0; i < 3; ++i) {\n            this.placementData[i] = planeEq[3] * planeEq[i] / l;\n        }\n\n        let X = this.placementData.subarray(4, 7);\n        let Y = this.placementData.subarray(8, 11);\n        let XY = [X, Y];\n        vec3.cross(X, planeEq, Z);\n        vec3.normalize(X, X);\n        vec3.cross(Y, X, planeEq)\n        vec3.normalize(Y, Y);\n        let scale = 0.;\n        \n        let zero_one = [0,1];\n        for (let i of zero_one) {\n            for (let j of zero_one) {\n                for (let k of zero_one) {\n                    let p = vec3.fromValues(bounds[3*i+0], bounds[3*j+1], bounds[3*k+2]);\n                    vec3.subtract(temp, p, planeEq);\n                    let d = vec3.dot(planeEq, temp);\n                    vec3.scale(temp, planeEq, d);\n                    vec3.subtract(temp, p, temp);\n                    for (let i = 0; i < 2; ++i) {\n                        let d = Math.abs(vec3.dot(temp, XY[i]));\n                        if (d > scale) {\n                            scale = d;\n                        }\n                    }\n                }\n            }\n        }\n        this.placementData[3] = scale;\n        \n        let gl = this.gl;\n        this._buffer = gl.createBuffer();\n        gl.bindBuffer(gl.UNIFORM_BUFFER, this._buffer);\n        gl.bufferData(gl.UNIFORM_BUFFER, this.placementData, gl.DYNAMIC_DRAW);        \n    }\n\n    draw(vm, pm) {\n        let gl = this.gl;\n\n        gl.useProgram(this.program);\n        \n        gl.uniformMatrix4fv(this.locations.projectionMatrix, false, this.viewer.camera.projMatrix);\n        gl.uniformMatrix4fv(this.locations.viewMatrix, false, this.viewer.camera.viewMatrix);\n        gl.bindBufferBase(gl.UNIFORM_BUFFER, this.locations.placement, this._buffer);\n\n        gl.bindVertexArray(this.vao);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n}",
    "static": true,
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/viewer/wsquad.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1088,
    "kind": "variable",
    "name": "temp",
    "memberof": "viewer/wsquad.js",
    "static": true,
    "longname": "viewer/wsquad.js~temp",
    "access": "public",
    "export": false,
    "importPath": "bimsurfer3/viewer/wsquad.js",
    "importStyle": null,
    "description": "A World-space quadrangle used for rendering a capping polygon for the sectionplane.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "WSQuad"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1089,
    "kind": "class",
    "name": "WSQuad",
    "memberof": "viewer/wsquad.js",
    "static": true,
    "longname": "viewer/wsquad.js~WSQuad",
    "access": "public",
    "export": true,
    "importPath": "bimsurfer3/viewer/wsquad.js",
    "importStyle": "{WSQuad}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 1090,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/wsquad.js~WSQuad",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/wsquad.js~WSQuad#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 1091,
    "kind": "member",
    "name": "gl",
    "memberof": "viewer/wsquad.js~WSQuad",
    "static": false,
    "longname": "viewer/wsquad.js~WSQuad#gl",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1092,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/wsquad.js~WSQuad",
    "static": false,
    "longname": "viewer/wsquad.js~WSQuad#viewer",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1093,
    "kind": "member",
    "name": "locations",
    "memberof": "viewer/wsquad.js~WSQuad",
    "static": false,
    "longname": "viewer/wsquad.js~WSQuad#locations",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "{\"placement\": *, \"viewMatrix\": *, \"projectionMatrix\": *}"
      ]
    }
  },
  {
    "__docId__": 1094,
    "kind": "member",
    "name": "placementData",
    "memberof": "viewer/wsquad.js~WSQuad",
    "static": false,
    "longname": "viewer/wsquad.js~WSQuad#placementData",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1095,
    "kind": "method",
    "name": "position",
    "memberof": "viewer/wsquad.js~WSQuad",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/wsquad.js~WSQuad#position",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "bounds",
        "types": [
          "*"
        ]
      },
      {
        "name": "planeEq",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1096,
    "kind": "member",
    "name": "_buffer",
    "memberof": "viewer/wsquad.js~WSQuad",
    "static": false,
    "longname": "viewer/wsquad.js~WSQuad#_buffer",
    "access": "private",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1097,
    "kind": "method",
    "name": "draw",
    "memberof": "viewer/wsquad.js~WSQuad",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/wsquad.js~WSQuad#draw",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "vm",
        "types": [
          "*"
        ]
      },
      {
        "name": "pm",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# BIMSurfer 2.1\n\n![ClassDiagram](https://github.com/TNOBIM/BIMSurfer/raw/master/docs/classdiagram.png)\n",
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"bimsurfer3\",\r\n  \"groupId\": \"org.opensourcebim\",\r\n  \"artifactId\": \"bimsurfer3\",\r\n  \"organization\": \"OpenSource BIM\",\r\n  \"version\": \"0.0.1\",\r\n  \"description\": \"BIMsurferV3\",\r\n  \"author\": {\r\n    \"name\": \"Ruben de Laat\",\r\n    \"email\": \"ruben@logic-labs.nl\"\r\n  },\r\n  \"scripts\": {},\r\n  \"files\": [\r\n    \"js\"\r\n  ],\r\n  \"main\": \"index.html\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/TNOBIM/BIMSurfer\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/TNOBIM/BIMSurfer/issues\"\r\n  },\r\n  \"keywords\": [],\r\n  \"dependencies\": {\r\n    \"bimserverapi\": \"*\",\r\n    \"xhr2\": \"*\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"grunt\": \"*\",\r\n    \"grunt-contrib-jshint\": \"*\",\r\n    \"grunt-contrib-nodeunit\": \"*\",\r\n    \"grunt-contrib-uglify\": \"*\",\r\n    \"grunt-contrib-concat\": \"*\",\r\n    \"grunt-contrib-cssmin\": \"*\",\r\n    \"grunt-contrib-copy\": \"*\",\r\n    \"grunt-contrib-clean\": \"*\",\r\n    \"grunt-zip\": \"*\"\r\n  },\r\n  \"preferGlobal\": true,\r\n  \"private\": false,\r\n  \"analyze\": true,\r\n  \"license\": \"AGPL-3.0\",\r\n  \"readmeFilename\": \"README.md\"\r\n}",
    "longname": "/var/jenkins/jobs/BIMsurfer V3/workspace/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]